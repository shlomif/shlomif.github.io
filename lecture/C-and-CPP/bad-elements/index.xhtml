<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>C and C++ Elements to Avoid - Shlomi Fish’s Homesite</title><meta charset="utf-8"/><meta name="author" content="Shlomi Fish"/><meta name="description" content="Coding Elements and anti-patterns that should be avoided in C and C++"/><meta name="keywords" content="Shlomi Fish,Shlomi,Fish,Perl,Humour,Israel,Programming,Open Source,Free Software,Presentations,Philosophy,Freecell,Freecell Solver,GIMP,Software"/><link rel="canonical" href="https://www.shlomifish.org/lecture/C-and-CPP/bad-elements/"/><link rel="stylesheet" href="../../../style.css" media="screen" title="Normal"/><link rel="stylesheet" href="../../../print.css" media="print"/><link rel="shortcut icon" href="../../../favicon.png" type="image/png"/><link rel="next" href="../../../"/><meta name="viewport" content="width=device-width,initial-scale=1"/><script src="../../../js/main_all.js"></script></head><body><div id="header"><div class="leading_path"><a href="../../../">Shlomi Fish’s Homepage</a> → <a href="../../" title="Presentations I Wrote (Mostly Technical)">Lectures</a> → <a href="../../cat/programming-languages/">Programming Languages</a> → <a href="./">C and C++ Bad Elements</a></div></div><div id="faux"><p class="invisible"><a href="#main">Go to main content</a></p><p class="invisible"><a href="#navbar">Go to the navigation</a></p><div id="container-all"><button id="show_navbar" class="on">Hide NavBar ⬈</button><main class="main" id="main"><p class="invisible"><a href="#aft_sub_menu">Skip the sub-menu.</a></p><div class="sub_menu"><h2>Lectures Section Menu</h2><ul class="nav_links"><li><a href="../../cat/programming-languages/" title="Previous Page (Alt+P)"><img src="../../../images/sect-arr-left.svg" alt="Previous Page" class="bless"/></a></li><li><a href="../../cat/programming-languages/" title="Up in the Site (Alt+U)"><img src="../../../images/sect-arr-up.svg" alt="Up in the Site" class="bless"/></a></li><li><a href="../../Lambda-Calculus/" title="Next Page (Alt+N)"><img src="../../../images/sect-arr-right.svg" alt="Next Page" class="bless"/></a></li></ul><button id="toggle_sect_menu" class="toggle_sect_menu off" title="Show or Hide the Section Navigation Menu">Show</button><div id="sect_menu_wrapper" class="novis"><ul class="nm_main"><li><a href="../../Perl/Newbies/" title="Perl for Perl Newbies - Introducing Perl for Beginners">Perl for Newbies</a></li><li><a href="../../HTML-Tutorial/" title="The Hebrew Tutorial for Standard HTML">HTML Tutorial</a></li><li><a href="../../LAMP/" title="Web Publishing using Linux/Apache/MySQL/Perl/PHP/Python">Web Publishing with LAMP</a></li><li><a href="../../cat/software-management/" title="Presentations about Software Management">Software Management</a><br/><ul><li><a href="../../CatB/" title="Presentation about “The Cathedral and the Bazaar” series by Eric Raymond">CatB</a></li><li><a href="../../joel-test/">The Joel Test</a></li></ul></li><li><a href="../../cat/programming-languages/">Programming Languages</a><br/><ul><li><b>C and C++ Bad Elements</b></li><li><a href="../../Lambda-Calculus/">Scheme &amp; Lambda Calculus</a></li><li><a href="../../Perl/Haskell/" title="The Haskell Programming Language for Perl Programmers">Haskell for Perlers</a></li></ul></li><li><a href="../../cat/various-tools/" title="Various Tools">Tools</a><br/><ul><li><a href="../../Gimp/" title="The GNU Image Manipulation Program">GIMP</a></li><li><a href="../../PostgreSQL/" title="The PostgreSQL Database Server">PostgreSQL</a></li><li><a href="../../Sys-Call-Track/Lex-Yacc/" title="Lex and Yacc - for Tokenizing and Parsing">Lex &amp; Yacc</a></li><li><a href="../../Autotools/" title="GNU Autoconf/Automake/Libtool">Autotools</a></li><li><a href="../../WebMetaLecture/" title="Presentation about Website Meta Language">Web Meta Lecture</a></li><li><a href="../../Vim/beginners/" title="The Vim (Vi-Improved) Editor for Beginners">Vim for Beginners</a></li><li><a href="../../Vim/telux-tips-and-tricks/">Vim Tips and Tricks</a></li><li><a href="../../cat/pres-tools/" title="Tools for Preparing Slides for Presentations">Pres Tools</a><br/><ul><li><a href="../../Quad-Pres/">Quad-Pres</a></li><li><a href="../../Pres-Tools/Perl-Point/">PerlPoint</a></li></ul></li></ul></li><li><a href="../../W2L/" title="Presentations in the Series for Linux Beginners">Welcome to Linux</a><br/><ul><li><a href="../../W2L/Basic_Use/" title="Basic Linux Use">Basic Use</a></li><li><a href="../../W2L/Development/" title="Software Development under Linux">Development</a></li><li><a href="../../W2L/Network/" title="Networking in Linux Explanation and Howto">Networking</a></li><li><a href="../../W2L/Blitz/" title="Getting up to speed with Linux (Hebrew)">Blitz</a></li><li><a href="../../W2L/Mini-Intro/" title="Getting up to speed with Linux (Hebrew)">Mini-Intro</a></li><li><a href="../../W2L/Why_Linux/" title="What Linux is to me.">Why Linux</a></li><li><a href="../../Command-Line/" title="Topics for the Command Line Lecture for Newbies">Command Line (Notes)</a></li></ul></li><li><a href="../../cat/projects/" title="Presentations about my Software Projects">Projects</a><br/><ul><li><a href="../../Freecell-Solver/" title="Freecell Solver - Evolution of a C Program">Freecell Solver</a><br/><ul><li><a href="../../Freecell-Solver/The-Next-Pres/" title="Freecell Solver - The Next Presentation">The Next Presentation</a></li><li><a href="../../Freecell-Solver/project-intro/" title="Freecell Solver: Project Introduction">Project Intro</a></li></ul></li><li><a href="../../LM-Solve/" title="LM-Solve - a Logic Mazes Solver">LM-Solve</a></li></ul></li><li><a href="../../cat/lightning-talks/" title="Short Presentations">Lightning Talks</a><br/><ul><li><a href="../../mini/mdda/">Meta-Data Database Access</a></li><li><a href="../../Perl/Graham-Function/" title="Presentation about Finding the Graham Function">Graham Function</a></li><li><a href="../../Perl/Template-Toolkit/" title="A Powerful Templating System for Perl">The Template Toolkit</a></li><li><a href="../../Perl/Lightning/Opt-Multi-Task-in-PDL/">Optimising Multitasking in PDL</a></li><li><a href="../../Perl/Lightning/Test-Run/" title="Test::Run - a New and Improved Test Harness">Test::Run</a></li><li><a href="../../Perl/Lightning/Too-Many-Ways/">Too Many Ways to do it</a></li><li><a href="../../Perl/Lightning/Mojolicious/">Mojolicious and Mojolicious::Lite</a></li></ul></li></ul></div></div><div id="aft_sub_menu"></div><header><h1>C and C++ Elements to Avoid</h1></header><nav class="page_toc"><h2 id="toc">Table of Contents</h2><ul><li><a href="#itself">The Text Itself</a></li><li><a href="#main_doc">C and C++ Elements to Avoid</a><br/><ul><li><ul><li><a href="#intro">Introduction</a></li><li><a href="#bad-elements">The List of Bad Elements</a><br/><ul><li><a href="#no-indentation">No Indentation</a></li><li><a href="#no-compiler-warning-flags">Compiling without warnings flags</a></li><li><a href="#calling-variables-file">Calling variables "file"</a></li><li><a href="#identifiers-without-underscores">Identifiers without underscores</a></li><li><a href="#paragraphs">Write code in Paragraphs using Empty Lines</a></li><li><a href="#lowercase_modules_and_pkgs">Don't start Classes with a Lowercase Letter</a></li><li><a href="#non-intrusive-commenting">Avoid Intrusive Commenting</a></li><li><a href="#accessing_object_slots_directly">Accessing Object Slots Directly</a></li><li><a href="#caret_and_dollar_sign_in_regexes">'^' and '$' in Regular Expressions</a></li><li><a href="#magic_numbers">Magic Numbers</a></li><li><a href="#mixing_tabs_and_spaces">Mixing Tabs and Spaces</a></li><li><a href="#several_synchronised_arrays">Several synchronised arrays.</a></li><li><a href="#modifying_iterated_data_structures">Modifying data structures while iterating through them.</a></li><li><a href="#code_in_foreign_lang">Comments and Identifiers in a Foreign Language</a></li><li><a href="#using-namespace-std">“using namespace std;”</a></li><li><a href="#law_of_demeter">The Law of Demeter</a></li><li><a href="#delegating_parameter_passing">Passing parameters in delegation</a></li><li><a href="#duplicate_code">Duplicate Code</a></li><li><a href="#long_functions">Long Functions and Methods</a></li><li><a href="#ternary_operator_instead_of_if_else">Using the ternary operator for side-effects instead of if/else</a></li><li><a href="#global_vars_iface">Using Global Variables as an Interface to the Module</a></li><li><a href="#global_or_function_static_vars">Using Global Variables or Function-"static" Variables</a></li><li><a href="#declaring_all_vars_at_top">Declaring all variables at the top (Pre-declarations)</a></li><li><a href="#trailing-whitespace">Trailing Whitespace</a></li><li><a href="#code_and_markup_injection">Code and Markup Injection</a></li><li><a href="#using_undeclared_symbols">Using Undeclared Symbols</a></li><li><a href="#decls_not_in_common_headers">Declarations not in common headers</a></li><li><a href="#headers_without_include_guards">Headers without #include guards or #pragma once</a></li><li><a href="#long_lines">Overly Long Lines in the Source Code</a></li><li><a href="#dot_asterisk">Regular Expressions starting or ending with “.*”</a></li><li><a href="#populating_array_with_same_reference">Populating a Data Structure with Multiple Copies of the Same Pointer or Reference</a></li><li><a href="#one_var_for_two_purposes">Using One Variable for Two (or More) Different Purposes</a></li><li><a href="#premature_optimization">Premature Optimisation</a></li><li><a href="#version_control">Not Using Version Control</a></li><li><a href="#automated_tests">Writing Automated Tests</a></li><li><a href="#parsing_using_regex">Parsing XML/HTML/JSON/CSV/etc. without a tried-and-tested parser</a></li><li><a href="#generating_non_valid_markup">Generating invalid Markup (of HTML/etc.)</a></li><li><a href="#capturing_instead_of_clustering_in_regexes">Capturing Instead of Clustering in Regular Expressions</a></li><li><a href="#buffer_overflows">Buffer Overflows</a></li><li><a href="#format_string_vulnerabilities">Format String Vulnerabilities (printf/etc.)</a></li><li><a href="#callbacks_that_dont_accept_a_context_variable">Callbacks that do not accept a “void *” context variable</a></li><li><a href="#not_using_a_proper_build_system">Not Using a Proper Build System</a></li><li><a href="#not_using_a_bug_tracker">Not Using a Bug Tracker/Issue Tracker</a></li></ul></li><li><a href="#sources_of_advice">Sources of This Advice</a></li></ul></li></ul></li><li><a href="#formats">Formats</a></li><li><a href="#vcs">Version Control Repository</a></li><li><a href="#coverage">Coverage</a></li></ul></nav><div class="fancy_sects lim_width main_text side_toc"><h2 id="itself">The Text Itself</h2><header><div class="center ads_top"/></header><section xml:lang="en-GB" class="article"><h2 id="main_doc" class="title">C and C++ Elements to Avoid</h2><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="intro" class="title">Introduction</h4></header><p>Often when people ask for help with C or C++ code, they show code that suffers from many bad or outdated elements. This is expected, as there are many bad tutorials out there, and lots of bad code that people have learned from, but it is still not desirable. To encourage best practices, here is a document of some of the common bad elements that people tend to use and some better practices that should be used instead.</p><p>A book I read said, that as opposed to most previous idea systems, they were trying to <span class="bold"><strong>liquidate negatives</strong></span> instead of to instil positives in people. So in the spirit of liquidating negatives, this tutorial-in-reverse aims to show you what <span class="bold"><strong>not to do</strong></span>.</p><p><span class="bold"><strong>Note:</strong></span> Please don't think this advice is meant as gospel. There are some instances where one can expect to deviate from it, and a lot of it can be considered only the opinion of its originators. I tried to filter the various pieces of advice I found in the <a class="link" href="#sources_of_advice" title="Sources of This Advice">sources</a> and get rid of things that are either a matter of taste, or not so critical, or that have arguments for and against (so-called <a class="link" href="http://bikeshed.com/">colour of the bike shed arguments</a>), but some of the advice here may still be controversial.</p></section><div class="titlepage"><div><div></div><div><div class="authorgroup"><div class="author"><h3 class="author"><span class="firstname">Shlomi</span> <span class="surname">Fish</span></h3><div class="affiliation"><div class="address"><p><br/>            <code class="email">&lt;<a class="email" href="mailto:shlomif@cpan.org">shlomif@cpan.org</a>&gt;</code><br/>            <code class="uri"><a class="uri" href="https://www.shlomifish.org/">Shlomi Fish’s Homepage</a></code><br/>          </p></div></div></div></div></div><div><p class="copyright">Copyright © 2010 Shlomi Fish</p></div><div><div id="main_legal_notice" class="legalnotice"><p>This document is copyrighted by Shlomi Fish under the Creative Commons Attribution 4.0 Unported License.</p><p>Code excerpts are assumed to be under the https://en.wikipedia.org/wiki/MIT_License .</p></div></div></div><hr/></div><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="bad-elements" class="title">The List of Bad Elements</h4></header><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="no-indentation" class="title">No Indentation</h5></header><p><a class="link" href="http://en.wikipedia.org/wiki/Indent_style">Indentation</a> means that the contents of every block are promoted from their containing environment by using a shift of some space. This makes the code easier to read and follow.</p><p>Code without indentation is harder to read and so should be avoided. <a class="link" href="http://en.wikipedia.org/wiki/Indent_style">The Wikipedia article</a> lists several styles - pick one and follow it.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="no-compiler-warning-flags" class="title">Compiling without warnings flags</h5></header><p>C and C++ Compilers have flags to toggle on warnings such as <code class="code">-Wall</code>, <code class="code">-Wextra</code>, or <code class="code">-Weverything</code>. It is a good idea to specify as many of them as possible when compiling the code and to fix the warnings where appropriate.</p><p>Someone gave me this GCC warnings’ theme:</p><pre class="programlisting bash">
#!/bin/bash
gcc \
    -std=c99 \
    -ansi \
    -pedantic \
    -W \
    -Wall \
    -Wbad-function-cast \
    -Wcast-align \
    -Wcast-qual \
    -Wdeclaration-after-statement \
    -Wfloat-equal \
    -Wformat-nonliteral \
    -Winline \
    -Wmissing-declarations \
    -Wmissing-prototypes \
    -Wnested-externs \
    -Wold-style-definition \
    -Wpointer-arith \
    -Wshadow \
    -Wstrict-prototypes \
    -Wundef \
    -Wunused \
    -Wwrite-strings
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="calling-variables-file" class="title">Calling variables "file"</h5></header><p>Some people call their variables "file". However, file can mean either <a class="link" href="http://en.wikipedia.org/wiki/File_descriptor">file handles</a>, file names, or the contents of the file. As a result, this should be avoided and one can use the abbreviations "fh" for file handle, or "fn" for filenames instead.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="identifiers-without-underscores" class="title">Identifiers without underscores</h5></header><p>Some people name their identifiers as several words all in lowercase and not separated by underscores ("_"). As a result, this makes the code harder to read. So instead of:</p><pre class="programlisting perl">
char * namesofpresidents[NUM_PRESIDENTS];
</pre><p>Say:</p><pre class="programlisting perl">
char * names_of_presidents[NUM_PRESIDENTS];
</pre><p>Or maybe:</p><pre class="programlisting perl">
char * presidents_names[NUM_PRESIDENTS];
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="paragraphs" class="title">Write code in Paragraphs using Empty Lines</h5></header><p>If one of your blocks is long, split it into "code paragraphs", with empty lines between them and with each paragraph doing one thing. Then, it may be a good idea to precede each paragraph with a comment explaining what it does, or to extract it into its own function or method.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="lowercase_modules_and_pkgs" class="title">Don't start Classes with a Lowercase Letter</h5></header><p>In C++, classes should start with an uppercase letter (see <a class="link" href="http://en.wikipedia.org/wiki/Letter_case">the Wikipedia article about letter case</a>) and starting them with a lowercase letter is not recommended.</p><pre class="programlisting cpp"># Bad code


class my_class
{
    .
    .
    .
};
</pre><pre class="programlisting cpp">
class MyClass
{
    .
    .
    .
};
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="non-intrusive-commenting" class="title">Avoid Intrusive Commenting</h5></header><p>Some commenting is too intrusive and interrupts the flow of reading the code. Examples for that are the <code class="code">/////////////</code> or <code class="code">/*****************/</code> hard-rules that some people put in their code, the comments using multiple slashes like <code class="code">///</code>, or excessively long comment block. Please avoid all those.</p><p>Some schools of software engineering argue that if the code's author feels that a comment is needed, it usually indicates that the code is not clear and should be factored better (like extracting a method or a subroutine with a meaningful name.). It probably does not mean that you should avoid writing comments altogether, but excessive commenting could prove as a red flag.</p><p>If you're interested in documenting the public interface of your modules and command-line programs, refer to tools such as <a class="link" href="http://en.wikipedia.org/wiki/Doxygen">Doxygen</a>, which may prove of use.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="accessing_object_slots_directly" class="title">Accessing Object Slots Directly</h5></header><p>It is a bad idea to access the slots/properties/members of an object or a pointer to it directly. E.g:</p><pre class="programlisting cpp"># Bad code


obj-&gt;my_slot = 5;
.
.
.
if (my_obj.my_boolean_slot)
{
}
</pre><p>Instead, create accessors, readers and writers - see <a class="link" href="http://en.wikipedia.org/wiki/Mutator_method">mutator method</a> on the Wikipedia and <a class="link" href="http://perl-begin.org/tutorials/perl-for-newbies/part5/#page--accessors--DIR">the class Accessors</a> section of the Perl for Newbies tutorial.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="caret_and_dollar_sign_in_regexes" class="title">'^' and '$' in Regular Expressions</h5></header><p>Some people use "^" and "$" in regular expressions to mean beginning-of-the-string or end-of-the-string. However, they can mean beginning-of-a-line and end-of-a-line respectively using the <code class="code">/m</code> flag which is confusing. It's a good idea to use <code class="code">\A</code> for start-of-string and <code class="code">\z</code> for end-of-string always (assuming they are supported by the regex syntax), and to specify the <code class="code">/m</code> flag if one needs to use "^" and "$" for start/end of a line.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="magic_numbers" class="title">Magic Numbers</h5></header><p>Your code should not include <a class="link" href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants">unnamed numerical constants also known as "magic numbers" or "magic constants"</a>. For example, there is one in this code to shuffle a deck of cards:</p><pre class="programlisting c"># Bad code


for (int i = 0; i &lt; 52; i++)
{
    const int j = i + rand() % (52-i);
    swap(cards[i], cards[j]);
}
</pre><p>This code is bad because the meaning of 52 is not explained and it is arbitrary. A better code would be:</p><pre class="programlisting c">
const int deck_size = 52;

for (int i = 0; i &lt; deck_size; i++)
{
    int j = i + rand() % (deck_size - i);
    swap(cards[i], cards[j]);
}
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="mixing_tabs_and_spaces" class="title">Mixing Tabs and Spaces</h5></header><p>Some improperly configured text editors may be used to write code that, while indented well at a certain tab size looks terrible on other tab sizes, due to a mixture of tabs and spaces. So either use tabs for indentation or make sure your tab key expands to a constant number of spaces. You may also wish to make use of auto-formatters like <a class="link" href="http://en.wikipedia.org/wiki/Indent_%28Unix%29">GNU indent</a> to properly format your code.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="several_synchronised_arrays" class="title">Several synchronised arrays.</h5></header><p>Related to “varvarname” is the desire of some beginners to use several different arrays with synchronised content, so the same index at every array will contain a different piece of data for the same record:</p><pre class="programlisting c"># Bad code


char * names[ITEMS_COUNT];
char * addresses[ITEMS_COUNT];
int ages[ITEMS_COUNT];
char * phone_numbers[ITEMS_COUNT];

.
.
.

names[num] = strdup("Isaac Newton");
addresses[num] = strdup("10 Downing St.");
ages[num] = 25;
phone_numbers[num] = strdup("123456789");
</pre><p>These arrays will become hard to synchronise, and this is error prone. A better idea would be to use an array (or a different data structure) of structs, classes, or pointers to them:</p><pre class="programlisting c">

Person * people[ITEMS_COUNT];

num = 0;
people[num++] = create_person(
    "Isaac Newton",
    "10 Downing St.",
    25,
    "123456789"
);
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="modifying_iterated_data_structures" class="title">Modifying data structures while iterating through them.</h5></header><p>Some people ask about how to add or remove elements to an existing array or a different container when iterating over them using loops. The answer to that is that it likely won't be handled too well, and it expects that during loops the keys of a data structure will remain constant.</p><p>The best way to achieve something similar is to populate a new container during the loop. So do that instead.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="code_in_foreign_lang" class="title">Comments and Identifiers in a Foreign Language</h5></header><p>Apparently, many non-native English speakers write code with comments and even identifiers in their native language. The problem with this is that programmers who do not speak that language will have a hard time understanding what is going on here, especially after the writers of the foreign language code post it in to an Internet forum in order to get help with it.</p><p>Consider what Eric Raymond wrote in <a class="link" href="http://www.catb.org/~esr/faqs/hacker-howto.html#skills4">his "How to Become a Hacker" document</a> (where hacker is a software enthusiast and not a computer intruder):</p><div class="blockquote"><blockquote class="blockquote"><p>4. If you don't have functional English, learn it.</p><p>As an American and native English-speaker myself, I have previously been reluctant to suggest this, lest it be taken as a sort of cultural imperialism. But several native speakers of other languages have urged me to point out that English is the working language of the hacker culture and the Internet, and that you will need to know it to function in the hacker community.</p><p>Back around 1991 I learned that many hackers who have English as a second language use it in technical discussions even when they share a birth tongue; it was reported to me at the time that English has a richer technical vocabulary than any other language and is therefore simply a better tool for the job. For similar reasons, translations of technical books written in English are often unsatisfactory (when they get done at all).</p><p>Linus Torvalds, a Finn, comments his code in English (it apparently never occurred to him to do otherwise). His fluency in English has been an important factor in his ability to recruit a worldwide community of developers for Linux. It's an example worth following.</p><p>Being a native English-speaker does not guarantee that you have language skills good enough to function as a hacker. If your writing is semi-literate, ungrammatical, and riddled with misspellings, many hackers (including myself) will tend to ignore you. While sloppy writing does not invariably mean sloppy thinking, we've generally found the correlation to be strong — and we have no use for sloppy thinkers. If you can't yet write competently, learn to.</p></blockquote></div><p>So if you're posting code for public scrutiny, make sure it is written with English identifiers and comments.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="using-namespace-std" class="title">“using namespace std;”</h5></header><p>One can often see C++ code with <code class="code">using namespace std;</code> on top, but that is a bad idea. The C++ standard requires that the “std” namespace contain certain symbols, but it doesn't prevent it from containing <span class="bold"><strong>other</strong></span> symbols (presumably, implementation details of the standard library). If you use <code class="code">using namespace std;</code>, you never know what else you might also be bringing into the global namespace.</p><p>One possible alternative is to selectively do <code class="code">using std::cout;</code>, <code class="code">using std::string;</code> and so forth, for each symbol that you wish to use.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="law_of_demeter" class="title">The Law of Demeter</h5></header><p>See the <a class="link" href="http://en.wikipedia.org/wiki/Law_of_Demeter">Wikipedia article about “The Law of Demeter”</a> for more information. Namely, doing many nested method calls like <code class="code">obj-&gt;get_employee('sophie')-&gt;get_address()-&gt;get_street()</code> is not advisable, and should be avoided.</p><p>A better option would be to provide methods in the containing objects to access those methods of their contained objects. And an even better way would be to structure the code so that each object handles its own domain.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="delegating_parameter_passing" class="title">Passing parameters in delegation</h5></header><p>Sometimes we encounter a case where subroutines each pass the same parameter to one another in delegation, just because the innermost subroutines in the call-stack need it.</p><p>To avoid it, create a class, and declare methods that operate on the fields of the class, where you can assign the delegated arguments.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="duplicate_code" class="title">Duplicate Code</h5></header><p>As noted in <a class="link" href="http://www.shlomifish.org/philosophy/books-recommends/#refactoring">Martin Fowler's "Refactoring"</a> book (but held as a fact for a long time beforehand), <a class="link" href="http://en.wikipedia.org/wiki/Duplicate_code">duplicate code</a> is a code smell, and should be avoided. The solution is to extract duplicate functionality into subroutines, methods and classes.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="long_functions" class="title">Long Functions and Methods</h5></header><p>Another common code smell is <a class="link" href="http://c2.com/cgi/wiki?LongMethodSmell">long subroutines and methods</a>. The solution to these is to extract several shorter methods out, with meaningful names.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="ternary_operator_instead_of_if_else" class="title">Using the ternary operator for side-effects instead of if/else</h5></header><p>People who wish to use the ternary inline- conditional operator (<code class="code">? :</code>) for choosing to execute between two different statements with side-effects instead of using <code class="code">if</code> and <code class="code">else</code>. For example:</p><pre class="programlisting cpp"># Bad code


cond_var ? (hash["if_true"] += "Cond var is true")
          : (hash["if_false"] += "Cond var is false")
</pre><p>(This is assuming the ternary operator was indeed written correctly, which is not always the case).</p><p>However, the ternary operator is meant to be an expression that is a choice between two values and should not be used for its side-effects. To do the latter, just use <code class="code">if</code> and <code class="code">else</code>:</p><pre class="programlisting cpp">
if (cond_var)
{
    hash["if_true"] += "Cond var is true";
}
else
{
    hash["if_false"] += "Cond var is false";
}
</pre><p>This is safer, and better conveys one’s intentions.</p><p>For more information, refer to <a class="link" href="http://www.nntp.perl.org/group/perl.beginners/2012/04/msg120480.html">a relevant thread on the Perl beginners mailing list</a> (just make sure you read it in its entirety).</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="global_vars_iface" class="title">Using Global Variables as an Interface to the Module</h5></header><p>While it is possible to a large extent, one should generally not use global variables as an interface to a module, and should prefer having a procedural or an object oriented interface instead.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="global_or_function_static_vars" class="title">Using Global Variables or Function-"static" Variables</h5></header><p>It is a good idea to avoid global variables or static variables inside functions; at least those that are not constant. This is because using such variables interferes with <a class="link" href="http://en.wikipedia.org/wiki/Thread_%28computing%29#Multithreading">multithreading</a>, re-entrancy and prohibits instantiation. If you need to use several common variables, then define an environment struct or class and pass a pointer to it to each of the functions.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="declaring_all_vars_at_top" class="title">Declaring all variables at the top (Pre-declarations)</h5></header><p>If you are writing C++ or C starting from the C99 standard onwards (which isn’t supported by some non-standard-compliant compilers such as Microsoft’s Visual C++), then you should avoid declaring all the variables at the top of the program or the subroutine (a practice that is referred to as “pre-declaration”) and instead declare them when they are needed and with an immediate initialisation/definition using the <code class="code">=</code> operator.</p><p>E.g:</p><pre class="programlisting c"># Bad code


int main(int argc, char * argv[])
{
    const char * name;
    int i;

    name = "Rupert";
    for (i=1 ; i&lt;=10 ; i++)
    {
        printf ("Hello %s - No. %d!\n", name, i);
    }

    return 0;
}
</pre><p>Should be replaced with:</p><pre class="programlisting c">
int main(int argc, char * argv[])
{
    const char * const name = "Rupert";
    for (int i=1 ; i&lt;=10 ; i++)
    {
        printf ("Hello %s - No. %d!\n", name, i);
    }

    return 0;
}
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="trailing-whitespace" class="title">Trailing Whitespace</h5></header><p>With many editors, it can be common to write new code or modify existing one, so that some lines will contain trailing whitespace, such as spaces (ASCII 32 or 0x20) or tabs characters. These trailing spaces normally do not cause much harm, but they are not needed, harm the code’s consistency, may undermine analysis by patching/diffing and version control tools. Furthermore, they usually can be eliminated easily without harm.</p><p>Here is an example of having trailing whitespace demonstrated using the <code class="code">--show-ends</code> flag of the GNU <a class="link" href="https://en.wikipedia.org/wiki/Cat_%28Unix%29">cat command</a>:</p><pre class="programlisting text">
&gt; cat --show-ends toss-coins.pl
#!/usr/bin/perl$
$
use strict;$
use warnings;$
$
my @sides = (0,0);$
$
my ($seed, $num_coins) = @ARGV;$
$
srand($seed);  $
$
for my $idx (1 .. $num_coins)$
{$
    $sides[int(rand(2))]++;$
    $
    print "Coin No. $idx\n";$
}$
$
print "You flipped $sides[0] heads and $sides[1] tails.\n";$
&gt;
</pre><p>While you should not feel bad about having trailing space, it is a good idea to sometimes search for them using a command such as <code class="code">ack '[ \t]+$'</code> (in version 1.x it should be <code class="code">ack -a '[ \t]+$'</code>, see <a class="link" href="http://beyondgrep.com/">ack</a>), and get rid of them.</p><p>Some editors also allow you to highlight trailing whitespace when present. See for example:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><a class="link" href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">Highlight unwanted spaces in Vim</a>. Also see <a class="link" href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">this post</a>.</p></li><li class="listitem"><p><a class="link" href="http://emacswiki.org/emacs/ShowWhiteSpace">EmacsWiki: Show White Space</a>.</p></li></ul></div><p>Finally, one can check and report trailing whitespace using the following CPAN modules:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><a class="link" href="http://metacpan.org/module/Test::EOL">Test::EOL</a>.</p></li><li class="listitem"><p><a class="link" href="http://metacpan.org/module/Test::TrailingSpace">Test::TrailingSpace</a>.</p></li></ul></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="code_and_markup_injection" class="title">Code and Markup Injection</h5></header><p>Care must be taken when constructing statements that are passed to an interpreter, when putting arbitrary strings inside (using substring expansion or other methods). This is because if the strings are subject to input from the outside world (including the users), then one can use specially crafted strings for executing arbitrary commands and exploiting the system.</p><p>An example of this is outputting HTML using <code class="code">fprintf(file_handle, "&lt;p&gt;%s&lt;/p&gt;\n", paragraph_text);</code> or <code class="code">my_file_fh &lt;&lt; "&lt;p&gt;" &lt;&lt; paragraph_text &lt;&lt; "&lt;/p&gt;" &lt;&lt; std::endl;</code> which may allow inserting arbitrary, malicious, markup inside <code class="code">paragraph_text</code>, which may include malicious JavaScript, that can steal passwords or alter the page’s contents.</p><p>For more information, see:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem"><p><a class="link" href="http://perl-begin.org/topics/security/code-markup-injection/">“Code/Markup Injection and Its Prevention”</a> resource on the Perl beginners site.</p></li><li class="listitem"><p>Wikipedia articles about <a class="link" href="http://en.wikipedia.org/wiki/SQL_injection">SQL injection</a> and <a class="link" href="http://en.wikipedia.org/wiki/Cross-site_scripting">Cross-site scripting</a>.</p></li><li class="listitem"><p>The site <a class="link" href="http://bobby-tables.com/">Bobby Tables</a> about SQL injections.</p></li></ol></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="using_undeclared_symbols" class="title">Using Undeclared Symbols</h5></header><p>Some C or C++ compilers allow one to use functions or variables that have not been declared, while automatically inferring their types to be “int” or whatever. However, for good measure, all variables and functions should be declared with a proper type because they are often not the same as the compiler's guess. One can configure GCC and similar compilers to emit an error on such cases using the <code class="code">-Werror=implicit-function-declaration</code> flag, which is recommended to add to one's build system.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="decls_not_in_common_headers" class="title">Declarations not in common headers</h5></header><p>When declaring external functions, variables, classes, etc. make sure to put them in a common header file, which will also be included by the .c or .cpp file actually defining the common resource. This way if their type is changed, you will get a compiler error in the module that defines it, and there will be more certainty that there isn’t a type mismatch.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="headers_without_include_guards" class="title">Headers without #include guards or #pragma once</h5></header><p>You should add <a class="link" href="http://en.wikipedia.org/wiki/Include_guard">#include guards</a>, or the less standard but widely supported <a class="link" href="http://en.wikipedia.org/wiki/Pragma_once">#pragma once</a> into header files (“*.h” or “*.hpp” or whatever) to prevent them from being included times and again by other “#include” directives. Otherwise, it may result in compiler warnings or errors.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="long_lines" class="title">Overly Long Lines in the Source Code</h5></header><p>It is a good idea to avoid overly long lines in the source code, because they need to be scrolled to read, and may not fit within the margins of your co-developers’ text editors. If the lines are too long, you should break them or reformat them (for example, by adding a newline before or after an operator), and by breaking long string constants into several lines using the string concatenation operator - <code class="code">.</code>.</p><p>Many coding standards require lines to fit within 80 characters or 78 characters or so, and you should standardise on a similar limit for your own code.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="dot_asterisk" class="title">Regular Expressions starting or ending with “.*”</h5></header><p>It is not necessary to put <code class="code">.*</code> or <code class="code">.*?</code> into the beginning or end of regular expressions to match something anywhere inside the string. So for example <code class="code">regcomp(&amp;regex, ".*ab+c")</code> can be replaced with the simpler: <code class="code">regcomp(&amp;regex, "ab+c")</code>. If you wish to match and extract the prefix, you should say <code class="code">(.*?)</code> or <code class="code">(.*)</code>.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="populating_array_with_same_reference" class="title">Populating a Data Structure with Multiple Copies of the Same Pointer or Reference</h5></header><p>You can sometimes see code like that:</p><pre class="programlisting c"># Bad code


int * my_array[NUM];

int * sub_array = malloc(sizeof(sub_array[0]) * SUB_NUM);
if (! sub_array)
{
    /* Handle out-of-memory */
}
for (int i = 0 ; i &lt; NUM ; i++)
{
    populate_sub_array(i, sub_array);
    my_array[i] = sub_array;
}
</pre><p>The problem with code like this is that the same physical memory location is being used in all places in the array, and so they will always be synchronised to the same contents.</p><p>As a result, the code excerpts should be written as such instead:</p><pre class="programlisting perl">
int * my_array[NUM];

for (int i = 0 ; i &lt; NUM ; i++)
{
    int * sub_array = malloc(sizeof(sub_array[0]) * SUB_NUM);
    if (! sub_array)
    {
        /* Handle out-of-memory */
    }
    populate_sub_array(i, sub_array);
    my_array[i] = sub_array;
}
my @array_of_arrays = map { [] } (1 .. $num_rows);
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="one_var_for_two_purposes" class="title">Using One Variable for Two (or More) Different Purposes</h5></header><p>Within the scope of its declaration, a variable should serve one purpose, and serve it well. One should not re-use a variable for a completely different purpose later on in the scope.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="premature_optimization" class="title">Premature Optimisation</h5></header><p>On various online forums, we are often getting asked questions like: “What is the speediest way to do task X?” or “Which of these pieces of code will run faster?”. The answer is that in this day and age of extremely fast computers, you should optimise for clarity and modularity first, and worry about speed when and if you find it becomes a problem. Professor Don Knuth had this to say about it:</p><div class="blockquote"><blockquote class="blockquote"><p>The improvement in speed from Example 2 to Example 2a is only about 12%, and many people would pronounce that insignificant. The conventional wisdom shared by many of today's software engineers calls for ignoring efficiency in the small; but I believe this is simply an overreaction to the abuses they see being practiced by penny-wise-and-pound-foolish programmers, who can't debug or maintain their "optimized" programs. In established engineering disciplines a 12% improvement, easily obtained, is never considered marginal; and I believe the same viewpoint should prevail in software engineering. Of course I wouldn't bother making such optimizations on a one-shot job, but when it's a question of preparing quality programs, I don't want to restrict myself to tools that deny me such efficiencies.</p><p>There is no doubt that the grail of efficiency leads to abuse. Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.</p></blockquote></div><p>(Knuth reportedly attributed the exact quote it to C.A.R. Hoare).</p><p>While you should be conscious of efficiency, and the performance sanity of your code and algorithms when you write programs, excessive and premature micro-optimisations are probably not going to yield a major performance difference.</p><p>If you do find that your program runs too slowly, refer to our <a class="link" href="http://c-begin.wikia.com/wiki/Profiling_and_Optimizing">resources about Optimising and Profiling code</a>.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="version_control" class="title">Not Using Version Control</h5></header><p>For everything except for short throwaway scripts, or otherwise incredibly short programs, there is no good excuse, not to use a version control system (a.k.a: "revision control systems", "source control systems", or more in general as part of "software configuration management"). This is especially true nowadays given the availability of several powerful, easy to use, open-source (and as a result free-of-charge), and cross-platform, version control systems, that you should have not a lot of problems to deploy, learn and use.</p><p>For more information and the motivation behind using version control systems, see <a class="link" href="http://perl-begin.org/tutorials/perl-for-newbies/part5/#page--version-control--DIR">the relevant section out of the fifth part of “Perl for Perl Newbies”</a> for more discussion about the motivation behind that, some links and a demonstration.</p><p>Some links for further discussion:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><a class="link" href="http://better-scm.shlomifish.org/">The Better SCM Site</a></p></li><li class="listitem"><p><a class="link" href="http://producingoss.com/en/vc-systems.html">The Free Version Control Systems Appendix of <span class="emphasis"><em>Producing Open Source Software</em></span></a>.</p></li><li class="listitem"><p>The Wikipedia <a class="link" href="http://en.wikipedia.org/wiki/List_of_revision_control_software">List of revision control software</a>.</p></li><li class="listitem"><p><a class="link" href="http://perlhacks.com/2012/03/you-must-hate-version-control-systems/">“You Must Hate Version Control Systems”</a> - a discussion on Dave Cross’ blog about best practices in the software development industry.</p></li></ul></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="automated_tests" class="title">Writing Automated Tests</h5></header><p>Automated tests help verify that the code is working correctly, that bugs are not introduced due to refactoring or the addition of new feature, and also provide specifications and interface documentation to the code. As a result, automated tests have been considered a good practise for a long time.</p><p>For more information about how to write automated tests, see <a class="link" href="http://c-begin.wikia.com/wiki/Testing_Tools">our page</a> about quality assurance in C.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="parsing_using_regex" class="title">Parsing XML/HTML/JSON/CSV/etc. without a tried-and-tested parser</h5></header><p>You should not try to parse HTML, XML, JSON, CSV, and other complex grammars using regular expressions, or worse - using manual character/string tokenisation. Instead, use a tried and tested parsing library, which you should be able to find using a web search.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="generating_non_valid_markup" class="title">Generating invalid Markup (of HTML/etc.)</h5></header><p>You should make sure that the HTML markup you generate is <a class="link" href="http://en.wikipedia.org/wiki/XHTML#Valid_XHTML_documents">valid HTML</a> and that it validates as XHTML 1.0, HTML 4.01, HTML 5.0, or a different modern standard. For more information, see <a class="link" href="http://www.shlomifish.org/lecture/LAMP/slides/compatibility/">the “Designing for Compatibility” section</a> in a previous talk.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="capturing_instead_of_clustering_in_regexes" class="title">Capturing Instead of Clustering in Regular Expressions</h5></header><p>If you want to group a certain sub-expression in a <a class="link" href="http://perl-begin.org/topics/regular-expressions/">regular expression</a>, without the need to capture it (into the <code class="code">$1</code>, <code class="code">$2</code>, <code class="code">$3</code>, etc. variables and related capture variables), then you should cluster them using <code class="code">(?: … )</code> instead of capturing them using a plain <code class="code">( … )</code>, or alternatively not grouping them at all if it's needed. That is because using a cluster is faster and cleaner and better conveys your intentions than using a capture.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="buffer_overflows" class="title">Buffer Overflows</h5></header><p>Buffer overflows involve reading or writing after one end of the buffer and can lead to exploitation, or crashes. More information can be found in <a class="link" href="http://en.wikipedia.org/wiki/Buffer_overflow">the Wikipedia article</a>.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="format_string_vulnerabilities" class="title">Format String Vulnerabilities (printf/etc.)</h5></header><p>When passing a non-literal-constant string as the first parameter to “printf()”/sprintf()” and friends, one runs the risk of <a class="link" href="http://en.wikipedia.org/wiki/Uncontrolled_format_string">format string vulnerabilities</a> (more information in the link). As a result, it is important to always use a literal constant string to format the string. E.g:</p><pre class="programlisting c"># Bad code


fgets(str,sizeof(str), stdin);
str[sizeof(str)-1] = '\0';
printf(str);
</pre><p>should be replaced with:</p><pre class="programlisting c">
fgets(str,sizeof(str), stdin);
str[sizeof(str)-1] = '\0';
printf("%s", str);
</pre><p>One can also use the <a class="link" href="http://stackoverflow.com/questions/9707569/c-array-warning-format-not-a-string-literal">relevant warning flags</a> of GCC and compatible compilers to warn and possibly generate an error for that.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="callbacks_that_dont_accept_a_context_variable" class="title">Callbacks that do not accept a “void *” context variable</h5></header><p>When writing C (and sometimes C++) code, make sure that whenever you accept a function pointer as a callback, that it also accepts a <code class="code">void *</code> context variable, which would be passed to the function as well. These variables are sometimes called “batons” because they are passed around. Without this convention, it will be harder to instantiate routines based on this interface, and multi-threading will be harder without the use of thread-local-storage.</p><p>So don't do that:</p><pre class="programlisting c"># Bad code


void my_sort(my_type * const array, const size_t count,
    int (*compare)(my_type *, my_type *));
</pre><p>And instead do that:</p><pre class="programlisting c">
void my_sort(my_type * const array, const size_t count,
    int (*compare)(my_type *, my_type *, void *), void * const context);
</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="not_using_a_proper_build_system" class="title">Not Using a Proper Build System</h5></header><p>It is a very good idea for C and C++ code to use a good build and configuration system. There’s <a class="link" href="http://www.shlomifish.org/open-source/resources/software-tools/">a page listing some prominent alternatives</a>. For simple setups, a make file may be suitable, but more complex tasks require a configuration and build system such as <a class="link" href="http://en.wikipedia.org/wiki/CMake">CMake</a>.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="not_using_a_bug_tracker" class="title">Not Using a Bug Tracker/Issue Tracker</h5></header><p>It is important to use a <a class="link" href="http://en.wikipedia.org/wiki/Bug_tracking_system">bug tracking</a> system to maintain a list of bugs and issues that need to be fixed in your code, and of features that you'd like to work on. Sometimes, a simple file kept inside the version control system would be enough, but at other times, you should opt for a web-based bug tracker.</p><p>For more information, see:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><a class="link" href="http://www.joelonsoftware.com/articles/fog0000000029.html">Joel on Software article about “Painless Bug Tracking”</a></p></li><li class="listitem"><p><a class="link" href="http://www.shlomifish.org/open-source/resources/software-tools/#bug_tracking">“Bug Trackers” list</a> on Shlomi Fish’s “Software Construction and Management Tools” page.</p></li><li class="listitem"><p><a class="link" href="http://www.thegeekstuff.com/2010/08/bug-tracking-system/">“Top 10 Open Source Bug Tracking Systems”</a></p></li></ul></div></section></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="sources_of_advice" class="title">Sources of This Advice</h4></header><p>This is a short list of the sources from which this advice was taken which also contains material for further reading:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem"><p>A large part of this document is derived from <a class="link" href="http://perl-begin.org/tutorials/bad-elements/">a similar document</a> written earlier for the Perl programming language.</p></li><li class="listitem"><p><a class="link" href="http://perl-begin.org/books/advanced/#pbp">The Book "Perl Best Practices"</a> by Damian Conway - contains a lot of good advice and food for thought, but sometimes should be deviated from. Also see the <a class="link" href="https://www.socialtext.net/perl5/index.cgi?pbp_module_recommendation_commentary">"PBP Module Recommendation Commentary"</a> on the Perl 5 Wiki.</p></li><li class="listitem"><p><a class="link" href="https://www.socialtext.net/perl5/index.cgi?ancient_perl">"Ancient Perl"</a> on the Perl 5 Wiki.</p></li><li class="listitem"><p><a class="link" href="http://modernperlbooks.com/">chromatic's "Modern Perl" Book and Blog</a></p></li><li class="listitem"><p>The book <a class="link" href="http://www.refactoring.com/"><span class="emphasis"><em>Refactoring</em></span> by Martin Fowler</a> - not particularly about Perl, but still useful.</p></li><li class="listitem"><p>The book <a class="link" href="http://pragprog.com/book/tpp/the-pragmatic-programmer"><span class="emphasis"><em>The Pragmatic Programmer: From Journeyman to Master</em></span></a> - also not particularly about Perl, and I found it somewhat disappointing, but it is an informative book.</p></li><li class="listitem"><p>The list <a class="link" href="https://www.theopensourceway.org/wiki/How_to_tell_if_a_FLOSS_project_is_doomed_to_FAIL">“How to tell if a FLOSS project is doomed to FAIL”</a>.</p></li><li class="listitem"><p>Advice given by people on <a class="link" href="http://perl-begin.org/irc/#freenode">Freenode's #perl channel</a>, on the Perl Beginners mailing list, and on other Perl forums.</p></li><li class="listitem"><p>Advice given by people on Freenode’s ##programming channel and on other forums.</p></li></ol></div></section></section><footer/><section class="docbook_formats h2"><h2 id="formats">Formats</h2><ul><li><p><a href="c-and-cpp-elements-to-avoid/">Read Online</a> - one page per section.</p></li><li><p><a href="c-and-cpp-elements-to-avoid.epub">EPUB</a>.</p></li><li><p><a href="c-and-cpp-elements-to-avoid.xml">Original DocBook 5/XML</a></p></li><li><p><a href="c-and-cpp-elements-to-avoid.pdf">PDF (Acrobat Reader)</a></p></li></ul></section><section class="h2"><header><h2 id="vcs">Version Control Repository</h2></header><p>This document is maintained in a <a href="https://github.com/shlomif/c-begin"><b>GitHub Repository</b></a> which one can clone, fork, send pull-requests, and file issues for. Note that all contributions are assumed to be licensed under the <a href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0-and-above (CC-by) licence</a>. Enjoy!</p></section><section class="h2"><header><h2 id="coverage">Coverage</h2></header><p><b>TODO:</b> fill in.</p></section></div><script>shlomif_load_nav("lecture/C-and-CPP/bad-elements/");</script><p class="share"><a href="http://www.addtoany.com/share_save?linkurl=https%3A%2F%2Fwww.shlomifish.org%2Flecture%2FC-and-CPP%2Fbad-elements%2F&amp;linkname="><img src="../../../images/share_save_171_16.png" width="171" height="16" class="bless" alt="Share/Bookmark"/></a><br/></p></main><nav class="navbar" id="navbar"><div class="center"><a href="../../../" title="Shlomi Fish’s Homepage"><img src="../../../images/evilphish-svg.min.svg" alt="EvilPHish by Illiad" class="highlight" style="border:0;margin-bottom:.5em"/></a></div><ul class="nav_links"><li><a href="../../cat/programming-languages/" title="Previous Page (Alt+P)" accesskey="p"><img src="../../../images/arrow-2-left.png" alt="Previous Page" class="bless"/></a></li><li><a href="../../cat/programming-languages/" title="Up in the Site (Alt+U)" accesskey="u"><img src="../../../images/arrow-2-up.png" alt="Up in the Site" class="bless"/></a></li><li><a href="../../Lambda-Calculus/" title="Next Page (Alt+N)" accesskey="n"><img src="../../../images/arrow-2-right.png" alt="Next Page" class="bless"/></a></li></ul><div id="nav_menu"><ul><li><a href="../../../">Shlomi Fish’s Homepage</a></li><li class="open"><a href="../../../me/">About Myself</a><br/><ul><li><a href="../../../personal.html" title="A Short Biography of Myself">Bio</a><br/><ul><li><a href="../../../me/intros/" title="Introductions of Me to Various Forums">Intros</a><br/><ul><li><a href="../../../me/intros/writers/" title="My Intro to the MIT Writers Mailing List">MIT Writers</a></li></ul></li></ul></li><li><a href="../../../me/contact-me/" title="How to Contact Me">Contact Me</a></li><li><a href="../../../me/rindolf/" title="The history and etymology of “Rindolf”, Shlomi Fish’s Nickname">“Rindolf” - my nickname</a><br/><ul><li><a href="../../../me/rindolfism/" title="Shlomi Fish’s Personal, dynamic, open / free / geeky / share / hacky philosophy">“Rindolfism” - my personal, dynamic, philosophy</a></li></ul></li><li><a href="../../../me/resumes/">My Résumés</a><br/><ul><li><a href="../../../me/resumes/Shlomi-Fish-Resume-as-Software-Dev.html">Résumé as a Software Dev</a></li><li><a href="../../../SFresume.html">English Résumé</a></li><li><a href="../../../SFresume_detailed.html">Detailed English Résumé</a></li><li><a href="../../../me/resumes/Shlomi-Fish-Resume-as-Writer-Entertainer.html">Résumé as a Writer and Entertainer</a></li></ul></li><li><a href="../../../me/business-card/">My Business Card</a></li><li><a href="../../../me/personal-ad.html" title="My Personal Ad: what I’m looking for in a prospective girlfriend and what I can add to the relationship.">Personal Ad</a></li><li><a href="../../../me/blogs/" title="Links to my online journals.">My Weblogs</a></li><li><a href="../../../me/interviews/" title="Interviews that were conducted with me">Interviews</a><br/><ul><li><a href="../../../me/interviews/reddit-AMA/">Reddit “Ask Me Anything”</a></li></ul></li><li><a href="../../../me/relicensing-my-entire-portfolio-under-cc-by/" title="Offer to relicense my whole body of creative works under CC-by if I get enough money">Relicensing my Creative Works Portfolio</a></li></ul></li><li><a href="../../../humour/" title="My Humorous Creations">Humour</a><br/><ul><li><a href="../../../humour/stories/" title="Large-Scale Stories I Wrote">Stories</a><br/><ul><li><a href="../../../humour/stories/usable/">Usable</a><br/><ul><li><a href="../../../humour/TheEnemy/" title="The Enemy and How I Helped to Fight It">The Enemy</a></li><li><a href="../../../humour/TOneW-the-Fountainhead/" title="The One with the Fountainhead">TOW The Fountainhead</a></li><li><a href="../../../humour/human-hacking/" title="The Human Hacking Field Guide">Human Hacking Field Guide</a></li><li><a href="../../../humour/Star-Trek/We-the-Living-Dead/">We, the Living Dead</a></li><li><a href="../../../humour/humanity/" title="Parody of Humanity and Modern Life in Particular">Humanity - The Movie</a></li></ul></li></ul></li><li><a href="../../../humour/aphorisms/">Aphorisms and Quotes</a><br/><ul><li><a href="../../../humour.html" title="Collection of Funny or Insightful Quotes or Aphorisms I came up with">My Quotes Collection</a></li><li><a href="../../../humour/fortunes/" title="Collection of Files for Input to the UNIX ‘fortune’ Program">Fortune Cookies Collection</a></li><li><a href="../../../humour/bits/facts/" title="“Facts” about Chuck Norris and other things">Factoids</a></li></ul></li><li><a href="../../../humour/bits/" title="Small Scale Funny Works of Mine">Small Scale</a></li><li><a href="../../../humour/by-others/" title="Humorous Works by Other People">By Others</a></li></ul></li><li><a href="../../../philosophy/" title="Various Essays and Articles about Technology and Philosophy in General">Essays</a><br/><ul><li><a href="../../../philosophy/philosophy/">General Philosophy</a></li><li><a href="../../../philosophy/computers/" title="Computing-related Essays and Articles">Computing</a><br/><ul><li><a href="../../../philosophy/computers/open-source/" title="Essays about Free and Open Source Software (FOSS)">Open Source</a></li><li><a href="../../../philosophy/computers/software-management/" title="Essays about how to manage software workplaces, projects and teams">Software Management</a></li><li><a href="../../../philosophy/computers/perl/" title="Essays about the Perl programming language">Perl</a></li><li><a href="../../../philosophy/computers/web/" title="About the World-Wide-Web">The Web (WWW)</a></li><li><a href="../../../philosophy/computers/education/" title="About Computer and Technical Education">Education</a></li></ul></li><li><a href="../../../philosophy/politics/" title="Essays about Politics and Philosophical Politics">Political Essays</a></li><li><a href="../../../philosophy/Index/" title="Index to Essays and Articles I wrote.">Index to Essays</a></li></ul></li><li><a href="../../../puzzles/" title="Puzzles, Riddles and Brain-teasers">Puzzles</a><br/><ul><li><a href="../../../MathVentures/" title="Mathematical Riddles and their Solutions">Math-Ventures</a></li><li><a href="../../../puzzles/logic/">Logic Puzzles</a></li></ul></li><li><a href="../../../art/" title="Computer art I created while explaining how.">Art</a><br/><ul><li><a href="../../../art/original-graphics/">Original Graphics</a></li><li><a href="../../../art/by-others/">By others</a></li><li><a href="../../../art/recommendations/">Recommendations</a><br/><ul><li><a href="../../../art/recommendations/music/">Music</a><br/><ul><li><a href="../../../art/recommendations/music/online-artists/" title="Some of my favourite online musicians">Online Artists</a></li></ul></li></ul></li></ul></li><li><a href="../../../open-source/" title="Pages related to Software (mostly Open-Source)">Software</a><br/><ul><li><a href="../../../open-source/projects/">Projects</a><br/><ul><li><a href="../../../open-source/projects/freecell-solver/">Freecell Solver</a></li><li><a href="../../../open-source/projects/pysol/" title="A suite of Solitaire games">PySol FC</a></li></ul></li><li><a href="../../../open-source/resources/" title="Various Software Resources Pages">Resources Pages</a><br/><ul><li><a href="../../../open-source/resources/sw-lists/">Curated Lists</a></li><li><a href="../../../open-source/favourite/" title="Favourite Open-Source Software">Favourite OSS</a></li><li><a href="../../../open-source/interviews/" title="Interviews with Open-Source People">Interviews</a></li><li><a href="../../../open-source/resources/israel/" title="Israel-Related FOSS Resources">Israel-Related</a></li></ul></li><li><a href="../../../open-source/contributions/" title="Contributions to Other Projects, that I did not Start">Contributions</a></li></ul></li><li class="open"><a href="../../" title="Presentations I Wrote (Mostly Technical)">Lectures</a><br/><ul><li><a href="../../Perl/Newbies/">Perl for Newbies</a></li><li><a href="../../LAMP/" title="Web Publishing using Linux, Apache, MySQL, and Perl/PHP/Python (or equivalents)">Web Publishing using LAMP</a></li><li><a href="../../CatB/">The Cathedral and the Bazaar</a></li><li><a href="../../cat/programming-languages/" title="Presentations about Programming Languages">Prog. Languages</a></li><li><a href="../../cat/various-tools/" title="Presentations about Various Tools">Various Tools</a></li><li><a href="../../W2L/" title="Presentations for the Israeli series for Linux Newcomers">Welcome to Linux</a></li><li><a href="../../cat/projects/" title="Presentations about my Open Source Projects">About My Projects</a></li><li><a href="../../cat/lightning-talks/" title="Short (5-15 minutes) Presentations">Lightning Talks</a></li></ul></li><li class="open"><a href="../../../work/" title="Work-Related Pages">Work</a><br/><ul><li><a href="../../../work/hire-me/" title="I’m a Geek for Hire">Hire Me!</a><br/><ul><li><a href="../../../work/private-lessons/" title="I’m Giving Private Lessons for High School Subjects and Computing.">Private Lessons</a></li></ul></li></ul></li></ul><ul><li><a href="../../../links.html" title="An incomplete list of links I find cool and/or useful.">Cool Links</a></li><li><a href="../../../recommendations/" title="Recommendations of Books, Music Albums, Films, etc.">Recommendations</a></li></ul><ul><li class="open"><a href="../../../site-map/" title="A site map showing all of the main pages.">Site Map</a><br/><ul><li class="open"><a href="../../../site-map/hebrew/" title="מפת העמודים העבריים באתר">עמודים בעברית</a></li></ul></li></ul><ul><li class="open"><a href="../../../meta/" title="Information about this Site">Meta Info</a><br/><ul><li class="open"><a href="../../../meta/FAQ/" title="Frequently Asked Questions and Answers List (FAQ)">FAQ</a></li><li class="open"><a href="../../../meta/privacy-policy/">Privacy Policy</a></li><li class="open"><a href="../../../meta/site-source/" title="The source code used to generate this site">Site’s Source</a></li><li class="open"><a href="../../../meta/how-to-help/" title="How you can help promote this site">How to Help</a><br/><ul><li class="open"><a href="../../../meta/donate/">Please Donate</a></li></ul></li><li class="open"><a href="../../../meta/hosting/" title="About this site’s hosting provider.">Hosting</a></li><li class="open"><a href="../../../meta/old-site-snapshots/" title="The site as it looked like many years ago.">Old Site Snapshots (Nostalgia)</a></li></ul></li></ul></div><div class="about_author"><div class="center"><img src="../../../images/shlomif-cutethulhu-small.webp" alt="Photo of Shlomi Fish" title="Head shot of Shlomi Fish"/></div><p><a href="../../../#about_site">Shlomi Fish</a> (שלומי פיש), also known as <a href="../../../me/rindolf/">“Rindolf”</a>, is an Israeli humorist, writer, and software geek.</p><p>He is passionate about open content, open source, and freedom and openness in general.</p><p class="sep">It is easy to reach Shlomi using a large number of <a href="../../../me/contact-me/">online means</a>, including <a href="mailto:shlomif@shlomifish.org">E-mail</a>.</p></div><h2 id="site-google-search">Google Search</h2><form method="get" action="https://www.google.com/search"><div class="search"><input type="hidden" name="ie" value="UTF-8"/> <input type="hidden" name="oe" value="UTF-8"/> <input type="text" name="q" size="15" maxlength="255"/> <input type="hidden" name="domains" value="www.shlomifish.org"/><br/><input type="radio" name="sitesearch"/> WWW<br/><input type="radio" name="sitesearch" value="www.shlomifish.org" checked="checked"/> shlomifish.org<br/><input type="submit" name="btnG" value="Google Search"/></div></form><h2 id="site-ddg-search">Duck Duck Go Search</h2><div class="search"><!-- DuckDuckGo Search --><object data="https://duckduckgo.com/search.html?width=100&amp;site=shlomifish.org&amp;prefill=SearchDuckDuckGo" type="text/html" style="overflow:hidden;margin:0;padding:0;width:160px;height:40px"></object></div><ul class="relevant_links"><li><a href="http://shlomifishswiki.branchable.com/">Shlomi Fish’s Wiki</a></li></ul><p><a href="https://www.mozilla.org/firefox/new/" class="bless"><img class="bless" alt="Get Firefox!" title="Get Firefox! A safer, faster, better web-browser." src="../../../images/get-firefox.png"/></a></p><p><a href="http://perl-begin.org/" title="The Perl Beginners' Site" class="bless"><img src="../../../images/perl-begin.png" alt="The Perl Beginners' Site" class="bless"/></a></p><p><a href="http://validator.w3.org/check/referer" title="Valid XHTML5!" class="bless"><img class="highlight bless" src="../../../images/xh11-btn.png" alt="Valid XHTML5!"/></a></p><p><a href="http://jigsaw.w3.org/css-validator/" title="Valid CSS!" class="bless"><img class="highlight bless" src="../../../images/css-btn.png" alt="Valid CSS!"/></a></p><h2 id="shlomif_on_the_web">Shlomi Fish elsewhere on the Web</h2><div class="elsew_on_web"><ul><li><p><a href="http://twitter.com/shlomif"><img src="../../../images/twitter-bird-light-bgs-20.png" alt="Twitter Logo"/> Twitter</a></p></li><li><p><a href="https://plus.google.com/+ShlomiFish/posts"><img src="../../../images/google-plus-icon-30x30.png" alt="Google+ Logo"/> Google+</a></p></li><li><p><a href="http://www.facebook.com/shlomi.fish"><img src="../../../images/facebook-icon-30x30.png" alt="Facebook Logo"/> Facebook</a></p></li><li><p><a href="http://unarmed.shlomifish.org/"><i>Unarmed but still Dangerous</i> Blog</a></p></li><li><p><a href="http://www.reddit.com/user/shlomif"><img src="../../../images/Reddit_30x30.png" alt="Reddit Logo"/> Reddit</a></p></li><li><p><a href="http://en.wikipedia.org/wiki/User:Shlomif"><img src="../../../images/wikipedia-logo-20.png" alt="Wikipedia Logo"/> Wikipedia</a></p></li><li><p><a href="http://www.flickr.com/photos/shlomif/"><img src="../../../images/flickr-32x32.png" alt="Flickr Logo"/> Flickr</a></p></li><li><p><a href="http://shlomif.deviantart.com/"><img src="../../../images/deviantart-30x30.png" alt="deviantART Logo"/> deviantART</a></p></li><li><p><a href="http://www.youtube.com/user/ShlomiFish"><img src="../../../images/youtube-30x30.png" alt="YouTube Logo"/> YouTube</a></p></li><li><p><a href="http://github.com/shlomif"><img src="../../../images/github-24-black.png" alt="GitHub Logo"/> GitHub</a></p></li></ul></div></nav><div id="container-footer"></div></div></div><footer id="footer"><hr/><ul class="bt_nav"><li><a href="https://www.patreon.com/shlomif"><img class="patreon" src="../../../images/patreon.svg" alt="Patreon account" title="Support me using Patreon"/></a></li><li><a href="../../../">Home</a></li><li><a href="../../../me/">About</a></li><li><a href="../../../me/contact-me/">Contact Us</a></li><li><a href="../../../meta/privacy-policy/">Privacy Policy</a></li><li><a href="../../../meta/anti-spam-policy/">Anti-Spam Policy</a></li><li><a href="../../../meta/FAQ/" title="Frequently asked questions list">FAQ</a></li><li><a href="../../../me/blogs/">RSS/Atom Feeds</a></li></ul><p>Written, designed, and maintained by Shlomi Fish, <a href="mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>.</p><div id="footer_donate"><p><b>Note:</b> Given that I am under pressure to be less generous, and spend my money on activities that bring me joy, and make me a little poorer financially, I'd appreciate <a href="https://www.shlomifish.org/meta/donate/">donations</a>.</p></div><p>If you like what you see here, or have any comments, suggestions, or corrections, feel free to E-mail me about it. I’d love to hear from you. If you have found what I did helpful or entertaining, please consider <a href="../../../meta/how-to-help/">helping</a>.</p><p>Style and look based on the <a href="http://wordpress.org/extend/themes/smoked">Smoked WordPress Theme</a> by <a href="http://wordpress.org/extend/themes/profile/iconstantin">iconstantin</a>.</p><p><a href="../../../meta/FAQ/#evilphish-emblem">Fish emblem</a> taken from the <a href="http://ars.userfriendly.org/cartoons/?id=20030803">“Anatomy of an EvilPHish”</a> cartoon of <a href="http://www.userfriendly.org/">UserFriendly.org</a>.</p><a href="../../../"><img src="../../../images/bk2hp-v2.min.svg" class="bk2hp" alt="Back to my Homepage"/></a></footer></body></html>