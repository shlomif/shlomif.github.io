<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Why Lisp Has Been Unpopular</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="some_essentials.xhtml" title="Some Spark Essentials"/><link rel="next" href="impl_details.xhtml" title="Some Implementation Details"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">Why Lisp Has Been Unpopular</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="some_essentials.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="impl_details.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="why_lisp_unpopular" class="title">Why Lisp Has Been Unpopular</h2></div></div></div><p>Mark Jason Dominus gives <a class="link" href="http://perl.plover.com/yak/12views/samples/notes.html#sl-39">a case study called “Why Lisp Will Never Win”</a> in his “Twelve Views of Mark Jason Dominus”. He gives the following awk one-liner:</p><pre class="screen">awk 'BEGIN {FS=":"}; $6=="/sbin/nologin" {print $1}' /etc/passwd</pre><p>Which a member of comp.lang.lisp suggested that Lisp should implement something similar to. The response was that "with only a couple of new utility macros &amp; functions", it could become:</p><pre class="screen">(with-lines-from-file (line "/etc/passwd")
    (let ((fields (string-split line :fs #\:)))
        (when (string= (aref fields 5) "/sbin/nologin")
            (format t "~A~%" (aref fields 0))))))</pre><p>Which as Dominus notes is a little over 2.5 over the length of the awk program. (but still required these macros). Naturally no one will opt to write it instead. So the problems with Common Lisp is ground-up verbosity, lack of common idioms for commonly performed tasks, and lack of motivation to use it for common, everyday (sometimes even throwaway code).</p><p>So what will it look like in Spark?</p><pre class="screen">spark -inaF/:/ '(if (= (^F 5) "/sbin/login") (say (^F 0)))' /etc/passwd</pre><p>(we borrowed the <code class="literal">(array idx)</code> notation from Arc, because an array ref object is overloaded with a method to get the index.</p><p>One can find other resources about what makes a language popular here:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><a class="link" href="http://www.paulgraham.com/popular.html">http://www.paulgraham.com/popular.html</a> - “Being Popular”</li><li class="listitem"><a class="link" href="http://www.paulgraham.com/power.html">http://www.paulgraham.com/power.html</a> - “Succinctness is Power”</li></ol></div></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="some_essentials.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="impl_details.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">Some Spark Essentials </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> Some Implementation Details</td></tr></table></div></footer></body></html>