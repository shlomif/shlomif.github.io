<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Some Implementation Details</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="why_lisp_unpopular.xhtml" title="Why Lisp Has Been Unpopular"/><link rel="next" href="licence_of_this_doc.xhtml" title="Licence"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">Some Implementation Details</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="why_lisp_unpopular.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="licence_of_this_doc.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="impl_details" class="title">Some Implementation Details</h2></div></div></div><div class="toc"><ul class="toc"><li><span class="section"><a href="impl_details.xhtml#vm">Virtual Machine</a></span></li><li><span class="section"><a href="impl_details.xhtml#licensing">Spark Licensing</a></span></li><li><span class="section"><a href="impl_details.xhtml#tdd">Test-driven development</a></span></li><li><span class="section"><a href="impl_details.xhtml#documentation">Documentation</a></span></li></ul></div><p>These are some implementation details that are still subject to change:</p><section class="section"><div class="titlepage"><div><div><h3 id="vm" class="title">Virtual Machine</h3></div></div></div><p>I’m leaning towards making the initial Spark implementation use <a class="link" href="http://www.parrot.org/">Parrot</a> as its virtual machine. <a class="link" href="http://llvm.org/">LLVM</a> was suggested, and while it seems nice and powerful, it requires the compiler front end to be written in C/C++ which will cause the time to market to grow considerably. I don’t rule out a later implementation of Spark to LLVM, but during the initial implementation we would like to change things rapidly and quickly, and C or C\++ will slow us down considerably.</p><p>I’m not keen on using the Java Virtual Machine, due to Java’s long historical reputation of being “enterprisey” and non-hacker friendly (see <a class="link" href="http://www.paulgraham.com/javacover.html">http://www.paulgraham.com/javacover.html</a> ), and due to the fact it has a slow startup time, and that it feels very “sluggish”/non-responsive. Again, I don’t rule out a future port of Spark to the JVM.</p><p>The Parrot VM seems very suitable for dynamic languages, and it is progressing nicely. The <a class="link" href="http://www.parrot.org/languages">Parrot languages Page</a> already lists several implementation of Scheme which can serve as the basis for a Spark implementation, so I’d like to start there.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="licensing" class="title">Spark Licensing</h3></div></div></div><p>Since we’re building on Parrot, the licence of the non-original code will be the Artistic License 2.0, which is free, open-source, GPL-compatible and somewhere between a weak copyleft licence (e.g: the LGPL) and a permissive licence (e.g: the 2-clause or 3-clause BSD licences). The original code will be written under the MIT/X11 licence, which is a very permissive BSD-style licence that specifically allows sub-licensing. To avoid legal confusion, every file should contain an explicit “Licensing” notice to indicate under which license it is.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="tdd" class="title">Test-driven development</h3></div></div></div><p>As opposed to Arc, which shipped with no automated tests, Spark will be developed in a Test-driven development fashion. Namely, it will have a comprehensive test suite that will need to fully pass upon any commit to the trunk (or “master” or whatever the main branch is called).</p><p>The code of the tests is not expected to be authoritative for how the final version of the language will behave. Rather, some future design decisions will require changing the code of a lot of the tests accordingly.</p><p>I still don’t have a clear idea of how to design a lot of “big picture” Spark design decisions. While I believe that design is good, I also think that Spark should be designed incrementally, and that we can expect many design decisions to change. Test-driven development, while accepting the fact that often a lot of testing code will need to be modified, will allow us to do that.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="documentation" class="title">Documentation</h3></div></div></div><p>It is our plan to keep documentation for the Spark language using POD, PseudoPod, AsciiDoc or a similar language so people will be able to learn it, without the need to delve into many tests or the core code itself. The documentation will be kept mostly up-to-date, but we can expect it to grow somewhat out-of-sync with the code.</p><p>We’re not planning to make exhaustive documentation - for example, the internals of the front-end will not be very well documented, as they will tend to get out-of-sync with the code, and in general the code should be structured to be self-documenting and easy to understand using refactoring.</p></section></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="why_lisp_unpopular.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="licence_of_this_doc.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">Why Lisp Has Been Unpopular </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> Licence</td></tr></table></div></footer></body></html>