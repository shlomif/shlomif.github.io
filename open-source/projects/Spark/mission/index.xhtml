<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>Spark - Pre-Birth of a Modern Lisp - Shlomi Fish’s Homesite</title><meta charset="utf-8"/><meta name="author" content="Shlomi Fish"/><meta name="description" content="Spark - Pre-Birth of a Modern Lisp"/><meta name="keywords" content="Shlomi Fish,Shlomi,Fish,Perl,Humour,Israel,Programming,Open Source,Free Software,Presentations,Philosophy,Freecell,Freecell Solver,GIMP,Software"/><link rel="canonical" href="https://www.shlomifish.org/open-source/projects/Spark/mission/"/><link rel="stylesheet" href="../../../../style.css" media="screen" title="Normal"/><link rel="stylesheet" href="../../../../print.css" media="print"/><link rel="shortcut icon" href="../../../../favicon.png" type="image/png"/><link rel="next" href="../../../../"/><meta name="viewport" content="width=device-width,initial-scale=1"/><script src="../../../../js/main_all.js"></script></head><body><div id="header"><div class="leading_path"><a href="../../../../">Shlomi Fish’s Homepage</a> → <a href="../../../" title="Pages related to Software (mostly Open-Source)">Software</a> → <a href="../../">Projects</a></div></div><div id="faux"><p class="invisible"><a href="#main">Go to main content</a></p><p class="invisible"><a href="#navbar">Go to the navigation</a></p><div id="container-all"><button id="show_navbar" class="on">Hide NavBar ⬈</button><main class="main" id="main"><p class="invisible"><a href="#aft_sub_menu">Skip the sub-menu.</a></p><div class="sub_menu"><h2>Software Section Menu</h2><ul class="nav_links"><li><img src="../../../../images/sect-arr-left-disabled.svg" alt="Previous Page" class="bless"/></li><li><img src="../../../../images/sect-arr-up-disabled.svg" alt="Up in the Site" class="bless"/></li><li><a href="../../" title="Next Page (Alt+N)"><img src="../../../../images/sect-arr-right.svg" alt="Next Page" class="bless"/></a></li></ul><button id="toggle_sect_menu" class="toggle_sect_menu off" title="Show or Hide the Section Navigation Menu">Show</button><div id="sect_menu_wrapper" class="novis"><ul class="nm_main"><li><a href="../../">Software Projects</a><br/><ul><li><a href="../../freecell-solver/" title="A Library and Program to solve Solitaire Games">Freecell Solver</a></li><li><a href="../../pysol/" title="A suite of Solitaire games">PySol FC</a></li><li><a href="../../latemp/" title="A static site generator">Latemp</a></li><li><a href="../../website-meta-language/" title="A Preprocessor for HTML">Website META Language</a></li><li><a href="../../fortune-mod/" title="Display a random quote on the command line">fortune-mod</a></li><li><a href="../../../../grad-fu/" title="Gradient-Fu Patch for GIMP">Gradient-Fu Patch</a></li><li><a href="../../../../rwlock/" title="A First-Come First-Served Readers/Writers Lock">FCFS RWLock</a><br/><ul><li><a href="../../../../rwlock/linux-kernel/" title="Make Linux's flock/fcntl calls First-come First-served">For the Linux Kernel</a></li></ul></li><li><a href="../../File-Dir-Dumper/" title="Dump the Meta-Data of Directory Structures">File-Dir-Dumper</a></li><li><a href="../../black-hole-solitaire-solver/" title="Solve layouts of the patience card game 'Black Hole'">“Black Hole” Solitaire Solver</a></li><li><a href="../../japanese-puzzle-games/">Japanese Puzzle Games</a><br/><ul><li><a href="../../japanese-puzzle-games/abc-path/" title="Solver for ABC Path as featured on BrainBashers.com">ABC Path Solver</a></li><li><a href="../../japanese-puzzle-games/binary-puzzle/" title="Solver for logic puzzles as featured on www.binarypuzzle.com">Binary Puzzle Solver</a></li><li><a href="../../japanese-puzzle-games/kakurasu/" title="Automatically Solve the Kakurasu Puzzle Game">Kakurasu Solver</a></li></ul></li><li><a href="../../File-Find-Object/" title="An Object-Oriented Alternative to File::Find">File-Find-Object</a></li><li><a href="../../Module-Format/" title="Perform operations on a number of Perl modules by handling their different stringification formats.">Module-Format</a></li><li><a href="../../Test.pm-Converter/" title="Script to partially convert Perl test programs that use Test.pm to Test::More.">Convert From Test.pm</a></li><li><a href="../../XML-Grammar/" title="Provides specialised XML grammars, with processors and converters for various tasks">The XML-Grammar Project</a><br/><ul><li><a href="../../XML-Grammar/Fiction/" title="A lightweight markup language and an XML grammar for writing Prose.">XML-Grammar-Fiction</a></li><li><a href="../../XML-Grammar/Base/" title="Base classes and roles for XML grammar processors">XML-GrammarBase</a></li></ul></li><li><a href="../../docmake/" title="Automate the conversion of DocBook/XML to different formats">docmake</a></li><li><a href="../../quad-pres/" title="A Tool for Generating HTML Presentations">Quad-Pres</a></li><li><a href="../../libtap/" title="Write test programs in C that output to the Test Anything Protocol (TAP)">libtap</a></li><li><a href="../../countdown/" title="Delay for a certain seconds, while displaying the remaining time">countdown</a></li><li><a href="../../notifier-apps/" title="A simple client/server HTTP-based applications for desktop notifications">Notifier-Apps</a></li><li><a href="../../sky/" title="Upload a file and get a URL back.">sky</a></li><li><a href="../../maniac-downloader/" title="A download accelerator with a key improvement.">Maniac Downloader</a></li><li><a href="../../ksokoban/" title="A KDE implementation of Sokoban - maintenance branch">KSokoban Maintenance</a></li><li><a href="../../linux-kernel/xconfig-search/" title="Patch to Enhance the Configuration Searching of the Linux Kernel">Kernel Configuration Search Enhancement</a></li><li><a href="../../mikmod/" title="A library and player for playing music module files">MikMod</a><br/><ul><li><a href="../../../../jmikmod/" title="MOD Music Files Player for Java">MikMod for Java</a></li></ul></li><li><a href="../../problem-sets-and-cp/">Problem Sets and Competitive Programming Sites</a><br/><ul><li><a href="../../problem-sets-and-cp/project-euler/">Project Euler</a></li></ul></li><li><a href="../../../bits.html" title="Small Open Source Programs">Bits and Bobs</a><br/><ul><li><a href="../../../bits-and-bobs/greasemonkey/grease.html" title="Greasemonkey User Scripts for Firefox and other browsers">Greasemonkey Scripts</a></li></ul></li><li><a href="../../conf/" title="The Personal Configuration of some of the Programs on my Computer">Personal Configuration</a></li></ul></li><li><a href="../../../contributions/" title="Contributions to Open Source Projects I did not Initiate">Contributions to Projects</a></li><li><a href="../../../mentoring/" title="Providing mentoring and guidance to those who want to become open-source contributors">Mentoring FOSS Contributors</a></li><li><a href="../../../resources/">Documents and Resources</a><br/><ul><li><a href="../../../resources/sw-lists/">Curated Lists</a><br/><ul><li><a href="../../../portability-libs/" title="Index of Libraries for Portability">Portability Libraries</a></li><li><a href="../../../resources/software-tools/">Software Building and Management Tools</a></li><li><a href="../../../resources/editors-and-IDEs/" title="Index of Text Editors and Integrated Development Environments">Editors and IDEs</a></li><li><a href="../../../resources/numerical-software/">Numerical Software</a></li><li><a href="../../../resources/text-processing-tools/">Text Processing Tools</a></li><li><a href="../../../resources/networking-clients/" title="Web browsers, FTP clients, Instant Messaging (IM) clients, File sharing applications and more">Networking Clients</a></li><li><a href="../../../resources/multimedia-programs/">List of Multimedia Applications</a></li><li><a href="../../../resources/graphics-programs/" title="Raster editors, vector editors, image viewers and organisers, 3-D applications and more">List of Computer Graphics Applications</a></li><li><a href="../../../resources/databases-list/">List of Database Implementations</a></li><li><a href="../../../resources/software-quality-enhancement/">List of Software quality-enhancement tools</a></li></ul></li><li><a href="../../../favourite/" title="Favourite Open Source Software of Mine">Favourite OSS</a></li><li><a href="../../../interviews/" title="Interviews with Open Source Figures">Interviews</a><br/><ul><li><a href="../../../interviews/adrian-ettlinger.html" title="Interview with Adrian Ettlinger">Adrian Ettlinger</a></li><li><a href="../../../interviews/sussman.html" title="Interview with Ben Collins-Sussman">Ben Collins-Sussman</a></li></ul></li><li><a href="../../../resources/tech-tips/">Tech Tips’ Collection</a></li><li><a href="../../../resources/how-to-contribute-to-my-projects/">How to Contribute to My Projects</a></li><li><a href="../../../resources/israel/">Israel-Related</a><br/><ul><li><a href="../../../resources/israel/guide-to-israeli-foss-resources/" title="Guide to online Israeli open-source-related resources">Guide to Israeli FOSS Resources</a></li><li><a href="../../../resources/israel/list-of-projects/">List of Israeli Projects</a></li></ul></li></ul></li><li><a href="../../../anti/">Against Bad Software</a><br/><ul><li><a href="../../../../no-ie/" title="Stop Using Internet Explorer!">Internet Explorer</a><br/><ul><li><a href="../../../../no-ie/update-2014-02/" title="February 2014 Update for the Anti-MSIE Page">Feb 2014 Update</a></li></ul></li><li><a href="../../../anti/qmail/" title="Against using the qmail SMTP Server">Against qmail</a></li><li><a href="../../../anti/csh/" title="Stop Using (and Teaching) the C-Shell">Stop Using the C-Shell</a></li><li><a href="../../../anti/apple/" title="Against Apple, Mac OS, etc.">Against Apple Inc.</a></li><li><a href="../../../anti/Adobe-Flash/" title="Against Adobe Flash">Against Adobe Flash</a></li><li><a href="../../../anti/windows-vista/" title="A collection of links against Windows Vista">Against Windows Vista</a></li><li><a href="../../../anti/mysql/" title="A collection of links detailing MySQL Problems">Against MySQL</a></li><li><a href="../../../anti/php/" title="“PHP Sucks” - originally by czth">PHP Sucks</a></li><li><a href="../../../anti/autohell/" title="Escape from GNU Autohell!">GNU Autohell</a></li><li><a href="../../../anti/javascript/" title="Why JavaScript Should not be Used Outside Web Browser Scripting">Stop Abusing JavaScript</a></li><li><a href="../../../anti/java/" title="Some links against Java">Links against Java</a></li><li><a href="../../../anti/SOAP/" title="Some links against SOAP (the so-called “Simple Object Access Protocol”)">Links against SOAP</a></li><li><a href="../../../anti/TIOBE/" title="Some links against the TIOBE index, which aims to measure programming languages’ popularity">Links against TIOBE</a></li></ul></li><li><a href="../../../nostalgia/" title="Software I wrote for DOS back in the prehistoric days">Nostalgia</a></li></ul></div></div><div id="aft_sub_menu"></div><header><h1>Spark - Pre-Birth of a Modern Lisp</h1></header><nav class="page_toc"><h2 id="toc">Table of Contents</h2><ul><li><a href="#itself">The Article Itself</a><br/><ul><li><a href="#body">Body</a></li></ul></li><li><a href="#index">Spark - Pre-Birth of a Modern Lisp</a><br/><ul><li><ul><li><a href="#intro">Introduction</a></li><li><a href="#some_essentials">Some Spark Essentials</a><br/><ul><li><a href="#not_another_scheme">Spark is not another implementation of Scheme (or Common Lisp)</a></li><li><a href="#dynamic_lang">Spark will be a dynamic (so-called “scripting”) programming language</a></li><li><a href="#popular">Spark aims to be popular and be actively used for real-world tasks</a></li><li><a href="#not_compete_with_c">Spark does not aim to compete with C and friends</a></li><li><a href="#types">Spark will have a rich type system but won’t be strongly typed</a></li><li><a href="#useful_for_scripting">Spark will be capable of being used for Scripting</a><br/><ul><li><a href="#line_count_script">Line Count:</a></li><li><a href="#line_count_script_reloaded">Line Count Reloaded</a></li><li><a href="#double_space_script">Double-space a file</a></li><li><a href="#number_lines_script">Number lines in each file</a></li><li><a href="#note_cmd_line_magic">Note about command line magic</a></li></ul></li><li><a href="#nested_namespaces">Spark will have nested namespaces</a></li><li><a href="#succinct">Spark will be more succinct than most Lisps, but not overly terse</a></li><li><a href="#written_in_plaintext">Spark will be written in plaintext</a></li><li><a href="#dedicated_syntax_for_re">Regexps and other important elements have dedicated syntax</a></li><li><a href="#c_conventions">C/Perl/etc. conventions</a></li><li><a href="#proliferation_implementations">Spark will not encourage a proliferation of implementations</a></li><li><a href="#ultimate_lisp">The first version of Spark will not be the ultimate Lisp</a></li></ul></li><li><a href="#why_lisp_unpopular">Why Lisp Has Been Unpopular</a></li><li><a href="#impl_details">Some Implementation Details</a><br/><ul><li><a href="#vm">Virtual Machine</a></li><li><a href="#licensing">Spark Licensing</a></li><li><a href="#tdd">Test-driven development</a></li><li><a href="#documentation">Documentation</a></li></ul></li><li><a href="#licence_of_this_doc">Licence</a></li></ul></li></ul></li><li><a href="#formats">Other Formats</a></li></ul></nav><h2 id="itself">The Article Itself</h2><h3 id="body">Body</h3><div class="wrap-me"><header><div class="center ads_top"/></header><section xml:lang="en" class="article"><div class="titlepage"><div><div><h2 id="index" class="title">Spark - Pre-Birth of a Modern Lisp</h2></div><div><div class="author"><h3 class="author"><span class="firstname">Shlomi</span> <span class="surname">Fish</span></h3><code class="email">&lt;<a class="email" href="mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>&gt;</code></div></div></div><hr/></div><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="intro" class="title">Introduction</h4></header><p>Spark is a Modern dialect of Lisp currently being planned. This document is not a formal functional (much less technical) specification for it, but rather a briandump of some of the conclusions I (= Shlomi Fish) have reached about the fundamentals of its behaviour. Nevertheless, some preliminary (and still subject to change) specification of it will be given and some code examples will brought.</p><p>Beside contemporary Lisp dialects such as <a class="link" href="http://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</a>, <a class="link" href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a> and <a class="link" href="http://en.wikipedia.org/wiki/Arc_%28programming_language%29">Arc</a>, Spark draws a lot of inspiration from other modern languages, paradigms, and technologies including <a class="link" href="http://perl-begin.org/">Perl 5</a>, <a class="link" href="http://en.wikipedia.org/wiki/Perl_6">Perl 6</a>, <a class="link" href="http://en.wikipedia.org/wiki/Python_%28programming_language%29">Python</a>, <a class="link" href="http://en.wikipedia.org/wiki/Ruby_%28programming_language%29">Ruby</a>, Java and <a class="link" href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29">Haskell</a>.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="some_essentials" class="title">Some Spark Essentials</h4></header><p>These are some of the guiding elements in the design of Spark.</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="not_another_scheme" class="title">Spark is not another implementation of Scheme (or Common Lisp)</h5></header><p>There are far too many implementations of Scheme out there, and probably too many of Common Lisp. However, that is beside the point that we did not come to praise the existing dialects of Lisp, by implementing them again.</p><p>Spark will be a completely different dialect of Lisp. It won’t be compatible with either Scheme (or any of its implementations), Common Lisp or even with Arc. It will still be Lisp, though, as we hope you will see.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="dynamic_lang" class="title">Spark will be a dynamic (so-called “scripting”) programming language</h5></header><p>Spark will be an alternative to such languages as Perl, Python, Ruby, PHP, Tcl, Lua or io-language, which are all very different but have APIs to achieve similar ends and are used for similar tasks. Like them and Lisp (which is one of the oldest dynamic languages) it will be able to determine a lot of behaviour at run time and will support dynamic “eval”, call-by-name, run-time typing, run-time change of type for a datum, multiple dispatch, polymorphic macros and other features of Lisp and other dynamic languages.</p><p>Some people have been referring to Perl and friends as "scripting languages" but that implies they are only useful for scripts. See:</p><p><a class="link" href="http://xoa.petdance.com/Stop_saying_%22script%22">http://xoa.petdance.com/Stop_saying_%22script%22</a></p><p>While that article by Andy Lester illustrates the problem with labelling programming languages as “scripting languages”, I still think saying “script” and “scripting” is a valid way to distinguish a trivial program from an application. For example <code class="literal">/usr/bin/gcc</code> is essentially a script written in C, which just passes controls to the various compilation stages. When we type <code class="literal">gcc</code> at the command line, we are running this script that does the hard work of doing the compilation for us. (<code class="literal">/usr/bin/gcc</code> should not be confused with GCC, the GNU Compiler Collection which is a compilation framework for C, C++ and other languages, and is a crucial piece of the open-source UNIX-like operating systems infrastructure).</p><p>For an “in your face” anti-thesis to the aversion to call languages scripting languages see Larry Wall’s “Programming is Hard. Let’s Go Scripting”:</p><p><a class="link" href="http://www.perl.com/pub/a/2007/12/06/soto-11.html">http://www.perl.com/pub/a/2007/12/06/soto-11.html</a></p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="popular" class="title">Spark aims to be popular and be actively used for real-world tasks</h5></header><p>While other general purpose Lisps such as Common Lisp, Scheme, Arc or Clojure have been influential and have some followers and users, none of them are actively used with the same popularity as Perl, Python, Ruby or PHP are. Spark aims to be a popular lisp dialect which will be actively used for real-world tasks, not just toy or experimentation code.</p><p>Eventually, it is our hope that some people will get paid to maintain Spark code. Some of them against their best preferences, like some people now are maintaining Perl 5, PHP or even Python code while preferring a different language. (Simply because it puts bread on their table, and they cannot get paid to write something else.)</p><p>Python? Yes! Google for example has been hiring several Perl 5 or even Perl 5 and Perl 6 programmers and instructing them to program mostly in Python. I’ve known two or three of them myself. Many of them tolerate or even like Python enough to program in it, but many of them still prefer Perl and consider themselves as Perlers at heart. But Google gives very good conditions and many Perl programmers (despite a huge demand for them) are treated badly or have advanced to better paying positions. And naturally a lot of the “younger generation” (most of them) bought the hype that you shouldn’t need to learn Perl if you already know PHP, or Python or Java or whatever.</p><p>In any case, Spark aims to become roughly as popular as any of Perl/PHP/etc. It is not guaranteed that we succeed , but we still would like to try. What can we do to increase our chances?</p><p>Paul Graham has written about <a class="link" href="http://www.paulgraham.com/popular.html">what makes a language popular</a>. Arguably, he failed to make Arc as popular as he wanted, even after it was released (and may have violated some of his own guidelines), but the guidelines in the article are still sound (ad-hominem anecdote put aside).</p><p>One can spend a lot of time expanding on Graham’s points and adding more stuff (including possibly good timing and luck and possibly a lot of financial backing can help, which most open-source enthusiasts don’t have).</p><p>However, it is important to note that this is our ultimate goal. Some languages didn’t have a lot of financial backing before they got popular - Perl, Python, PHP and Ruby are examples of it. Can we do the same?</p><p>None of the P-languages are perfect. Someone on #scheme gave me a moderate list of must have items out of which Perl, Python, PHP and Ruby each violate at least one and Scheme and Common Lisp none. I can quote him here as the channel is publicly logged.</p><p>I’m not going to try to violate any of them (or any of the many common sense “never-do-it”’s that PHP alone has violated, to say nothing of the rest) on purpose in hope it will save me from the evil eye of having a decent language. But I don’t think languages succeed because they are bad but because they offer at least one awesome advantage. For example Perl 1 offered the ability to write pseudo-shell scripts in a much more robsut and powerful way than awk, sed, sh and csh and a much easier way than C did. (Although still very primitive by the standards of Perl 5.). By the time Perl 4 was abandoned in favour of Perl 5 , Perl 4 was already the de-facto standard for clueful sys admins who valued their sanity. And I recall when Perl 5 was the only real solution for writing CGI scripts that you could use because I was hired to work as a web developer at that time.</p><p>PHP was similar enough to Perl 5 to fool people into believing it was adequate (while messing up the internal behaviour and core language royally) and offered more ubiquity as far as setting up on web-hosts was concerned (which Perl 5 is still trying to catch up). You can now download very powerful and gratis content management systems in PHP (and other gratis web applications) and run them out of the box on your cheap hosting and call yourself a webmaster, which would be hard with any other UNIX-based solution. PHP as a language has many issues, but they got some parts of the implementation needs right, and this is what made it popular.</p><p>We need to find some good reasons for people to become hooked on Spark. Spark probably won’t be perfect because I am not perfect and don’t know all there is to know about language design. However, neither are Scheme and Common Lisp. But even if Spark doesn’t have so many quirks like PHP or Perl (or even Python) it should be an attractive platform for people to experiment with, write scripts in daily, write toy programs and serious applications, and then one day we may get a killer app like Ruby’s Ruby on Rails.</p><p>(Hopefully, we won’t get the added RoR hype, which I admit is based on viral marketing and community efforts, but was hype nonetheless. Perl and PHP were never strongly hyped, and they seem to have been doing fine without it.)</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="not_compete_with_c" class="title">Spark does not aim to compete with C and friends</h5></header><p>Spark does not aim to fill the same ecological niche as C, C++ Objective-C, etc. - much less assembly. C and friends have been the de-facto standard for writing applications when some or all of certain constraints have been met:</p><p><a class="link" href="http://www.shlomifish.org/philosophy/computers/when-c-is-best/">http://www.shlomifish.org/philosophy/computers/when-c-is-best/</a></p><p>While their use have lately been diminishing somewhat due to the increasing attractiveness of the Java or .NET frameworks or the various dynamic languages (Perl/Python/PHP/Ruby/etc.) they are nevertheless still very much in vogue and even the backends for the more high-level virtual machines are written in C and C++ .</p><p>There have been some efforts to compete with C and C++ on their own turf such as <a class="link" href="http://en.wikipedia.org/wiki/D_%28programming_language%29">D</a> or <a class="link" href="http://www.ecere.com/">Ecere</a> (and earlier efforts such as Ada 95, or Object Pascal) and they can be commended for that, but unlike them, Spark does not aim to replace C in most of the valid use cases for a C-like language.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="types" class="title">Spark will have a rich type system but won’t be strongly typed</h5></header><p>Like Common Lisp, Python, Ruby and Perl 6 and to some extent unlike Perl 5, Spark will have a rich type system. However, it won’t be strongly typed like Haskell. If Spark had been going to be strongly typed, it could no longer have been considered a Lisp, and I happen to like dynamic typing.</p><p>A variable can be assigned different values with different types during its run-time, and functions would be able to accept variables of any type (unless they specifically forbid it).</p><p>The Spark type system will be extendable at run time, and will be analogous to its Object Oriented Programming (OOP) system. As a result, one would be able to call methods on pieces of data, on expressions, on S-expressions, and on functions, macros, classes and method declarations, and on their application.</p><p>In Spark “everything will be an object”, but unlike Java, it won’t be overly-OO. One won’t need to instantiate a class and declare a method just to print “Hello World” on the screen. This will work:</p><pre class="screen">$ spark -e '(say "Hello World")'</pre><p>Or:</p><pre class="screen">$ spark -e '(print "Hello World\n")'</pre><p>Or:</p><pre class="screen">$ spark -e '(-&gt; "Hello World" say)'</pre><p><code class="literal">→</code> Is a simple macro that converts <code class="literal">(→ obj method args)</code> to <code class="literal">(method obj args)</code> and is used for some syntactic sugar.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="useful_for_scripting" class="title">Spark will be capable of being used for Scripting</h5></header><p>While Spark should not be called a scripting language, just as the name is a misnomer for Perl 5 or for PHP, it should in fact be capable of writing scripts, including command line scripts at the prompt or the REPL (Read-Eval-Print-Loop). Here are some examples for command line scripts. Most of these are taken from the descriptions in <a class="link" href="http://www.catonmat.net/blog/awk-one-liners-explained-part-one/">Peteris Krumins’ "Famous Awk One-Liners Explained"</a> series (which is now in the process of being augmented with “Famous Perl One-Liners Explained”). I’m not going to study the Awk implementations due to lack of knowledge in Awk and lack of will to learn it as I already know Perl 5 - its far superior superset, but I’ll implement something similar in Spark (Hopefully, Peteris will feature a “Famous Spark One Liners Explained” feature in his blog someday too).</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h6 id="line_count_script" class="title">Line Count:</h6></header><pre class="screen">$ spark -e '(foreach (fh ARGV) (++ i)) (say i)' [Files]</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h6 id="line_count_script_reloaded" class="title">Line Count Reloaded</h6></header><pre class="screen">$ spark -e '(: say len getlines fh ARGV)' [Files]</pre><p><code class="literal">(: …​ )</code> serves the same purpose as Haskell’s <code class="literal">$</code> - to chain function calls without too many nested parameters. So this script is equivalent to saying:</p><pre class="screen">$ spark -e '(say (len (getlines (fh ARGV))))' [Files]</pre><p>But is shorter and cleaner.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h6 id="double_space_script" class="title">Double-space a file</h6></header><pre class="screen">$ spark -pe '(say)'</pre><p>(Think Perl)</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h6 id="number_lines_script" class="title">Number lines in each file</h6></header><pre class="screen">$ spark -ne '(say "${^LINENUM} ${^LINE}")'</pre><p>Here we can see the string interpolation of variables in action. <code class="literal">${…​.}</code> interpolates a single variable, while <code class="literal">$()</code> is an S-expression. Aside from that spark will also have sprintf, <a class="link" href="http://metacpan.org/release/Text-Sprintf-Named">sprintf with named conversions similar to Python</a> and something as similar as possible to Perl’s Template Toolkit (while still being Sparky). I find Common Lisp’s <code class="literal">format</code> to be hard to understand and much less flexible than Template Toolkit so I’m going to drop it.</p><p>Like in Perl 5 the <code class="literal">^VARNAME</code> variables are reserved and are usually in all-capitals. Unlike Perl 5 (or Common Lisp), we are not a Lisp-2 and we use the same symbol namespace for everything (like Scheme). So we can put assign a lambda (could be <code class="literal">(fun …​ )</code> , <code class="literal">(sub …​ )</code> , <code class="literal">(lambda …​)</code> or <code class="literal">(function …​ )</code> - all exact synonyms) to a variable and call it with a value:</p><pre class="screen">(my square)
(:= square (fun (x) (* x x))) ; Or (&lt;- square) but I’m hazy about (= square)
(say (square 5)) ; Prints 25 followed by a newline.</pre><p>Like in Perl 5, however, a symbol table has an arbitrary amount of slots which we can put values. So we can say:</p><pre class="screen">(say :to (fh STDERR) "Warning, Will Robinson.")</pre><p>Which will print to STDERR.</p><p>In the case of the <code class="literal">:to</code> named parameter to <code class="literal">(say)</code> (or to <code class="literal">(print)</code> or to <code class="literal">(printf)</code> or whatever we have or define) we don’t need the explicit <code class="literal">(fh …​)</code> (= file handle) call but it won’t hurt.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h6 id="note_cmd_line_magic" class="title">Note about command line magic</h6></header><p>Out of convenience the <code class="literal">-e</code> and the rest of the <code class="literal">-p</code>, <code class="literal">-n</code> , etc. flags will involve some magic manipulation of the S-expression inside -e or inside the script. It also loads some convenient modules. However, sometimes we may wish to convert a command line script to a full application. That’s what the <code class="literal">--dump-code=code.spark</code> flag is for. It dumps the code of the program to a file containing code that can be run with just <code class="literal">spark code.spark</code>.</p><p>For example:</p><pre class="screen">$ spark --dump-code=say.spark -pe '(say)'
$ cat say.spark
(no strict) ; you should probably remove that.
(use re)
(use cmd-loop)
(cmd-loop.set-implicit-print 1)
(say)
$</pre><p>Like all examples here, this is just for the sake of the illustration. Until version 1.0.0 comes out, everything can change. But the concepts will remain the same.</p><p>We encourage Perl, Ruby and other dynamic languages with rich command line interfaces, to steal the <code class="literal">--dump-code</code> idea. Maybe one day someone will become a multi-millionaire from selling a 300K Lines program that evolved from a simple <code class="literal">spark/perl/ruby --dump-code=code…​. -e '…​.\'</code> invocation (after a successful plain <code class="literal">-e</code> invocation).</p></section></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="nested_namespaces" class="title">Spark will have nested namespaces</h5></header><p>Spark will have a similar namespace system to Perl 5, with nested namespaces, and the ability to selectively import symbols from namespaces at run-time. Similarly to <a class="link" href="http://metacpan.org/release/Sub-Exporter">http://metacpan.org/release/Sub-Exporter</a> and as opposed to C++ where importing symbols from namespaces is an all-or-nothing operation, and so mostly unusable.</p><p>As opposed to Java, one would be able to import several symbols from a namespace at once and grouped by tags. <code class="literal">Sub-Exporter</code> gives much more than that for Perl 5, but I don’t recall all the details from the slides I saw about it. <code class="literal">:-)</code> .</p><p>Like Perl 5 one will be able to import symbols at run-time.</p><p>As opposed to Perl 5, classes won’t be automatically associated with namespaces, and a namespace may contain one or more classes (or none). Like CPAN and unlike Java (<code class="literal">org.apache.jakarta…​</code>), we will not enforce namespace purity, but hopefully there will be a better mechanism than the current CPAN and PAUSE (Perl Authors Upload Server) to be able to fork, spin-off, or branch CSAN distributions or choose between competing alternatives. <a class="link" href="http://cpan6.org/">CPAN6</a> (orthogonal to Perl 6) is worth a look for some ideas, as is <a class="link" href="http://www.cpan.org/misc/ZCAN.html">"The Zen of Comprehensive Archive Networks"</a></p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="succinct" class="title">Spark will be more succinct than most Lisps, but not overly terse</h5></header><p>One thing notable about Scheme and Common Lisp is that many identifiers and keywords there are excessively long. <code class="literal">(string→integer)</code> , <code class="literal">(lambda)</code> , <code class="literal">(concatenate)</code> , etc. Yes, you can easily assign aliases to them, but it:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem">Takes time to write and more time to maintain.</li><li class="listitem">Will require you to carry and update a meta-syntactic package in all your code.</li><li class="listitem">Would make your code harder to understand to the unfamiliar.</li></ol></div><p>So Spark will provide short identifiers for most common operations (either macros or functions) by default. There won’t be too many long aliases because they will increase the core and require more time to learn and become familiar with for the uninitiated, but some of them will be considered.</p><p>For example, a variation on my favourite Scheme statement is:</p><pre class="screen">(vector-set! myarray idx (+ (vector-ref myarray idx) 2))</pre><p>Which in Perl is:</p><pre class="screen">$myarray[$idx] += 2;</pre><p>And in Spark would be:</p><pre class="screen">(+= (myarray idx) 2)</pre><p>Which isn’t much worse than Perl. We’re not trying to beat Perl 5, Perl 6 or much less J in code Golfing in every case - this isn’t a peeing contest. We’re just trying to make easy tasks easy.</p><p>Furthermore, while <span class="strong"><strong>+=</strong></span>, <span class="strong"><strong>-=</strong></span>, <span class="strong"><strong>/=</strong></span> and friends will be defined there will be a macro (that will be used defined by the prelude and used there) to define your own +${op}=+ operators. Like <code class="literal">(list=)</code> or <code class="literal">(myfunc=)</code>.</p><p>And as you see we will try very hard that every sane expression can become an lvalue.</p><p>And in case, you’re worried there will be a “+\+” and “--” operators too, with post-increment/post-decrement and pre-increment/pre-decrement variations.</p><p>Finally, by inspiration from Arc, we decided to do something about excessive parens. So we will have a <code class="literal">(with (k1 v1 k2 v2 k3 v3) …​. )</code> scoping instead of the unwieldy Scheme <code class="literal">(let*)</code> and <code class="literal">(letrec)</code> (both will be easily replaceable by +(with…​)<code class="literal">with some macro or VM trickery.). And we’ll have a C-style for-loop instead of the obscure +(do…​)</code> and a while loop, and a Perl 5/Perl 6-style foreach loop, and maybe other loops too. And you can always use recursion.</p><p>However we’re not going down the Arc route of assigning extremely short, and hard to pronounce and grep for identifiers. <code class="literal">(fn)</code> How do you pronounce it? fnn…​. There’s no such sound in Hebrew, so it’s verboten by your Hebrew-speaking overlords. We like <code class="literal">(fun…​)</code> because it puts the fun back in function (“Functional!! Parallelism!!!!” - oh wait! Wrong language.), and we like <code class="literal">(sub …​)</code> because it puts the “sub” back in subroutine. And all Hebrew speakers will rejoice because they can pronounce <code class="literal">“cat”</code> exactly like <code class="literal">“cut”</code> and Perl like Pérl and Lisp like Leesp, and they can pronounce TeX and LaTeX with a honest-to-god <a class="link" href="http://en.wikipedia.org/wiki/Kaph">khaph</a> (or a <a class="link" href="http://en.wikipedia.org/wiki/Heth">Heth</a> if they put their mind to to it.), and the god of the Israelite programmers saw there were only 5 and a half vowels and he was pleased.</p><p>Seriously now, I don’t like (fn) because it’s hard to pronounce, doesn’t sound right when you read it to your mind’s ear, and is obnoxious. While being succinct is a noble goal, picking psychologically-sound and intuitive conventions is also important. I recall searching the Arc tutorial and documentation for a <code class="literal">(not)</code> function only to found it was spelled <code class="literal">(no)</code>:</p><pre class="screen">(if (no soup) (print "soup is false"))</pre><p>“If no soup”. Oh no, no! No soup for you. <span class="strong"><strong>For one year!!!</strong></span> We’re going have (not) like everybody else, and also a “!” alias .</p><pre class="screen">(if (not soup) (print "soup is false"))</pre><pre class="screen">(if (! soup) (print "soup is false"))</pre><p>So we’re going to borrow stuff from Arc, but only when it makes sense. Spark should have an up-to-date documentation manual right from the very start, which will be kept as up-to-date as possible, and naturally will have automated tests, which would serve as automatically verifiable examples. Arc really had none, and often you needed to read the implementation code, or one of the example web applications.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="written_in_plaintext" class="title">Spark will be written in plaintext</h5></header><p>What do I mean? <code class="literal">sbcl</code> forces to write a long command line just to run a program from the command line and exit. Arc was not better and could not execute a program directly. I added this functionality to the Arc git repository myself.</p><p>No, the REPL won’t be gone in spark, and good old <code class="literal">(load)</code> will still be there. But you can also do:</p><pre class="screen">$ cat hello.spark
(say "Hello World!")
$ spark hello.spark
Hello World!
$</pre><p>Or put /usr/bin/env spark or whatever in your sha-bang and it will work.</p><p>A spark program will do its thing, execute to the finish and gracefully exit.</p><p>We will still have a REPL, that can be used from the command-line or from within Emacs SLIME or within IDEs such as Eclipse. Even Vim/gvim may get a REPL if it gets something like an embedded shell like Emacs has.</p><p>Spark programs can be abstract syntax trees, a network of objects, some compiled bytecode or flying unicorn ponies who drop candy. Nevertheless, they are still read from text. If you want to change the state of REPL until you forget what it has now or it changes unbeknowest to you (“Parallelism!!!!”) it’s an option. But you can still write your tests, run, debug, change, run debug, etc. Hopefully with automated tests for extra bonus points in Software Management sainthood.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="dedicated_syntax_for_re" class="title">Regexps and other important elements have dedicated syntax</h5></header><p>But don’t worry - it’s in the “re” module and it uses read-macros/ char-macros / text macros. With the help of such macros one can even create a parser for Ruby-style syntax (or Perl’s - <code class="literal">;-)</code>), but it’ll be actively discouraged.</p><p>So for example:</p><pre class="screen">$ spark -pe '(~ ^LINE (re.s {ba([zro])(\s+)mozart} ma$1$2bozart))'</pre><p>And it will replace the first <code class="literal">baz[whitespace]mozart</code> with <code class="literal">maz[whitespace]bozart</code> , etc. The <code class="literal">\~</code> operator is similar to Perl 5’s <code class="literal">=\~</code> or perl-5.10.0’s or Perl 6’s <code class="literal">~~</code> or in that it does a smart matching of a datum (which could be a list) to an abstract operation.</p><p>We can also use other delimiters instead of <code class="literal">{…​}</code> in the <code class="literal">(re.s…​)</code> read macro:</p><pre class="screen">$ spark -pe '(~ ^LINE (re.s /ba([zro])(\s+)mozart/ ma$1$2bozart))'</pre></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="c_conventions" class="title">C/Perl/etc. conventions</h5></header><div class="orderedlist"><ol class="orderedlist"><li class="listitem">Spark will be case-sensitive</li><li class="listitem">Unicode (UTF-8) aware-and-safe</li><li class="listitem">With C-style escapes - backslash does the right thing.</li></ol></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="proliferation_implementations" class="title">Spark will not encourage a proliferation of implementations</h5></header><p>As you all know Lisp is a family of languages, which includes Lisp, Scheme Arc, Emacs Lisp, etc. and some people may say also Dylan, and that Perl 5, Perl 6, Ruby, Python and most other modern languages have many Lispisms in them up to being able to translate many programs written in Lisp to them line by line. (<a class="link" href="http://www.paulgraham.com/icad.html">See Paul Graham Revenge of the Nerds for the inspiration</a>)</p><p>However, some people on <a class="link" href="irc://irc.freenode.net/#scheme">#scheme</a> told me that Scheme, due to the proliferation of incompatible implementations, was not one Lisp dialect, but a family of languages called “Scheme” with a common denominator. While I’m all for <a class="link" href="http://en.wikipedia.org/wiki/Germanic_languages">Germanic languages</a> being a major sub-division of <a class="link" href="http://en.wikipedia.org/wiki/Indo-European_languages">Indo European languages</a>, also with several mutually incomprehensible languages, I’m not sure I want a “Scheme programming language”-family within Lisp. It generally shouldn’t happen with “man-made” and computer-understood languages that are more under our control.</p><p>As a result, I’d like Spark to remain a single language with only a few implementations, possibly only one for each target virtual machine (e.g: Parrotcode, the JVM, or the .NET CLR, or a C-based interpreter). Spark will be defined and compatible even in its internals, its foreign function interface, and “standard library” (which will also have something more like CPAN is for Perl 5, where every J. Random Hacker can upload their own INI parser, under a different namespace), and core functionality.</p><p>Spark will have an open-source source code (GPL-compatible BSD-style or possibly partially Artistic 2.0 in case some of the code is derived from Parrot code), which naturally can be span-off, branches, and forked. However, none of them pose a threat to the fact that the Spark implementation will remain unified.</p><p>If someone changes Spark in incompatible ways, it may either die, or forked into a new language. This language will also be Lisp and may be Spark-like but it won’t be Spark. Perl 5 which only has one major implementation (<code class="literal">perl5</code> - currently at <code class="literal">perl-5.10.0</code>), recently span off <a class="link" href="http://metacpan.org/release/kurila">kurila</a> which is fork of perl 5 that is incompatible with it and with Perl 5, on purpose. Nevertheless, while Kurila may be considered a a language in the Perl family, it is not Perl 5 any more than Perl 4 , Perl 6 , <a class="link" href="http://sleep.dashnine.org/">Sleep</a> or whatever are. So Perl 5 has still not become a family of incompatible implementations.</p><p>Another factor that will dissuade people from creating multiple implementations of Spark is that as opposed to Scheme, creating a Spark implementation from scratch is not going to be trivial. It’s not that Spark will be needlessly complixified, but that it would be needfully complex to implement to be an expressive, feature-rich and high-quality language.</p><p>To quote Bjarne Stroustrup (the creator of C++ ) from his <a class="link" href="http://www.research.att.com/~bs/bs_faq.html#Java">FAQ question about Java</a></p><div class="blockquote"><table style="border:0" class="blockquote"><tr><td style="width:10%;vertical-align:top"> </td><td style="width:80%;vertical-align:top"><p>Much of the relative simplicity of Java is - like for most new languages - partly an illusion and partly a function of its incompleteness. As time passes, Java will grow significantly in size and complexity. It will double or triple in size and grow implementation-dependent extensions or libraries. That is the way every commercially successful language has developed. Just look at any language you consider successful on a large scale. I know of no exceptions, and there are good reasons for this phenomenon. [I wrote this before 2000; now see a preview of Java 1.5.]</p></td><td style="width:10%;vertical-align:top"> </td></tr><tr><td style="width:10%;vertical-align:top"> </td><td style="text-align:right;vertical-align:top" colspan="2">--<span class="attribution"> Bjarne Stroustrup <em class="citetitle">FAQ Question about Java</em></span></td></tr></table></div><p>(I should note that, like many other FOSS hackers, I normally prefer C over C++ , and am not a big fan of C++ for most stuff. However, Stroustrup is a wickedly smart guy, and despite whatever faults his language may have, he speaks straight, and what he says here seems to make a lot of sense).</p><p>Spark hopefully won’t be as complex as C++ is today from the beginning, but will also be more complex than Scheme to allow for better expression and faster development. It also doesn’t aim to be an incremental improvement over Scheme (or Common Lisp) which seems to be the case for Arc and Clojure, but rather something like Perl 5 was to Perl 4 or Perl 6 is to Perl 5 : a paradigm shift, which Lispers and non-Lispers alike will appreciate.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="ultimate_lisp" class="title">The first version of Spark will not be the ultimate Lisp</h5></header><p>Some features of Common Lisp or other Lisps will be absent in Spark, some things will be harder to do than Common Lisp or even other Lisps or other non-Lisp programming languages, and some things will not work as expected at first (bugs, etc.). A lot of it will be caused due to the fact that the primary author of this document does not consider himself a Scheme expert (and is very far from being a Common Lisp expert) and just likes Lisp, Perl 5 and other languages enough to want to promote them.</p><p>As a result, some estoric features of the popular Lisp languages today or some languages that he has not fully investigated yet, won’t be available at first. This is expected given his ignorance, enthusiasm and anxiety to get something out of the door first.</p><p>While he would still be interested in learning about whatever core library or meta-programmatic features other languages have that may prove useful for the core Spark language (or alternatively cool APIs that you think should be ported to Spark). But he has little patience to learn entire languages “fully” (if learning any non-trivial language fully is indeed possible) before starting to work on Spark. And often ignorance is a virtue.</p><p>So the first versions of Spark will still have some room for improvement. Most of it may hopefully be solvable using some meta-syntactic or meta-programming user-land libraries (as is often the case for Lisps and other dynamic languages). As for the rest, we could consider them bad design decisions that still add to the language’s colour and make it a bit more interesting to program in than a 100% perfect language. Sometimes perfection is in imperfection.</p></section></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="why_lisp_unpopular" class="title">Why Lisp Has Been Unpopular</h4></header><p>Mark Jason Dominus gives <a class="link" href="http://perl.plover.com/yak/12views/samples/notes.html#sl-39">a case study called “Why Lisp Will Never Win”</a> in his “Twelve Views of Mark Jason Dominus”. He gives the following awk one-liner:</p><pre class="screen">awk 'BEGIN {FS=":"}; $6=="/sbin/nologin" {print $1}' /etc/passwd</pre><p>Which a member of comp.lang.lisp suggested that Lisp should implement something similar to. The response was that "with only a couple of new utility macros &amp; functions", it could become:</p><pre class="screen">(with-lines-from-file (line "/etc/passwd")
    (let ((fields (string-split line :fs #\:)))
        (when (string= (aref fields 5) "/sbin/nologin")
            (format t "~A~%" (aref fields 0))))))</pre><p>Which as Dominus notes is a little over 2.5 over the length of the awk program. (but still required these macros). Naturally no one will opt to write it instead. So the problems with Common Lisp is ground-up verbosity, lack of common idioms for commonly performed tasks, and lack of motivation to use it for common, everyday (sometimes even throwaway code).</p><p>So what will it look like in Spark?</p><pre class="screen">spark -inaF/:/ '(if (= (^F 5) "/sbin/login") (say (^F 0)))' /etc/passwd</pre><p>(we borrowed the <code class="literal">(array idx)</code> notation from Arc, because an array ref object is overloaded with a method to get the index.</p><p>One can find other resources about what makes a language popular here:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem"><a class="link" href="http://www.paulgraham.com/popular.html">http://www.paulgraham.com/popular.html</a> - “Being Popular”</li><li class="listitem"><a class="link" href="http://www.paulgraham.com/power.html">http://www.paulgraham.com/power.html</a> - “Succinctness is Power”</li></ol></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="impl_details" class="title">Some Implementation Details</h4></header><p>These are some implementation details that are still subject to change:</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="vm" class="title">Virtual Machine</h5></header><p>I’m leaning towards making the initial Spark implementation use <a class="link" href="http://www.parrot.org/">Parrot</a> as its virtual machine. <a class="link" href="http://llvm.org/">LLVM</a> was suggested, and while it seems nice and powerful, it requires the compiler front end to be written in C/C++ which will cause the time to market to grow considerably. I don’t rule out a later implementation of Spark to LLVM, but during the initial implementation we would like to change things rapidly and quickly, and C or C\++ will slow us down considerably.</p><p>I’m not keen on using the Java Virtual Machine, due to Java’s long historical reputation of being “enterprisey” and non-hacker friendly (see <a class="link" href="http://www.paulgraham.com/javacover.html">http://www.paulgraham.com/javacover.html</a> ), and due to the fact it has a slow startup time, and that it feels very “sluggish”/non-responsive. Again, I don’t rule out a future port of Spark to the JVM.</p><p>The Parrot VM seems very suitable for dynamic languages, and it is progressing nicely. The <a class="link" href="http://www.parrot.org/languages">Parrot languages Page</a> already lists several implementation of Scheme which can serve as the basis for a Spark implementation, so I’d like to start there.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="licensing" class="title">Spark Licensing</h5></header><p>Since we’re building on Parrot, the licence of the non-original code will be the Artistic License 2.0, which is free, open-source, GPL-compatible and somewhere between a weak copyleft licence (e.g: the LGPL) and a permissive licence (e.g: the 2-clause or 3-clause BSD licences). The original code will be written under the MIT/X11 licence, which is a very permissive BSD-style licence that specifically allows sub-licensing. To avoid legal confusion, every file should contain an explicit “Licensing” notice to indicate under which license it is.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="tdd" class="title">Test-driven development</h5></header><p>As opposed to Arc, which shipped with no automated tests, Spark will be developed in a Test-driven development fashion. Namely, it will have a comprehensive test suite that will need to fully pass upon any commit to the trunk (or “master” or whatever the main branch is called).</p><p>The code of the tests is not expected to be authoritative for how the final version of the language will behave. Rather, some future design decisions will require changing the code of a lot of the tests accordingly.</p><p>I still don’t have a clear idea of how to design a lot of “big picture” Spark design decisions. While I believe that design is good, I also think that Spark should be designed incrementally, and that we can expect many design decisions to change. Test-driven development, while accepting the fact that often a lot of testing code will need to be modified, will allow us to do that.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="documentation" class="title">Documentation</h5></header><p>It is our plan to keep documentation for the Spark language using POD, PseudoPod, AsciiDoc or a similar language so people will be able to learn it, without the need to delve into many tests or the core code itself. The documentation will be kept mostly up-to-date, but we can expect it to grow somewhat out-of-sync with the code.</p><p>We’re not planning to make exhaustive documentation - for example, the internals of the front-end will not be very well documented, as they will tend to get out-of-sync with the code, and in general the code should be structured to be self-documenting and easy to understand using refactoring.</p></section></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="licence_of_this_doc" class="title">Licence</h4></header><p>This document is copyright by <a class="link" href="http://www.shlomifish.org/">Shlomi Fish</a>, 2009 and is available under the <a class="link" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Licence</a>, or at your option any later version of it.</p><p>In addition, any code excerpts, unless derived from other sources are made available under the <a class="link" href="http://www.opensource.org/licenses/mit-license.php">MIT/X11 License</a> .</p></section></section><footer/></div><h2 id="formats">Other Formats</h2><ul><li><a href="Spark-Pre-Birth-of-a-Modern-Lisp.txt">AsciiDoc source (plaintext)</a> - requires <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a> to be converted to HTML or DocBook/XML.</li><li><a href="Spark-Pre-Birth-of-a-Modern-Lisp.pdf">PDF (Adobe Acrobat)</a> - please don’t print, though.</li><li><a href="Spark-Pre-Birth-of-a-Modern-Lisp.xml">DocBook/XML</a></li></ul><script>shlomif_load_nav("open-source/projects/Spark/mission/");</script><p class="share"><a href="http://www.addtoany.com/share_save?linkurl=https%3A%2F%2Fwww.shlomifish.org%2Fopen-source%2Fprojects%2FSpark%2Fmission%2F&amp;linkname="><img src="../../../../images/share_save_171_16.png" width="171" height="16" class="bless" alt="Share/Bookmark"/></a><br/></p></main><nav class="navbar" id="navbar"><div class="center"><a href="../../../../" title="Shlomi Fish’s Homepage"><img src="../../../../images/evilphish-svg.min.svg" alt="EvilPHish by Illiad" class="highlight" style="border:0;margin-bottom:.5em"/></a></div><ul class="nav_links"><li><img src="../../../../images/arrow-2-left-disabled.png" alt="Previous Page" class="bless"/></li><li><img src="../../../../images/arrow-2-up-disabled.png" alt="Up in the Site" class="bless"/></li><li><a href="../../../../" title="Next Page (Alt+N)" accesskey="n"><img src="../../../../images/arrow-2-right.png" alt="Next Page" class="bless"/></a></li></ul><div id="nav_menu"><ul><li><a href="../../../../">Shlomi Fish’s Homepage</a></li><li class="open"><a href="../../../../me/">About Myself</a><br/><ul><li><a href="../../../../personal.html" title="A Short Biography of Myself">Bio</a><br/><ul><li><a href="../../../../me/intros/" title="Introductions of Me to Various Forums">Intros</a><br/><ul><li><a href="../../../../me/intros/writers/" title="My Intro to the MIT Writers Mailing List">MIT Writers</a></li></ul></li></ul></li><li><a href="../../../../me/contact-me/" title="How to Contact Me">Contact Me</a></li><li><a href="../../../../me/rindolf/" title="The history and etymology of “Rindolf”, Shlomi Fish’s Nickname">“Rindolf” - my nickname</a><br/><ul><li><a href="../../../../me/rindolfism/" title="Shlomi Fish’s Personal, dynamic, open / free / geeky / share / hacky philosophy">“Rindolfism” - my personal, dynamic, philosophy</a></li></ul></li><li><a href="../../../../me/resumes/">My Résumés</a><br/><ul><li><a href="../../../../me/resumes/Shlomi-Fish-Resume-as-Software-Dev.html">Résumé as a Software Dev</a></li><li><a href="../../../../SFresume.html">English Résumé</a></li><li><a href="../../../../SFresume_detailed.html">Detailed English Résumé</a></li><li><a href="../../../../me/resumes/Shlomi-Fish-Resume-as-Writer-Entertainer.html">Résumé as a Writer and Entertainer</a></li></ul></li><li><a href="../../../../me/business-card/">My Business Card</a></li><li><a href="../../../../me/personal-ad.html" title="My Personal Ad: what I’m looking for in a prospective girlfriend and what I can add to the relationship.">Personal Ad</a></li><li><a href="../../../../me/blogs/" title="Links to my online journals.">My Weblogs</a></li><li><a href="../../../../me/interviews/" title="Interviews that were conducted with me">Interviews</a><br/><ul><li><a href="../../../../me/interviews/reddit-AMA/">Reddit “Ask Me Anything”</a></li></ul></li><li><a href="../../../../me/relicensing-my-entire-portfolio-under-cc-by/" title="Offer to relicense my whole body of creative works under CC-by if I get enough money">Relicensing my Creative Works Portfolio</a></li></ul></li><li><a href="../../../../humour/" title="My Humorous Creations">Humour</a><br/><ul><li><a href="../../../../humour/stories/" title="Large-Scale Stories I Wrote">Stories</a><br/><ul><li><a href="../../../../humour/stories/usable/">Usable</a><br/><ul><li><a href="../../../../humour/TheEnemy/" title="The Enemy and How I Helped to Fight It">The Enemy</a></li><li><a href="../../../../humour/TOneW-the-Fountainhead/" title="The One with the Fountainhead">TOW The Fountainhead</a></li><li><a href="../../../../humour/human-hacking/" title="The Human Hacking Field Guide">Human Hacking Field Guide</a></li><li><a href="../../../../humour/Star-Trek/We-the-Living-Dead/">We, the Living Dead</a></li><li><a href="../../../../humour/humanity/" title="Parody of Humanity and Modern Life in Particular">Humanity - The Movie</a></li></ul></li></ul></li><li><a href="../../../../humour/aphorisms/">Aphorisms and Quotes</a><br/><ul><li><a href="../../../../humour.html" title="Collection of Funny or Insightful Quotes or Aphorisms I came up with">My Quotes Collection</a></li><li><a href="../../../../humour/fortunes/" title="Collection of Files for Input to the UNIX ‘fortune’ Program">Fortune Cookies Collection</a></li><li><a href="../../../../humour/bits/facts/" title="“Facts” about Chuck Norris and other things">Factoids</a></li></ul></li><li><a href="../../../../humour/bits/" title="Small Scale Funny Works of Mine">Small Scale</a></li><li><a href="../../../../humour/by-others/" title="Humorous Works by Other People">By Others</a></li></ul></li><li><a href="../../../../philosophy/" title="Various Essays and Articles about Technology and Philosophy in General">Essays</a><br/><ul><li><a href="../../../../philosophy/philosophy/">General Philosophy</a></li><li><a href="../../../../philosophy/computers/" title="Computing-related Essays and Articles">Computing</a><br/><ul><li><a href="../../../../philosophy/computers/open-source/" title="Essays about Free and Open Source Software (FOSS)">Open Source</a></li><li><a href="../../../../philosophy/computers/software-management/" title="Essays about how to manage software workplaces, projects and teams">Software Management</a></li><li><a href="../../../../philosophy/computers/perl/" title="Essays about the Perl programming language">Perl</a></li><li><a href="../../../../philosophy/computers/web/" title="About the World-Wide-Web">The Web (WWW)</a></li><li><a href="../../../../philosophy/computers/education/" title="About Computer and Technical Education">Education</a></li></ul></li><li><a href="../../../../philosophy/politics/" title="Essays about Politics and Philosophical Politics">Political Essays</a></li><li><a href="../../../../philosophy/Index/" title="Index to Essays and Articles I wrote.">Index to Essays</a></li></ul></li><li><a href="../../../../puzzles/" title="Puzzles, Riddles and Brain-teasers">Puzzles</a><br/><ul><li><a href="../../../../MathVentures/" title="Mathematical Riddles and their Solutions">Math-Ventures</a></li><li><a href="../../../../puzzles/logic/">Logic Puzzles</a></li></ul></li><li><a href="../../../../art/" title="Computer art I created while explaining how.">Art</a><br/><ul><li><a href="../../../../art/original-graphics/">Original Graphics</a></li><li><a href="../../../../art/by-others/">By others</a></li><li><a href="../../../../art/recommendations/">Recommendations</a><br/><ul><li><a href="../../../../art/recommendations/music/">Music</a><br/><ul><li><a href="../../../../art/recommendations/music/online-artists/" title="Some of my favourite online musicians">Online Artists</a></li></ul></li></ul></li></ul></li><li class="open"><a href="../../../" title="Pages related to Software (mostly Open-Source)">Software</a><br/><ul><li class="open"><a href="../../">Projects</a><br/><ul><li><a href="../../freecell-solver/">Freecell Solver</a></li><li><a href="../../pysol/" title="A suite of Solitaire games">PySol FC</a></li></ul></li><li><a href="../../../resources/" title="Various Software Resources Pages">Resources Pages</a><br/><ul><li><a href="../../../resources/sw-lists/">Curated Lists</a></li><li><a href="../../../favourite/" title="Favourite Open-Source Software">Favourite OSS</a></li><li><a href="../../../interviews/" title="Interviews with Open-Source People">Interviews</a></li><li><a href="../../../resources/israel/" title="Israel-Related FOSS Resources">Israel-Related</a></li></ul></li><li><a href="../../../contributions/" title="Contributions to Other Projects, that I did not Start">Contributions</a></li></ul></li><li><a href="../../../../lecture/" title="Presentations I Wrote (Mostly Technical)">Lectures</a><br/><ul><li><a href="../../../../lecture/Perl/Newbies/">Perl for Newbies</a></li><li><a href="../../../../lecture/LAMP/" title="Web Publishing using Linux, Apache, MySQL, and Perl/PHP/Python (or equivalents)">Web Publishing using LAMP</a></li><li><a href="../../../../lecture/CatB/">The Cathedral and the Bazaar</a></li><li><a href="../../../../lecture/cat/programming-languages/" title="Presentations about Programming Languages">Prog. Languages</a></li><li><a href="../../../../lecture/cat/various-tools/" title="Presentations about Various Tools">Various Tools</a></li><li><a href="../../../../lecture/W2L/" title="Presentations for the Israeli series for Linux Newcomers">Welcome to Linux</a></li><li><a href="../../../../lecture/cat/projects/" title="Presentations about my Open Source Projects">About My Projects</a></li><li><a href="../../../../lecture/cat/lightning-talks/" title="Short (5-15 minutes) Presentations">Lightning Talks</a></li></ul></li><li class="open"><a href="../../../../work/" title="Work-Related Pages">Work</a><br/><ul><li><a href="../../../../work/hire-me/" title="I’m a Geek for Hire">Hire Me!</a><br/><ul><li><a href="../../../../work/private-lessons/" title="I’m Giving Private Lessons for High School Subjects and Computing.">Private Lessons</a></li></ul></li></ul></li></ul><ul><li><a href="../../../../links.html" title="An incomplete list of links I find cool and/or useful.">Cool Links</a></li><li><a href="../../../../recommendations/" title="Recommendations of Books, Music Albums, Films, etc.">Recommendations</a></li></ul><ul><li class="open"><a href="../../../../site-map/" title="A site map showing all of the main pages.">Site Map</a><br/><ul><li class="open"><a href="../../../../site-map/hebrew/" title="מפת העמודים העבריים באתר">עמודים בעברית</a></li></ul></li></ul><ul><li class="open"><a href="../../../../meta/" title="Information about this Site">Meta Info</a><br/><ul><li class="open"><a href="../../../../meta/FAQ/" title="Frequently Asked Questions and Answers List (FAQ)">FAQ</a></li><li class="open"><a href="../../../../meta/privacy-policy/">Privacy Policy</a></li><li class="open"><a href="../../../../meta/site-source/" title="The source code used to generate this site">Site’s Source</a></li><li class="open"><a href="../../../../meta/how-to-help/" title="How you can help promote this site">How to Help</a><br/><ul><li class="open"><a href="../../../../meta/donate/">Please Donate</a></li></ul></li><li class="open"><a href="../../../../meta/hosting/" title="About this site’s hosting provider.">Hosting</a></li><li class="open"><a href="../../../../meta/old-site-snapshots/" title="The site as it looked like many years ago.">Old Site Snapshots (Nostalgia)</a></li></ul></li></ul></div><div class="about_author"><div class="center"><img src="../../../../images/shlomif-cutethulhu-small.webp" alt="Photo of Shlomi Fish" title="Head shot of Shlomi Fish"/></div><p><a href="../../../../#about_site">Shlomi Fish</a> (שלומי פיש), also known as <a href="../../../../me/rindolf/">“Rindolf”</a>, is an Israeli humorist, writer, and software geek.</p><p>He is passionate about open content, open source, and freedom and openness in general.</p><p class="sep">It is easy to reach Shlomi using a large number of <a href="../../../../me/contact-me/">online means</a>, including <a href="mailto:shlomif@shlomifish.org">E-mail</a>.</p></div><h2 id="site-google-search">Google Search</h2><form method="get" action="https://www.google.com/search"><div class="search"><input type="hidden" name="ie" value="UTF-8"/> <input type="hidden" name="oe" value="UTF-8"/> <input type="text" name="q" size="15" maxlength="255"/> <input type="hidden" name="domains" value="www.shlomifish.org"/><br/><input type="radio" name="sitesearch"/> WWW<br/><input type="radio" name="sitesearch" value="www.shlomifish.org" checked="checked"/> shlomifish.org<br/><input type="submit" name="btnG" value="Google Search"/></div></form><h2 id="site-ddg-search">Duck Duck Go Search</h2><div class="search"><!-- DuckDuckGo Search --><object data="https://duckduckgo.com/search.html?width=100&amp;site=shlomifish.org&amp;prefill=SearchDuckDuckGo" type="text/html" style="overflow:hidden;margin:0;padding:0;width:160px;height:40px"></object></div><ul class="relevant_links"><li><a href="http://shlomifishswiki.branchable.com/">Shlomi Fish’s Wiki</a></li></ul><p><a href="https://www.mozilla.org/firefox/new/" class="bless"><img class="bless" alt="Get Firefox!" title="Get Firefox! A safer, faster, better web-browser." src="../../../../images/get-firefox.png"/></a></p><p><a href="http://perl-begin.org/" title="The Perl Beginners' Site" class="bless"><img src="../../../../images/perl-begin.png" alt="The Perl Beginners' Site" class="bless"/></a></p><p><a href="http://validator.w3.org/check/referer" title="Valid XHTML5!" class="bless"><img class="highlight bless" src="../../../../images/xh11-btn.png" alt="Valid XHTML5!"/></a></p><p><a href="http://jigsaw.w3.org/css-validator/" title="Valid CSS!" class="bless"><img class="highlight bless" src="../../../../images/css-btn.png" alt="Valid CSS!"/></a></p><h2 id="shlomif_on_the_web">Shlomi Fish elsewhere on the Web</h2><div class="elsew_on_web"><ul><li><p><a href="http://twitter.com/shlomif"><img src="../../../../images/twitter-bird-light-bgs-20.png" alt="Twitter Logo"/> Twitter</a></p></li><li><p><a href="https://plus.google.com/+ShlomiFish/posts"><img src="../../../../images/google-plus-icon-30x30.png" alt="Google+ Logo"/> Google+</a></p></li><li><p><a href="http://www.facebook.com/shlomi.fish"><img src="../../../../images/facebook-icon-30x30.png" alt="Facebook Logo"/> Facebook</a></p></li><li><p><a href="http://unarmed.shlomifish.org/"><i>Unarmed but still Dangerous</i> Blog</a></p></li><li><p><a href="http://www.reddit.com/user/shlomif"><img src="../../../../images/Reddit_30x30.png" alt="Reddit Logo"/> Reddit</a></p></li><li><p><a href="http://en.wikipedia.org/wiki/User:Shlomif"><img src="../../../../images/wikipedia-logo-20.png" alt="Wikipedia Logo"/> Wikipedia</a></p></li><li><p><a href="http://www.flickr.com/photos/shlomif/"><img src="../../../../images/flickr-32x32.png" alt="Flickr Logo"/> Flickr</a></p></li><li><p><a href="http://shlomif.deviantart.com/"><img src="../../../../images/deviantart-30x30.png" alt="deviantART Logo"/> deviantART</a></p></li><li><p><a href="http://www.youtube.com/user/ShlomiFish"><img src="../../../../images/youtube-30x30.png" alt="YouTube Logo"/> YouTube</a></p></li><li><p><a href="http://github.com/shlomif"><img src="../../../../images/github-24-black.png" alt="GitHub Logo"/> GitHub</a></p></li></ul></div></nav><div id="container-footer"></div></div></div><footer id="footer"><hr/><ul class="bt_nav"><li><a href="https://www.patreon.com/shlomif"><img class="patreon" src="../../../../images/patreon.svg" alt="Patreon account" title="Support me using Patreon"/></a></li><li><a href="../../../../">Home</a></li><li><a href="../../../../me/">About</a></li><li><a href="../../../../me/contact-me/">Contact Us</a></li><li><a href="../../../../meta/privacy-policy/">Privacy Policy</a></li><li><a href="../../../../meta/anti-spam-policy/">Anti-Spam Policy</a></li><li><a href="../../../../meta/FAQ/" title="Frequently asked questions list">FAQ</a></li><li><a href="../../../../me/blogs/">RSS/Atom Feeds</a></li></ul><p>Written, designed, and maintained by Shlomi Fish, <a href="mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>.</p><div id="footer_donate"><p><b>Note:</b> Given that I am under pressure to be less generous, and spend my money on activities that bring me joy, and make me a little poorer financially, I'd appreciate <a href="https://www.shlomifish.org/meta/donate/">donations</a>.</p></div><p>If you like what you see here, or have any comments, suggestions, or corrections, feel free to E-mail me about it. I’d love to hear from you. If you have found what I did helpful or entertaining, please consider <a href="../../../../meta/how-to-help/">helping</a>.</p><p>Style and look based on the <a href="http://wordpress.org/extend/themes/smoked">Smoked WordPress Theme</a> by <a href="http://wordpress.org/extend/themes/profile/iconstantin">iconstantin</a>.</p><p><a href="../../../../meta/FAQ/#evilphish-emblem">Fish emblem</a> taken from the <a href="http://ars.userfriendly.org/cartoons/?id=20030803">“Anatomy of an EvilPHish”</a> cartoon of <a href="http://www.userfriendly.org/">UserFriendly.org</a>.</p><a href="../../../../"><img src="../../../../images/bk2hp-v2.min.svg" class="bk2hp" alt="Back to my Homepage"/></a></footer></body></html>