<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>Thoughts about the Best Introductory Language - Shlomi Fish&#8217;s Homesite</title><meta charset="utf-8"/><meta name="author" content="Shlomi Fish"/><meta name="description" content="Thoughts about the Best Introductory Language"/><meta name="keywords" content="Shlomi Fish,Shlomi,Fish,Perl,Humour,Israel,Programming,Open Source,Free Software,Presentations,Philosophy,Freecell,Freecell Solver,GIMP,Software"/><link rel="canonical" href="https://www.shlomifish.org/philosophy/computers/education/introductory-language/"/><link rel="stylesheet" href="../../../../style.css" media="screen" title="Normal"/><link rel="stylesheet" href="../../../../print.css" media="print"/><link rel="shortcut icon" href="../../../../favicon.png" type="image/png"/><link rel="next" href="../../../../"/><meta name="viewport" content="width=device-width,initial-scale=1"/><script src="../../../../js/main_all.js"/></head><body><div id="header"><div class="leading_path"><a href="../../../../">Shlomi Fish&#8217;s Homepage</a> &#8594; <a href="../../../" title="Various Essays and Articles about Technology and Philosophy in General">Essays</a> &#8594; <a href="../../" title="Computing-related Essays and Articles">Computing</a> &#8594; <a href="../" title="Articles about Computer Learning and Education">Education</a> &#8594; <a href="./" title="What is the best Introductory Programming Language?">Best Introductory Language</a></div></div><div id="faux"><p class="invisible"><a href="#main">Go to main content</a></p><p class="invisible"><a href="#navbar">Go to the navigation</a></p><div id="container-all"><button id="show_navbar" class="on">Hide NavBar &#11016;</button><main class="main" id="main"><p class="invisible"><a href="#aft_sub_menu">Skip the sub-menu.</a></p><div class="sub_menu"><h2>Essays Section Menu</h2><ul class="nav_links"><li><a href="../opinion-on-the-technion/" title="Previous Page (Alt+P)"><img src="../../../../images/sect-arr-left.svg" alt="Previous Page" class="bless"/></a></li><li><a href="../" title="Up in the Site (Alt+U)"><img src="../../../../images/sect-arr-up.svg" alt="Up in the Site" class="bless"/></a></li><li><a href="../../how-to-get-help-online/" title="Next Page (Alt+N)"><img src="../../../../images/sect-arr-right.svg" alt="Next Page" class="bless"/></a></li></ul><button id="toggle_sect_menu" class="toggle_sect_menu off" title="Show or Hide the Section Navigation Menu">Show</button><div id="sect_menu_wrapper" class="novis"><ul class="nm_main"><li><a href="../../../books-recommends/" title="Reviews of Books I read.">Book Reviews</a></li><li><a href="../../../philosophy/" title="Writings about General Philosophy">Philosophy</a><br/><ul><li><a href="../../../the-eternal-jew/" title="The Eternal Jew - An Essay about the value of Self">The Eternal Jew</a><br/><ul><li><a href="../../../the-eternal-jew/ongoing-text.xhtml">Ongoing Text</a></li></ul></li><li><a href="../../../philosophy/guide-to-neo-tech/">Guide to Neo-Tech</a></li><li><a href="../../../philosophy/advice-for-the-young/" title="Advice for the Young (and for the not-so Young)">Advice for the Young</a></li><li><a href="../../../philosophy/closed-books-are-so-19th-century/" title="Why authors of books should make sure they are publicly available online.">Why Closed Books are So 19th Century</a></li><li><a href="../../../philosophy/putting-all-cards-on-the-table-2013/" title="A snapshot of my personal philosophy as of March 2013">Putting all the Cards on the Table (2013)</a></li><li><a href="../../../philosophy/putting-cards-on-the-table-2019-2020/" title="Update to my personal philosophy as of 2019-2022">Putting Cards on the Table (2019-2022)</a></li></ul></li><li><a href="../../../psychology/" title="Writings about Psychology">Psychology</a><br/><ul><li><a href="../../../psychology/hypomanias/" title="How I deal with the bad psychological periods that affect me">Dealing with Hypomanias</a></li><li><a href="../../../psychology/elephant-in-the-circus/" title="A (non-original) story with self-growth implications">The Elephant in the Circus</a></li><li><a href="../../../psychology/why-openly-bipolar-people-should-not-be-medicated/">Why Openly Bipolar People Should Not Be Medicated</a></li><li><a href="../../../psychology/changing-the-seldon-plan/">Changing the Seldon Plan</a></li><li><a href="../../../psychology/crossover-hypothesis-about-the-origin-of-consciousness/">Crossover hypothesis about the origin of human consciousness</a></li></ul></li><li><a href="../../../culture/">Culture, Art, and Entertainment</a><br/><ul><li><a href="../../../culture/my-real-person-fan-fiction/">Why I will continue to write my real person fiction</a></li><li><a href="../../../culture/case-for-commercial-fan-fiction/">Commercial Fanfiction as a Geeky/Hackery Imperative</a></li></ul></li><li><a href="../../../politics/" title="Essays about Politics and Philosophical Politics">Political Essays</a><br/><ul><li><a href="../../../SummerNSA/" title="The #SummerNSA / &#8220;Summerschool at the NSA&#8221; effort">#SummerNSA</a><br/><ul><li><a href="../../../SummerNSA/A-SummerNSA-Reading/" title="Summarising the #SummerNSA effort so far.">A #SummerNSA&#8217;s Reading</a></li><li><a href="../../../SummerNSA/Letter-to-SGlau-2014-10/">Letter to Summer Glau on Oct 2014</a></li><li><a href="../../../philosophy/SummerNSA-2014-09-call-for-action/">Sep 2014 Call for Action</a></li></ul></li><li><a href="../../../obj-oss/" title="Objectivism and Open Source">Objectivism and Open Source</a><br/><ul><li><a href="../../../obj-oss/rev2/" title="Revision 2 of the Objectivism and Open Source Article">Revision 2</a></li></ul></li><li><a href="../../../israel-pales/" title="A Solution to the Israeli Palestinian Conflict">Israeli-Palestinian Conflict</a></li><li><a href="../../../case-for-file-swapping/" title="Why File Swapping is Ethical and Moral and should be Legal">Case for File Swapping</a><br/><ul><li><a href="../../../case-for-file-swapping/revision-3/" title="Text of the Third Revision">Revision 3 Text</a></li></ul></li><li><a href="../../../politics/why-scientology-is-bad/" title="How I Concluded that Scientology is Bad">Why Scientology is Bad</a></li><li><a href="../../../politics/drug-legalisation/" title="Why the War on Drugs is the Real Drug Problem">Case for Drug Legalisation</a></li><li><a href="../../../politics/define-zionism/" title="What is &#8220;Zionism&#8221; really? What does anti-Israel, anti-Zionist, etc. mean?">Define &#8220;Zionism&#8221;!</a></li><li><a href="../../../politics/dispelling-myths-about-israel/">Dispelling Some Myths about Israel</a></li><li><a href="../../../../DeCSS/" title="My Opinion on the DeCSS (= DVDs&#8217; de-scrambling code) fiasco">Opinion on DeCSS</a></li></ul></li><li><a href="../../" title="Computing-related Essays and Articles">Computing</a><br/><ul><li><a href="../../when-c-is-best/" title="An Essay that Explains when the C Language should be used instead of Other Languages">When C is the Best?</a><br/><ul><li><a href="../../when-c-is-best/when-c-is-the-best.html">The Text Itself</a></li></ul></li><li><a href="../../open-source/">Open Source</a><br/><ul><li><a href="../../../foss-other-beasts/" title="Open Source, Free Software and Other Beasts">What is Open Source?</a></li><li><a href="../../open-source/how-to-start-contributing/" title="How can one start contributing to free and open-source software (FOSS)">How to Contribute to Open Source</a><br/><ul><li><a href="../../open-source/how-to-start-contributing/tos-document.html">Longer Document</a></li></ul></li><li><a href="../../open-source/gpl-bsd-and-suckerism/" title="The GPL, The BSD Licence and Being a Sucker">GPL, BSD and Suckerism</a></li><li><a href="../../open-source/linus-torvalds-bus-factor/" title="The Virtue of Multiple Committers and Overthrowing the Benevolent Dictator">The Linus Bus Factor</a></li><li><a href="../../open-source/foss-licences-wars/" title="An overview of open-source licences and some recommendations and opinions">FOSS Licences Wars</a><br/><ul><li><a href="../../open-source/foss-licences-wars/rev2/" title="An overview of open-source licences and some recommendations and opinions">FOSS Licences Wars (Revision 2)</a></li></ul></li><li><a href="../../open-source/not-trust-non-FOSS/">Why I Don&#8217;t Trust Non-FOSS</a></li></ul></li><li><a href="../../software-management/" title="Managing Software Teams, People, Projects">Software Management</a><br/><ul><li><a href="../../software-management/end-of-it-slavery/" title="The end of Info-Tech/High-Tech slavery - if you want great people to work for you, make sure they love your workplace">The End of IT Slavery</a></li><li><a href="../../software-management/perfect-workplace/" title="How to make an Info-Tech Workplace Where Programmers Will Be Happy, Want to Stay, Be Super-Productive and Efficient and will Rave About">The Perfect Info-Tech Workplace</a><br/><ul><li><a href="../../software-management/perfect-workplace/perfect-it-workplace.xhtml">Revision 1</a></li></ul></li></ul></li><li><a href="../../high-quality-software/">What Makes Software High-Quality?</a><br/><ul><li><a href="../../high-quality-software/rev2/" title="&#8220;What Makes Software High Quality?&#8221; - Revision 2">2nd Revision</a></li></ul></li><li><a href="../../optimizing-code-for-speed/">Optimising Code for Speed</a></li><li><a href="../../how-to-share-code-for-getting-help/">How to share code online for getting help with it</a></li><li><a href="../../your-programming-language-must-suck/">Why Your Programming Language Must Suck</a></li><li><a href="../../perl/" title="Articles Related to the Perl Programming Language">Perl</a><br/><ul><li><a href="../../../perl-newcomers/" title="&#8220;Usability&#8221; of the Perl Online World for Newcomers">Perl &amp; Newcomers</a></li><li><a href="../../perl/joy-of-perl/" title="An Essay about why I Like Perl so much.">The Joy of Perl</a></li><li><a href="../../perl/perl6-critique/" title="Critique of where Perl 6 is Heading">Perl 6 Critique</a></li></ul></li><li><a href="../../web/" title="Web-related Articles">Web</a><br/><ul><li><a href="../../web/create-a-great-personal-homesite/" title="Create a Great Personal Homesite">Create a Homesite</a><br/><ul><li><a href="../../web/create-a-great-personal-homesite/rev2.html">Revision 2</a></li></ul></li><li><a href="../../web/which-wiki/" title="Which Open Source Wiki Engine Works for you">Which Wiki?</a><br/><ul><li><a href="../../web/which-wiki/update-2006-07/">July 2006 Update</a></li></ul></li><li><a href="../../web/choice-of-docs-formats/" title="Coverage of the Current Choice of Document Formats">Choice of Doc Formats</a></li><li><a href="../../web/use-qmail-instead/">The &#8220;Use qmail instead&#8221; Syndrome</a></li><li><a href="../../web/homepage-vs-blog/">Homepage vs. Blog</a></li><li><a href="../../web/online-communities/" title="Reflections on Online Communities">Online Communities</a></li><li><a href="../../web/models-for-commerce/" title="Alternative Models for Web-based Commerce that Do Not Involve Intrusive Advertising">Models for Web-based Commerce</a></li><li><a href="../../web/validate-your-html/">Validate Your HTML</a></li></ul></li><li><a href="../" title="Articles about Computer Learning and Education">Education</a><br/><ul><li><a href="../opinion-on-the-technion/" title="My Opinion on Electrical Engineering Studies in the Technion">EE in the Technion</a></li><li><b>Best Introductory Language</b></li></ul></li><li><a href="../../how-to-get-help-online/" title="Where on the Internet one can get help with their (probably technical) problems">How to Get Help Online</a><br/><ul><li><a href="../../how-to-get-help-online/2013.html">2013 Edition</a></li></ul></li><li><a href="../../netiquette/" title="Articles and Links about Netiquette - the Internet Etiquette">Netiquette</a><br/><ul><li><a href="../../netiquette/email/" title="Articles and Links about E-mail netiquette.">Email</a><br/><ul><li><a href="../../netiquette/email/start-new-thread.html" title="How to start a new thread">Start New Thread</a></li><li><a href="../../netiquette/email/reply-to-list.html" title="Reply to List on a Mailing List Post">Reply to List</a></li></ul></li></ul></li><li><a href="../../../../prog-evolution/" title="My Memoirs as a Programmer">My Memoirs</a><br/><ul><li><a href="../../../../prog-evolution/pre-elpas.html" title="Memoirs as a Programmer from Elementary School, High School, etc.">Pre-Elpas</a></li><li><a href="../../../../prog-evolution/shlomif-at-elpas.html" title="Memoirs as a Programmer from Elpas, which was my first workplace as a programmer">At Elpas</a></li><li><a href="../../../../prog-evolution/shlomif-at-cortext.html" title="Describes my experiences in Cortext, a web-design shop based on UNIX, Windows, and Perl.">At Cortext</a></li></ul></li></ul></li><li><a href="../../../ideas/" title="Various Random (and Practical) Ideas I Have">Random Ideas</a><br/><ul><li><a href="../../../ideas/fortunes-mania/" title="A community site for collecting and organising fortune cookies">Fortunes Mania</a></li><li><a href="../../../ideas/unixdoc/" title="An Integrated Offline and Online Documentation Framework">Unixdoc</a></li></ul></li><li><a href="../../../Index/" title="Index to Essays and Articles I wrote.">Index to Essays</a></li><li><a href="../../../by-others/">By Others</a><br/><ul><li><a href="../../../by-others/james-carr--completely-overrated.html" title="James Carr about the anti-Muslim Cartoons">James Carr - &#8220;Completely Overrated&#8221;</a></li><li><a href="../../../by-others/perlcast-transcript--tom-limoncelli-interview/" title="Transcript of the Perlcast Interview with Tom Limoncelli">Transcript of the Perlcast Interview with Tom Limoncelli</a></li></ul></li><li><a href="../../../fan-pages/">Fan Pages</a><br/><ul><li><a href="../../../fan-pages/samantha-smith/">Samantha Smith</a></li></ul></li></ul></div></div><div id="aft_sub_menu"/><header><h1>Thoughts about the Best Introductory Language</h1></header><div class="lim_width wrap-me side_toc"><nav class="page_toc"><h2 id="toc">Table of Contents</h2><ul><li><a href="#main_intro">Introduction</a></li><li><a href="#itself">The Article Itself - 2nd Revision</a></li><li><a href="#index">Thoughts about the Best Introductory Language</a><br/><ul><li><a href="#introduction">Introduction</a></li><li><a href="#various_approaches">The Various (Wrong) Approaches to Introductory Programming Languages</a><br/><ul><li><a href="#linda_mciver_approach">Linda McIver&#8217;s Thesis Approach</a></li><li><a href="#sicp_approach">The &#8220;Structure and Interpretation of Computer Programs&#8221; Approach</a></li><li><a href="#back_to_basics_approach">The &#8220;Teach in C&#8221; Approach</a></li><li><a href="#programming_languages_make_you_write_good_code">The &#8220;First Programming Language Should Make Sure You Write Good Code&#8221; Fallacy</a></li><li><a href="#have_decent_ide">The &#8220;It Should Have a Decent IDE&#8221; Fallacy</a></li></ul></li><li><a href="#relations">Some useful relations</a><br/><ul><li><a href="#high_level_before_C">A High Level Language Should Come Before C</a></li><li><a href="#perl_or_python_before_php">Perl/Python/etc. should Come before PHP</a></li><li><a href="#perl_or_python_before_shell">Perl/Python/etc. should Come before Shell</a></li><li><a href="#C_before_assembly">C should Precede Assembly</a></li><li><a href="#first_lang_should_be_practical">The First Language should be Practical</a></li><li><a href="#localised_languages">Localised Programming Languages should be Avoided</a></li><li><a href="#java_should_be_taught_after_perl">Java Should be Taught After Perl</a></li></ul></li><li><a href="#verdict">My Verdict</a><br/><ul><li><a href="#perl_python_or_ruby">Perl, Python or Ruby</a><br/><ul><li><a href="#perl">Perl</a></li><li><a href="#python">Python</a></li><li><a href="#ruby">Ruby</a></li></ul></li><li><a href="#final_verdict">Final Verdict</a></li></ul></li><li><a href="#types_of_teaching">Some Types of Teaching</a></li><li><a href="#conclusion">Conclusion</a></li><li><a href="#other_good_food_for_thought">Other Good Food for Thought about Teaching</a><br/><ul><li><a href="#live_learn">&#8220;Live as if you were to die tomorrow. Learn as if you were to live forever.&#8221;</a></li><li><a href="#three_levels_of_learning">Three Levels of Learning</a></li><li><a href="#learn_many_languages">Learn as Many Languages as Possible</a></li><li><a href="#learning_to_read_and_enhance">Learning How to Read Code and Enhance Existing Code</a></li></ul></li><li><a href="#thanks">Thanks</a></li></ul></li><li><a href="#other_formats">Other Formats</a></li><li><a href="#coverage">Coverage</a><br/><ul><li><a href="#coverage-1st">1st Edition</a></li><li><a href="#coverage-2nd">2nd Edition</a></li></ul></li></ul></nav><section class="h2"><h2 id="main_intro">Introduction</h2><p>What makes programming languages suitable or unsuitable as introductory languages? Which languages are better learnt first and at which order? And why what the masses think is the most suitable introductory programming language is not in fact that.</p><p>This paper examines several approaches to which programming language is the best, and afterwards gives several useful relations for which languages should come first. Finally it gives a final verdict, defends it and then gives some other good food for thought.</p></section><section class="h2"><h2 id="itself">The Article Itself - 2nd Revision</h2><header><div class="center ads_top"/></header><section xml:lang="en" class="article"><div class="titlepage"><div><div><h2 id="index" class="title">Thoughts about the Best Introductory Language</h2></div><div><div class="authorgroup"><div class="author"><h2 class="author"><span class="firstname">Shlomi</span> <span class="surname">Fish</span></h2><div class="affiliation"><div class="address"><p><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<code class="email">&lt;<a class="email" href="mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>&gt;</code><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<code class="uri"><a class="uri" href="http://www.shlomifish.org/">Shlomi&#160;Fish&#8217;s&#160;Homepage</a></code><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p></div></div></div></div></div><div><p class="copyright">Copyright &#169; 2006 Shlomi Fish</p></div><div><div id="main_legal_notice" class="legalnotice"><p>This work is licensed under the <a class="link" href="http://creativecommons.org/licenses/by/2.5/">Creative Commons Attribution 2.5 License</a> (or at your option a greater version of it).</p></div></div><div><div class="revhistory"><table><tr><th colspan="3"><strong>Revision History</strong></th></tr><tr><td>Revision 1562</td><td>2006-08-04</td><td>shlomif</td></tr><tr><td colspan="3">Forked the template from a previous work and working on it.</td></tr><tr><td>Revision 1691</td><td>2007-04-10</td><td>shlomif</td></tr><tr><td colspan="3">Finished writing the document - about to release.</td></tr><tr><td>Revision 1837</td><td>2008-04-25</td><td>shlomif</td></tr><tr><td colspan="3">Many spelling or phrasing errors corrected, and with some clarifications added.</td></tr><tr><td>Revision 1838</td><td>2008-04-25</td><td>shlomif</td></tr><tr><td colspan="3">Corrected some problems in the new text. 2nd Revision.</td></tr><tr><td>Revision 2319</td><td>2009-02-27</td><td>shlomif</td></tr><tr><td colspan="3">Added missing id&#8217;s to footnotes, so they won&#8217;t be randomly generated.</td></tr><tr><td>Revision 4855</td><td>2011-06-05</td><td>shlomif</td></tr><tr><td colspan="3">Convert many ASCII single-quotes and double quotes to Unicode ones.</td></tr></table></div></div></div><hr/></div><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="introduction" class="title">Introduction</h3><h:a class="indiv_node" href="indiv-nodes/introduction.xhtml">Node Link</h:a></header><p>The purpose of this essay is to contemplate what is the best introductory programming language to teach for beginning programmers, or for a beginning programmer to learn on his own.</p><p>First, I will mention several approaches taken by other people who discussed this issue before, and try to explain why I disagree with them. Then I will propose and explain some relations (&#8220;Language A should be learned before Language B&#8221;) that are good to follow. After that, I will propose my verdict, and discuss some orthogonal alternatives. Finally, I will discuss some different types of teaching and how each should be conducted differently.</p><p>As for how I started programming myself, I should note that I learned BASIC at the age of 10 (back in 1987), and then learned C when I was 15 years old (in 1992); I later learned <a class="link" href="http://en.wikipedia.org/wiki/Visual_Basic_for_Applications">Visual Basic for Applications</a> and when I was 19 years old I was introduced to Perl and UNIX at my workplace, which was a web site creation shop (back in 1996, when the Internet started to become popular). I have later learned other languages and technologies and still do to a large extent.</p><p>One note that is in order is that you shouldn&#8217;t feel bad about having followed a different ordered in the programming languages you&#8217;ve learned. By all means, you can still learn things on your own otherwise.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="various_approaches" class="title">The Various (Wrong) Approaches to Introductory Programming Languages</h3><h:a class="indiv_node" href="indiv-nodes/various_approaches.xhtml">Node Link</h:a></header><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="linda_mciver_approach" class="title">Linda McIver&#8217;s Thesis Approach</h4><h:a class="indiv_node" href="indiv-nodes/linda_mciver_approach.xhtml">Node Link</h:a></header><p><a class="link" href="http://www.csse.monash.edu.au/~lindap/">Linda McIver</a> published along with Damian Conway a <a class="link" href="http://www.csse.monash.edu.au/~lindap/papers/SevenDeadlySins.pdf">paper titled &#8220;Seven Deadly Sins of Introductory Programming Language Design&#8221;</a> that explains the problems they found with most popular introductory programming languages. The article makes a very good read.</p><p>Later on, <a class="link" href="http://www.csse.monash.edu.au/~lindap/papers/LindaMcIverThesis.pdf">her Ph.D. thesis</a> introduced her idea of a good introductory programming language.</p><p>Now, if I had to summarise this language in one word it would be this: sexless. It&#8217;s incredibly limited, not flexible, and not fun. It has no pointers or references and instead relies on nested structures and arrays. There are two basic data types - a number and a string. The language does not have functions as first-order objects, closures, or objects and classes in the Object Oriented Programming sense. Furthermore, it has very few ways for one to express oneself. As a result implementing many algorithms would be very difficult in it.</p><p>When I program, I&#8217;m using every tool in my arsenal, and expect the language to be powerful enough to be able to translate my thoughts into code. McIver&#8217;s language is too limited and limiting, to be effective for programming in, and being planned exclusively for beginners, lacks the richness and interesting idioms that make programmers like or even love their languages.</p><p>This is a language that I won&#8217;t enjoy programming in. And I don&#8217;t believe a professor who doesn&#8217;t enjoy programming in a certain language can effectively convey it to his students, while lacking the enthusiasm and love for the tool he chose.</p><p>McIver&#8217;s approach is flawed in the sense that she is trying too hard to save the students from all possible problems they may encounter in trying to understand their introductory language. However, programming is hard to learn, and learning the first language is always difficult. Creating a &#8220;flawless&#8221; language that lacks any sex-appeal is not going to make it better, but much worse as both the professors and programmers will detest it.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="sicp_approach" class="title">The &#8220;Structure and Interpretation of Computer Programs&#8221; Approach</h4><h:a class="indiv_node" href="indiv-nodes/sicp_approach.xhtml">Node Link</h:a></header><p><a class="link" href="http://mitpress.mit.edu/sicp/">&#8220;Structure and Interpretation of Computer Programs&#8221;</a> (or SICP for short) is a classic text and course material on programming, taught at MIT and many other universities around the world. SICP uses Scheme (a minimalistic dialect of Lisp) as its exclusive language to cover many important programming and meta-programming concepts.</p><p>I have read the book in my third semester of the Technion (without doing the exercises) and later took both of the SICP courses that were given by my department. I learned a lot from the book, and while the courses did not teach me too much new, I did enjoy working on the exercises.</p><p>However, there are several problems with teaching Scheme as an introductory language. The first is that it is too impractical. Scheme does not have system primitives that more modern languages take for granted like ones for random file and directory I/O, sockets, graphics primitives, Graphical User Interface (GUI), etc. Moreover, the core language is limited and most practical code tends to become very verbose in it. For example, whereas in Perl one would write <code class="literal">$myarray[$i]++</code> to increment an array element by one, in Scheme it would be: <code class="literal">(vector-set! myarray i (1+ (vector-ref myarray i)))</code>.</p><p>Most of the SICP exercises are about number theory, recursion, and a lot of other relatively abstract stuff, and too few are about real world and exciting tasks: writing games and other demos, working with files, writing scripts and utilities, networking and working with the WWW, etc. In fact, the Scheme standards define too few useful things. Most of <a class="link" href="http://community.schemewiki.org/?scheme-faq-standards#implementations">the dazzling number of different Scheme implementations</a> all extend the language in several ways, but all have their own idea of how to do it. Compare it to Perl, Python and friends which have one main C-based implementation, or to C where the standard library is actually quite useful.</p><p>I believe an introductory language has to grow with you. When I studied BASIC, I was able to use it for programming games, graphical demonstrations and animations, scripts, and other uses. I continued to use BASIC on DOS and Windows, until I learned the much-superior Perl, which I&#8217;m using today.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="back_to_basics_approach" class="title">The &#8220;Teach in C&#8221; Approach</h4><h:a class="indiv_node" href="indiv-nodes/back_to_basics_approach.xhtml">Node Link</h:a></header><p>In his <a class="link" href="http://www.joelonsoftware.com/articles/fog0000000319.html">&#8220;Back to Basics&#8221; essay</a>, Joel Spolsky gave a case for teaching C as an introductory language instead of more high level languages. His argument is that programmers will end up writing sub-optimal code because some low-level elements of dealing with strings and arrays are abstracted away in higher-level language.</p><p>C and C++ have been popular introductory languages for teaching programming for many years now. While some schools have switched to teaching Java or a different language, C and C++ are still very popular.</p><p>However, C has one major deficiency: it&#8217;s too close to the processor to be useful. In order to perform an operation on two objects, one should allocate them first, perform the operation, and then take care of freeing both objects and the result (to say nothing of edge cases where allocating or freeing may fail.).</p><p>All this work to do something that in high level, garbage collected, languages is as simple as <code class="literal">$result = $object1 OP $object2;</code>. From my experience with Technion students, they are often get so bogged up in the technicalities of working with C instead of getting quick, dirty and useful code running.</p><p>A good introductory programming language should allow you to write a lot of useful code quickly, and not slow you down with many low-level constraints. Beginning programmers have a hard enough time learning how to translate their thoughts and intentions into working code, and solving bugs and the last thing they need is to deal with too many idiosyncrasies of the language only because it is too low-level.</p><p>Spolsky&#8217;s argument about the efficiency of some operations is wrong, because programmers who learn such languages won&#8217;t often notice the difference from such inefficient operations, due to the incredible speed of contemporary computers and the fact that their data sets are generally too small. Moreover, many instructors and exercise checkers won&#8217;t penalise for the presence of such issues in their homework.</p><p>While the efficiency of algorithms and the underlying implementation of language primitives should be stressed at a certain point, the first task of an introductory course is to make sure a programmer can learn to write code, not necessarily the most efficient one. (Not even according to asymptotic complexity). Learning how to write quick and dirty code is a mental leap that is large enough as it is.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="programming_languages_make_you_write_good_code" class="title">The &#8220;First Programming Language Should Make Sure You Write Good Code&#8221; Fallacy</h4><h:a class="indiv_node" href="indiv-nodes/programming_languages_make_you_write_good_code.xhtml">Node Link</h:a></header><p>You many times hear people saying that beginning programmers should be taught using a programming language that restricts them and forces them to write good code. Languages like Pascal, Ada, Java, and many others were designed to try to save programmers from themselves. And indeed many people believe that programmers should start learning from such a language.</p><p>What&#8217;s wrong with this approach? Several things:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>The more strict the language is, then generally the less expressive it is. Programmers like to express themselves and be able to implement algorithms using the entire power of the language. They don&#8217;t want to declare a lot of type definitions, many constraints, write a lot of syntax, or otherwise be encumbered in the way.</p><p id="haskell_expressive_power">It may actually make them think programming is loathsome or otherwise a very strict process instead of a very creative process.<a href="#ftn.haskell_expressive_power" class="footnote"><sup class="footnote">[haskell]</sup></a></p></li><li class="listitem"><p>Often, the trial and error will be good for them. Plus, even writing some disorganised, but functional code is better than the program taking them much more time to write (and more time to read and understand after writing).</p><p>I don&#8217;t expect them to become superb programming in a day. Becoming a better programmer is a process, and cannot be taught in a semester or a year of hard work.</p></li></ul></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="have_decent_ide" class="title">The &#8220;It Should Have a Decent IDE&#8221; Fallacy</h4><h:a class="indiv_node" href="indiv-nodes/have_decent_ide.xhtml">Node Link</h:a></header><p>Many education institutions reject many languages as introductory languages because they don&#8217;t have a decent <a class="link" href="http://en.wikipedia.org/wiki/Integrated_development_environment">integrated development environment</a> (or IDE for short). An IDE as useful and convenient as it is, however, is not an absolute requirement.</p><p>Programming does not happen in the IDE - it happens in the mind. Programmers should learn to write code that does something. By using the text editor (of the IDE or a standalone one) and writing text that does something, they can best learn to program for the real world.</p><p>There is a myth that programming using a text editor and a command line is too difficult for mortals. This is false because, as late as the 1980&#8217;s or 1990&#8217;s, almost all personal computers used a command-line interface (often a BASIC interpreter or DOS), and required programming using non-graphical editors, and it was still adequate for most people. (To say nothing of earlier interfaces such as <a class="link" href="http://en.wikipedia.org/wiki/Teletypewriter">Teleprinters (TTYs)</a> or punched cards). Plus, it is hard for a programmer to avoid typing code entirely.</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.haskell_expressive_power" class="footnote"><p><a href="#haskell_expressive_power" class="para"><sup class="para">[haskell] </sup></a><a class="link" href="http://lambda-the-ultimate.org/node/2194#comment-28811">A comment to the first revision of this article</a> claimed that <span class="quote">&#8220;<span class="quote">Some languages, like Haskell, derive their expressive power exactly because of the restrictions imposed</span>&#8221;</span>. My reply is that arguably languages like Lisp have the same expressive power, but obviously a more verbose syntax due to the fact they are using <a class="link" href="http://en.wikipedia.org/wiki/S-expression">S-expressions</a> and that they are lacking some functions that were added to Haskell, O&#8217;Caml and SML. <a class="link" href="http://dev.perl.org/perl6/">Perl 6</a> aims to combine more idioms from Haskell and Lisp than Perl 5 already has, yielding a language that&#8217;s generally even more succinct.</p><p>I believe that Haskell derives its expressiveness not from its strictness, but rather from its abstractions, and that this expressiveness can be duplicated to a large extent in a less strongly typed language. However, my mastery of Haskell is still somewhat superficial, and so I&#8217;m not fully qualified to comment on it.</p></div></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="relations" class="title">Some useful relations</h3><h:a class="indiv_node" href="indiv-nodes/relations.xhtml">Node Link</h:a></header><p>This section will introduce some useful relations ( &#8220;Language A should be taught before Language B&#8221;) to consider in teaching programming, and explain them. By using these relations one can more easily reach a final verdict.</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="high_level_before_C" class="title">A High Level Language Should Come Before C</h4><h:a class="indiv_node" href="indiv-nodes/high_level_before_C.xhtml">Node Link</h:a></header><p>C should not be taught as a first programming language from the reasons I have mentioned above. By all means, one should use a more high level languages which supports Managed programming, and other nice high level constructs. Languages like Perl, Python, Ruby and to a lesser extent Java and .NET are much better than C as introductory languages.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="perl_or_python_before_php" class="title">Perl/Python/etc. should Come before PHP</h4><h:a class="indiv_node" href="indiv-nodes/perl_or_python_before_php.xhtml">Node Link</h:a></header><p>Some people believe that PHP is a suitable introductory language. However, PHP has several major problems: lack of good abstraction mechanisms, many inconsistencies, many functions to do the same thing, and many nuances to its use. People who learn PHP right away, tend to write very bad (and sometimes very dangerous) code in it, and are not well-aware of its pitfalls.</p><p>PHP is a fine language for the web and for other uses, especially because its implementation makes deployment of some large-scale web applications easier. However, the other languages in the so-called &#8220;dynamic&#8221;, &#8220;agile&#8221;, or &#8220;scripting&#8221; class of languages are not harder to learn, and less problematic. So they should be taught first instead.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="perl_or_python_before_shell" class="title">Perl/Python/etc. should Come before Shell</h4><h:a class="indiv_node" href="indiv-nodes/perl_or_python_before_shell.xhtml">Node Link</h:a></header><p>Some people believe that the first language a UNIX user should learn is a good shell (such as <a class="link" href="http://www.gnu.org/software/bash/">GNU Bash</a> or <a class="link" href="http://www.zsh.org/">zsh</a>). However, Shell has some issues. The first is that the mentality of the UNIX Shell is different from the mentality of conventional programming languages, and causes native shell programmers to be less capable of adapting to a different language, as well as writing sub-optimal code in shell.</p><p>The second is that in traditional shell, some operations are not as efficient as they should be. While more modern variants have introduced arrays and string-wise dictionaries, they are still an afterthought. For these reasons, shell is not recommended to learn before a dynamic language.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="C_before_assembly" class="title">C should Precede Assembly</h4><h:a class="indiv_node" href="indiv-nodes/C_before_assembly.xhtml">Node Link</h:a></header><p>It is <a class="link" href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">certainly a good idea to learn Assembly language</a>, preferably of several different processor architectures. However, C should be learnt first.</p><p>The reason for that is that people who dive right into Assembly, tend to write sub-optimal code because they don&#8217;t understand well how this code is executed by the processor and how to compile it. This is while programmers who&#8217;ve learned C are better equipped to understand how Assembly code works, because it is somewhat more convenient yet still very close to Assembly.</p><p>A friend of mine reported that in his workplace, where they write Assembly code for various Digital Signal Processors (DSPs) some of the native Assembly programmers order their instructions in ways that are executed inefficiently because of the special processor pipeline. He then told me that C programmers who learn Assembly make better Assembly programmers.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="first_lang_should_be_practical" class="title">The First Language should be Practical</h4><h:a class="indiv_node" href="indiv-nodes/first_lang_should_be_practical.xhtml">Node Link</h:a></header><p>A good first programming language should be practical and should grow up with you. I can tell from my experiences with the various BASICs, which were the first languages I learnt, that BASIC was fun because it was useful. Using BASIC on the old Intel-based computers, one could write games, graphical demos, text processing and command execution scripts, and even serious applications. While BASIC is in today&#8217;s standards a very limited language that should no longer be taught as a first language, I still fondly remember it as being a lot of fun. I even continued using BASIC after I learned C and what was then C++, because it was quicker and more convenient. (I no longer do, because I now feel that Perl is superior to BASIC in every way, and that&#8217;s what I&#8217;m using now.)</p><p>On the other hand, Scheme as in SICP is an awful choice for an introductory programming language, because it feels very impractical. Writing quick and dirty code to do a lot of things in Scheme is very verbose, and plus, the core standard lacks many primitives for common <a class="link" href="http://en.wikipedia.org/wiki/POSIX">POSIX</a> operations (like random file I/O, directories, sockets, etc.) much less useful APIs. While some Scheme implementations provide extensions to the language, they do so in different incompatible ways.</p><p>Different people I talked to, agreed with me that &#8220;You cannot do anything with Scheme&#8221;. Compare it to languages such as C and C++, Perl/Python/Tcl/Ruby/PHP, Java/.NET, etc. that feel very practical, and you&#8217;ll see why hardly any industrial-strength code is written in Scheme.</p><p>Teaching a language just for teaching programming with, is sub-optimal because the students cannot take this language with them and perform real-world tasks with it. They will have less motivation to experiment on their own, and to remember it for long.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="localised_languages" class="title">Localised Programming Languages should be Avoided</h4><h:a class="indiv_node" href="indiv-nodes/localised_languages.xhtml">Node Link</h:a></header><p>The Wikipedia has an (incomplete) <a class="link" href="http://en.wikipedia.org/wiki/Category:Non-English-based_programming_languages">list of non-English based programming languages</a>, that were created at some time. What these languages try to do is make sure young children or other people who did not master the English Alphabet and vocabulary well can start learning programming without knowing English first.</p><p>I see several problems with this approach. One is that it is important that children will be taught English starting from an early age - as early as possible. This is because English, being the international language, is becoming more and more important for every one to learn. Tender children who are talked to in several languages, will quickly master them, without confusing them. This will save them a lot of frustration later. (By all means if one happens to know other languages, he should talk to his children using them too, but that is beside the main point.)</p><p>Knowledge of English is more important than knowing how to program. So it is a good idea that when teaching programming to teach English first as a necessary pre-requisite.</p><p>The other problem I see is that such localised programming languages feel unnatural and wrong. English has the richest technical vocabulary of any other language, and some terms in English are impossible to translate to other languages. And yet another is that such languages tend to be very ad-hoc and incomplete. Finally, code that is written in them cannot be understood by programmers who don&#8217;t know this language.</p><p id="globalisation">So, to sum up, instead of starting with a localised programming language, teach your students some basic English first. It might take longer, but will save more time and frustration later on. Plus, programming is a great way to expand one&#8217;s mastery of English, especially today when the Internet is so prevalent.<a href="#ftn.globalisation" class="footnote"><sup class="footnote">[globalisation]</sup></a></p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="java_should_be_taught_after_perl" class="title">Java Should be Taught After Perl</h4><h:a class="indiv_node" href="indiv-nodes/java_should_be_taught_after_perl.xhtml">Node Link</h:a></header><p>Joel Spolsky wrote an essay titled <a class="link" href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">&#8220;The Perils of JavaSchools&#8221;</a> where he argued that teaching Java in Computer Science curricula is inferior to teaching C and Scheme, which was what he learned. The article is wrong on many points, but it highlights some of the problems with Java.</p><p>Java is too verbose. Some people may argue that this can be solved by using a proper IDE, but as <a class="link" href="http://www.paulgraham.com/popular.html">Paul Graham explains</a>, verbose code also has the &#8220;the cost of reading it, and the cost of the space it takes up on your screen.&#8221;.</p><p>Moreover, Java code tend to be very monotonous. Almost all Java code looks the same, and feels boring.</p><p><a class="link" href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Steve Yegge&#8217;s very funny article &#8220;Execution in the Kingdom of Nouns&#8221;</a> illustrates another problem with Java. Everything has to be a noun, with no verbs or even the many keywords which Perl 5 is infamous for but which Perl programmers love. And instead of having some Perl 5-like operators for converting between data structures, you have a hideously long casting lines.</p><p>Java was supposed to be kept simple, and many important concepts like closures, multiple-inheritance, defining methods at runtime (a la Smalltalk), runtime code evaluation (the Lisp-derived &#8220;eval&#8221; operator, which is now common in most dynamic languages), operator overloading, and many other elements had been kept out of it. As such it turned out to be very unusable. Java 1.5/5.0 introduced many drastic enhancements, but not enough proper abstractions. As a result, Java is now bloated, but talented programmers still normally find writing code in Perl, Python and friends more natural.</p><p>Paul Graham&#8217;s essay <a class="link" href="http://www.paulgraham.com/javacover.html">Java&#8217;s Cover</a>, which he wrote to explain why he decided not to learn Java is very instructive. I read Graham&#8217;s article, some time after it has been written and felt it reflected my feelings about the language. Back when Java started to become hyped , I had ended up learning Java to see what the hype was about and to write some browser applets. While having felt that I have truly understood what the essence of references in Perl 5 was, only after learning Java, I still felt that Java was too over-rated.</p><p>Perhaps I&#8217;m getting too carried away in criticising Java. My point is that, as Joel Spolsky indicated in his &#8220;JavaSchools&#8221; essay, teaching Java as the first language, makes many of the people who have learned it airheads, who cannot think outside the limited constraints that it imposes on the programmer. Teaching an expressive and rich <a class="link" href="http://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic language</a> such as Perl or Ruby instead, will not exhibit this problem, regardless of what Joel says, as these languages constantly require a programmer to think outside the box, and introduce the programmer to many different (often built-in) patterns and paradigms.</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.globalisation" class="footnote"><p><a href="#globalisation" class="para"><sup class="para">[globalisation] </sup></a>A few people who read this article claimed I was advocating globalisation. However, consider what Eric Raymond writes in <a class="link" href="http://catb.org/~esr/faqs/hacker-howto.html">&#8220;How to Become a Hacker&#8221;</a>:</p><div class="blockquote"><blockquote class="blockquote"><p>4. If you don&#8217;t have functional English, learn it.</p><p>As an American and native English-speaker myself, I have previously been reluctant to suggest this, lest it be taken as a sort of cultural imperialism. But several native speakers of other languages have urged me to point out that English is the working language of the hacker culture and the Internet, and that you will need to know it to function in the hacker community.</p></blockquote></div><p>One should note that the proliferation of English today is not the first time that there happened to be a <a class="link" href="http://en.wikipedia.org/wiki/Lingua_franca">Lingua franca</a> in the world or a limited part of it. I also feel that having one spoken language that everyone of importance is familiar with (although possibly not so well) is better than not having any good common way of communication, and thus was shown to be inevitable times and again in history.</p></div></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="verdict" class="title">My Verdict</h3><h:a class="indiv_node" href="indiv-nodes/verdict.xhtml">Node Link</h:a></header><p>According to these constraints one can conclude that one should start learning how to program from a high-level, dynamic and practical language such as Perl, Python or Ruby.</p><p>Eric Raymond recommends this in his excellent <a class="link" href="http://catb.org/~esr/faqs/hacker-howto.html">&#8220;How to become a Hacker&#8221; document</a>. He suggests one should start with XHTML, which while not being a programming language but rather a formatting language will still introduce many programming idioms and disciplines as well as prove useful later on.</p><p>After XHTML, Raymond recommends one to learn Python. However, I&#8217;m not sure whether Perl 5 or Ruby will not be as suitable as Python, or more. Unfortunately, I cannot reach a conclusion here, but rather give some of my thoughts on each three languages.</p><p>(If I need to teach programming, I&#8217;ll start with Perl because I know it very well, and like it a lot. However, programmers who are well versed in Python or Ruby, may wish to teach them instead.)</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="perl_python_or_ruby" class="title">Perl, Python or Ruby</h4><h:a class="indiv_node" href="indiv-nodes/perl_python_or_ruby.xhtml">Node Link</h:a></header><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="perl" class="title">Perl</h5><h:a class="indiv_node" href="indiv-nodes/perl.xhtml">Node Link</h:a></header><p>The core Perl language is huge. That may be a good or a bad thing for teaching programming in. The Perl language can be usable by learning only a small subset of the language. However, as budding Perl programmers learn more they tend to diverge in the what they know, and use different subsets, which makes understanding code of peers with different background (much less experts) more problematic. This problem is naturally not limited to Perl 5, and given good, searchable documentation can be made less substantial, but is still a pedagogical hurdle.</p><p id="esperanto_footnote">Perl is very expressive. I believe programmers will appreciate its &#8220;There is more than one way to do it&#8221; philosophy. A correspondent once told me he&#8217;d prefer to teach beginners Perl instead of C, similarly to the fact that he&#8217;d prefer to teach English over Esperanto, because beginners would prefer a language that allows them to express themselves. <a href="#ftn.esperanto_footnote" class="footnote"><sup class="footnote">[Esperanto]</sup></a></p><p>Historically, Perl had a lack of good online documentation for beginners, and <a class="link" href="http://www.shlomifish.org/philosophy/perl-newcomers/">other problems with the treatment of newcomers</a>, but this has improved lately.</p><p id="rethinking_cpan">Perl has a rich (and so far unmatched) collection of re-usable modules that provide functionality called <a class="link" href="http://en.wikipedia.org/wiki/CPAN">CPAN - the Comprehensive Perl Archive Network</a>. Uploads to CPAN are not moderated (on purpose) and therefore it is sometimes hard to find a suitable CPAN module out of the many bad or unsuitable ones (if there actually is one available). <a href="#ftn.rethinking_cpan" class="footnote"><sup class="footnote">[rethinking-cpan]</sup></a> They may prove useful in teaching programming in Perl.</p><p>Perl has a rich and active culture surrounding it, including many diversions as obfuscated code, <a class="link" href="http://perlgolf.sourceforge.net/">golf challenges</a>, riddles, many specialised mailing lists, Local Perl Mongers groups, and conferences.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="python" class="title">Python</h5><h:a class="indiv_node" href="indiv-nodes/python.xhtml">Node Link</h:a></header><p>Python has a small core language and it tries to be elegant. It has an excellent online documentation, and many introductory books for it are available online. The online Python community has too much elitism, and tends to deprecate Perl a lot, for some reason. I am not blaming anyone in particular, but this tendency is present to some extent by some of the greatest names in the Python world, and by some Pythoneers I personally know.</p><p>People who know Perl very well, can learn Python with fewer mental blocks than the other way around. This is in due to the fact Perl is richer, and supports more paradigms. A Perl programmer told me he was able to start working on a Python program right after starting to edit it using his editor, and it worked, after some research.</p><p>Python&#8217;s philosophy is &#8220;There&#8217;s one good way to do it.&#8221;. It doesn&#8217;t mean that there aren&#8217;t other ways, but there is one commonly acceptable way to write most code. Whether this is a good thing or not for an introductory language is debatable.</p><p>If PHP is the new Visual Basic, and Java is the new COBOL, then Python is the new Pascal. (Although, all these languages are better than their previous ones). In a way teaching Python as a first language, like teaching Pascal, makes a programmer used to limited paradigms and one strict way of doing things. (like teaching Esperanto instead of English). As a result, trying to learn other diverse languages is becoming more difficult.</p><p>If you&#8217;ve learned Python as your mother language, you should take the mental leap and learn Perl, which is the Tower of Babel of languages, and also has many DWIMmeries (&#8220;Do-What-I-Mean&#8221;&#8217;s) and other expressiveness. (Of course, a Perl programmer should also learn Python due to its elegance, and the fact it is extensively used and useful.)</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h5 id="ruby" class="title">Ruby</h5><h:a class="indiv_node" href="indiv-nodes/ruby.xhtml">Node Link</h:a></header><p>Before I discuss Ruby a word of warning: I don&#8217;t know it very well. So far all the limited tasks I tried to accomplish using it worked well after some trial and error, but I still did not take the time to thoroughly study it.</p><p>Ruby was written after its creator was unhappy to some extent with both Perl (possibly 4 at the time) and Python, and so he created a language that tried to combine the best elements of Smalltalk, Perl and Python. Ruby aims to be elegant and consistent, yet still very expressive and shares Perl&#8217;s &#8220;There&#8217;s more than one way to do it&#8221; philosophy.</p><p>As of version 1.x, Ruby does not support multi-threaded programming, has poor support for Unicode, and is much slower than Perl or Python. Some of these problems will be addressed in Ruby 2.x.</p><p>The worst problem with Ruby, however, is the lack of good documentation. Ruby has <a class="link" href="http://www.rubycentral.com/book/">one old edition of the &#8220;Programming Ruby&#8221; book</a> available online, and that&#8217;s it. Furthermore, this book is intended for absolute beginners and will be too slow paced for people with extensive experience in similar languages.</p><p>All the other books from the Pragmatic Programmer series are not available online (including the new editions of the &#8220;Programming Ruby&#8221; book). What many people end up doing is downloading them from &#8220;warez&#8221; sites or from Peer-to-Peer networks, but I wouldn&#8217;t encourage professors to tell their students to do that.</p><p>I recall trying to find out how to tag methods in Ruby, in a similar way to Perl&#8217;s method or variable attributes. Google was no help and no one on Freenode on #ruby-lang told me and I asked several times, and people tried to research it. Eventually, someone I knew on #perl was able to give me the answer. He then claimed that many of the slightly more unconventional, but useful, tricks in Ruby were completely undocumented.</p><p>As such, one may still encounter problems teaching Ruby as an introductory language. If these problems are remedied by the Ruby community, with some amount of work and effort, then this may be better.</p></section></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="final_verdict" class="title">Final Verdict</h4><h:a class="indiv_node" href="indiv-nodes/final_verdict.xhtml">Node Link</h:a></header><p>All things considered, I&#8217;d say that Perl is the best choice now, as Python is too strict and unexpressive, and Ruby is documented in an extremely inadequate way. Again, any of the three languages would be a fine choice, and all of them should be learned by any programmer who is worth his weight in salt.</p><p id="consistency_in_prog_langs_footnote">Note that other than the main players in the dynamic language arena, there is the new crop of such languages: <a class="link" href="http://www.lua.org/">Lua</a>, <a class="link" href="http://www.iolanguage.com/">Io</a>, <a class="link" href="http://www.digitalmars.com/d/">The D Programming Language</a>, and others. These languages may be more suitable in some respects, but on the other hand, may not yet have the brain-share, comprehensiveness (especially as far as APIs are concerned), usability, richness or &#8220;sex-appeal&#8221; <a href="#ftn.consistency_in_prog_langs_footnote" class="footnote"><sup class="footnote">[consistency]</sup></a>.</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.esperanto_footnote" class="footnote"><p><a href="#esperanto_footnote" class="para"><sup class="para">[Esperanto] </sup></a>Several people contacted me saying I have misrepresented Esperanto here. I should note that I&#8217;m quoting someone else, and I admit that I don&#8217;t know Esperanto well enough to be sure if it indeed suffers from many problems attributed to artificial languages.</p><p>The point is not to dismiss Esperanto, but rather to say that many people appreciate expressibility, and some of them also appreciate irregularity (or even inconsistency) in their spoken or programming languages, as it makes life more interesting.</p></div><div id="ftn.rethinking_cpan" class="footnote"><p><a href="#rethinking_cpan" class="para"><sup class="para">[rethinking-cpan] </sup></a>As of April, 2008, there is <a class="link" href="http://perlbuzz.com/2008/04/rethinking-the-interface-to-cpan.html">an effort under-way to revamp the CPAN experience</a>. The author of these lines is heavily involved with it, so he may be a bit biased. Plus, the effort is still in its infancy.</p></div><div id="ftn.consistency_in_prog_langs_footnote" class="footnote"><p><a href="#consistency_in_prog_langs_footnote" class="para"><sup class="para">[consistency] </sup></a>Some people assume that the more consistent a language is the better. However, just as most people prefer expressive and inconsistent natural human languages like English, many of them would prefer their programming language to have some inconsistencies, Do-what-I-mean-erries, gotchas, etc. In Perl 5&#8217;s case it is well known that these make the language more expressive and <a class="link" href="http://www.paulgraham.com/power.html">succinct</a> in the hands of a competent programmer.</p></div></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="types_of_teaching" class="title">Some Types of Teaching</h3><h:a class="indiv_node" href="indiv-nodes/types_of_teaching.xhtml">Node Link</h:a></header><p>There are several different types of teaching programming to laymen. This section aims to cover the most important ones and what needs to be considered when they are done.</p><p>The first type I&#8217;ll discuss is a self-teaching enthusiast who is trying to teach himself programming, perhaps with some help from his friends or people he is interacting with on the Internet. Such an enthusiast usually has a lot of motivation to learn, but on the other hand, will probably not put up with a material that bores him or seems trivial.</p><p>The second type is a programmer who tries to teach a child or a teenager programming. Such youngsters are often mostly motivated by things that seem fun to them: games, demos, drawing pretty pictures programmatically, etc. They will have little nerve for a tedious programming language such as C, in which every task takes a boatload of code.</p><p>A different type of pedagogy altogether is introducing programming to students in university. Such students are older, have more mathematical background, and will find other things aside from games enjoyable. On the other hand, they tend to have less willingness to experiment on their own, or to play with the computer. They expect to learn programming so they can either go on with their degree, or use it to learn the rest of their degree.</p><p>When people teach programming in the so-called K-12 school (i.e. pre-college or university), then such students will have less mathematical background than their college counterparts, and may find learning programming (as they find learning most everything) a burden. On the other hand, they tend to be brighter and more curious.</p><p>The final type of teaching is in training courses. It is known that such people often have to be spoon-fed the material. Plus, they may not be as bright as those who were accepted into high-class universities or colleges.</p><p>How does this influence the choice of the introductory language? It probably doesn&#8217;t. However, it influences the way the language should be taught and which parts of it should be taught first.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="conclusion" class="title">Conclusion</h3><h:a class="indiv_node" href="indiv-nodes/conclusion.xhtml">Node Link</h:a></header><p>I talked with a few people on the IRC about it and some of them told me something along the lines of &#8220;What makes you think that you know better than all the universities and colleges (and other schools) that are now teaching Java?&#8221;. Well, this is the majority must be right fallacy:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem"><p>Everybody thinks that the Earth is flat (or the Sun revolves around it) so it must be true</p></li><li class="listitem"><p>Everybody thinks that <a class="link" href="http://www.shlomifish.org/philosophy/politics/drug-legalisation/">drugs should be illegal</a> so it must be true.</p></li></ol></div><p>Etc. I can think of many other cases where a common consensus, even among experts turned out to be false. But I&#8217;ll still explain a bit.</p><p>Universities have tended to teach the &#8220;hottest&#8221; language on the market. They used to teach Assembler. They used to teach COBOL (an awful language by all means, and one which proved to be a dead-end in language design). They taught Fortran and PL/I. They taught Pascal. They taught C and C++. And now they teach Java. I believe none of these languages were suitable as an introductory programming language, but they were taught because they were used in the industry.</p><p>During the course of IT education, several languages need to be studied - at least one dynamic language such as Perl, Python or Ruby ; C; an assembly language; Lisp (Scheme, Common Lisp or perhaps now <a class="link" href="http://www.paulgraham.com/arc.html">Arc</a>); Haskell, O&#8217;Caml or SML; and probably some specialised languages when they are appropriate. But the first language need not be what is the most hyped language in the industry, or even what most the rest of the studies will be conducted in.</p><p>From my <a class="link" href="http://www.shlomifish.org/philosophy/computers/education/opinion-on-the-technion/">impression of the Technion</a>, the institute as a whole believes that students can effectively write all their code in C. In some courses, the choice of C++ and Java are given, but these languages are not effectively taught. Most students, during their studies, had not been exposed to such advanced paradigms as regular expressions, dynamic-typing, Perl 5-like nested data structures, run time evaluation, closures and dynamic functions, and others that are considered common knowledge among developers of dynamic languages, and any software development enthusiast who is worth his weight in salt.</p><p>So my opinion still remains: Perl, Python or Ruby are the best languages for introducing non-programmers to programming, while Perl is the best, and Python is probably still the worst of the three. However, note that any decent programming training will introduce his developers to more than one language, and a prospective programmer should not worry if he started out with a language that I consider sub-optimal. With good ambition and motivation and with the right attitude (&#8220;I know that I do not know&#8221;), one can become a better and better programmer regardless of his initial background.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="other_good_food_for_thought" class="title">Other Good Food for Thought about Teaching</h3><h:a class="indiv_node" href="indiv-nodes/other_good_food_for_thought.xhtml">Node Link</h:a></header><p>This section will bring other good for thought about teaching.</p><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="live_learn" class="title">&#8220;Live as if you were to die tomorrow. Learn as if you were to live forever.&#8221;</h4><h:a class="indiv_node" href="indiv-nodes/live_learn.xhtml">Node Link</h:a></header><p>This is a quote attributed to <a class="link" href="http://en.wikipedia.org/wiki/Mahatma_Gandhi">Gandhi</a>. The &#8220;Learn like you were going to live forever&#8221; part is not widely understood by many workers. Many programmers believe that their knowledge of a few programming languages is enough, and that it is not necessary that they learn completely different ones.</p><p>It is well known that learning a new and different programming language will make you a better programmer also in the original languages you know. Programmers who don&#8217;t learn new programming languages eventually stagnate. They are bounded by their limited knowledge, and cannot think outside their box. They deserve the stagnation they receive due to this bad attitude, and mental laziness.</p><p>If you want to grow as a programmer, make sure you keep studying new languages and technologies. Not only they may turn out to be useful, but they&#8217;ll also make you think in completely different ways.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="three_levels_of_learning" class="title">Three Levels of Learning</h4><h:a class="indiv_node" href="indiv-nodes/three_levels_of_learning.xhtml">Node Link</h:a></header><p>Rabbi Hanina used to say &#8220;I learned a lot from my teachers, and from my friends more than my teachers, and from my pupils the most.&#8221; I believe this means that there are in fact three levels of learning:</p><div class="orderedlist"><ol class="orderedlist"><li class="listitem"><p><span class="bold"><strong>Level 1 - Learning</strong></span> - this is a passive learning of the material, where one inputs the material.</p></li><li class="listitem"><p><span class="bold"><strong>Level 2 - Experiencing</strong></span> - in this level you work with the material you learned, and try to implement what you&#8217;ve learned and integrate it. This requires more understanding, because you have to work with the material.</p></li><li class="listitem"><p><span class="bold"><strong>Level 3 - Teaching</strong></span> - in this level you teach the material to someone else. This requires the most understanding because you need to organise it properly and convey it to someone else.</p></li></ol></div><p>Perhaps there&#8217;s a fourth level - <span class="bold"><strong>Science</strong></span> in which the knowledge is expanded. However, this implies that to truly understand the material, one needs to experiment with it (preferably in production) and better yet teach it to someone else.</p><p id="those_who_can_footnote">The old adage &#8220;He who can - does. He who cannot - teaches.&#8221; which was <a class="link" href="http://en.wikiquote.org/wiki/George_Bernard_Shaw">said by George Bernard Shaw</a> is amusing, but simply not true, as I&#8217;ve demonstrated here. Being a great teacher is much more difficult than being a great doer, and is much more enlightening. <a href="#ftn.those_who_can_footnote" class="footnote"><sup class="footnote">[those_who_can]</sup></a></p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="learn_many_languages" class="title">Learn as Many Languages as Possible</h4><h:a class="indiv_node" href="indiv-nodes/learn_many_languages.xhtml">Node Link</h:a></header><p>Learning one computer language is not enough. Knowledge of only one computer language or a few cripples the mind and causes the brain to run in circles. Different programming languages introduce different insights: various easier ways to do certain things, different restrictions , different syntax, different APIs, different ways of doing things, different high-level mechanisms (or lack of them). All of this gives different understandings of how to program in any language.</p><p>Many people believe that their limited knowledge is adequate. Java programmers are especially notorious for being opposed to the ideas of them having to learn different languages. The <a class="link" href="http://www.amazon.com/exec/obidos/ASIN/020161622X/ref=nosim/shlomifishhom-20">Pragmatic Programmer book</a> says a programmer should learn a new computer language at least every year, and I tend to agree with it. I compiled <a class="link" href="http://www.shlomifish.org/philosophy/philosophy/advice-for-the-young/#technologies_to_learn">a tentative list of the technologies I found the most enlightening</a>, and I recommend programmers to learn at least all of them.</p></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="learning_to_read_and_enhance" class="title">Learning How to Read Code and Enhance Existing Code</h4><h:a class="indiv_node" href="indiv-nodes/learning_to_read_and_enhance.xhtml">Node Link</h:a></header><p>At present, universities and other spend most time teaching programmers how to write code. However, most of what programmers have to do for work or for pro-bono work (like open source projects) is to read code, and to enhance existing code.</p><p><a class="link" href="http://www.joelonsoftware.com/">Joel Spolsky (&#8220;Joel on Software&#8221;)</a> gave the following &#8220;cardinal rule of programming&#8221; in his famous <a class="link" href="http://www.joelonsoftware.com/articles/fog0000000069.html">&#8220;Things you must never do, part I&#8221; essay</a>:</p><div class="blockquote"><blockquote class="blockquote"><p>It&#8217;s harder to read code than to write it.</p></blockquote></div><p>My friends and I later <a class="link" href="http://tech.groups.yahoo.com/group/hackers-il/message/3576">discussed this topic in the Hackers-IL mailing list</a>. Even if code is given for reading in university, it is usually extremely well-written, highly organised, highly legible, code, rather than the real code that programmers are likely to encounter in the wild.</p><p>It&#8217;s a shame most of the code students write as part of their curriculum is only for themselves, and ends up being of little value to the world at large. Even if some code ends up as an open source project, it is usually too incomplete and lacks essential functionality or correctness to be of any use in the real world.</p><p>As Joel points out in the article, most programmers end up saying that the code they are working on is horrible and that they wish to completely rewrite it if they have the chance, instead of <a class="link" href="http://www.refactoring.com/">refactoring</a> it to make it better.</p><p>Furthermore, since reading code is harder than writing it, then it makes sense that programmers who are good at reading (or refactoring code or enhancing it) are much better programmers, than programmers who are only good at writing new code. I wish I had a dollar for every time I heard of someone trying to rewrite an existing functional and relatively bug-free codebase from scratch, just because this codebase was deemed of too little quality, and that afterwards this rewrite ended up at nothing. These cases practically dwarf the number of successful rewrites I recall.</p><p>To sum up, it will be a good idea to teach first-time programmers how to read real-world code, or the code written by their co-students, and how to enhance it by extending it, and cleaning it up.</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.those_who_can_footnote" class="footnote"><p><a href="#those_who_can_footnote" class="para"><sup class="para">[those_who_can] </sup></a>What is true, in my opinion. is that &#8220;Those who can - do. Those who can&#8217;t - complain.&#8221; However, often people who can and do, still complain. I recall this quote being attributed to <a class="link" href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds </a>, but it <a class="link" href="http://shlomif.livejournal.com/39215.html">predates him</a>.</p></div></div></section><section class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h3 id="thanks" class="title">Thanks</h3><h:a class="indiv_node" href="indiv-nodes/thanks.xhtml">Node Link</h:a></header><p>Thanks to Pete_I on Freenode, <a class="link" href="http://www.zak.co.il/">Omer Zak</a>, <a class="link" href="http://www.wgz.org/chromatic/">chromatic</a>, Jonathan Scott Duff, Sagiv Barhoom and others for reviewing early drafts of this essay and giving some editorial assistance.</p></section></section><footer/></section><section class="docbook_formats h2"><h2 id="other_formats">Other Formats</h2><ul><li><p><a href="introductory-language/">Read Online</a> - one page per section.</p></li><li><p><a href="introductory-language.epub">EPUB</a>.</p></li><li><p><a href="introductory-language.xml">Original DocBook 5/XML</a></p></li><li><p><a href="introductory-language.pdf">PDF (Acrobat Reader)</a></p></li></ul></section><section class="h2"><h2 id="coverage">Coverage</h2><h3 id="coverage-1st">1st Edition</h3><ul><li><a href="http://www.osnews.com/comment.php?news_id=17670">OSNews.com (in English)</a></li><li><a href="http://community.livejournal.com/shlomif_tech/444.html">shlomif-tech Live Journal community</a>. (read and post comments)</li><li><a href="http://www.whatsup.org.il/modules.php?op=modload&amp;name=News&amp;file=article&amp;sid=5653">Whatsup.org.il Coverage (in Hebrew)</a></li><li><a href="http://lambda-the-ultimate.org/node/2194">Coverage in the Lambda the Ultimate forums.</a></li><li><a href="http://www.dzone.com/rsslinks/thoughts_about_the_best_introductory_language.html">Coverage in dzone.com (in English)</a></li><li><a href="http://www.networksecuritytech.com/viewtopic.php?p=26897">Network Security Tech Forum</a></li></ul><h3 id="coverage-2nd">2nd Edition</h3><ul><li><a href="http://lambda-the-ultimate.org/node/2788">Lambda the Ultimate Forums</a></li></ul></section><script>shlomif_load_nav("philosophy/computers/education/introductory-language/");</script><p class="share"><a href="http://www.addtoany.com/share_save?linkurl=https%3A%2F%2Fwww.shlomifish.org%2Fphilosophy%2Fcomputers%2Feducation%2Fintroductory-language%2F&amp;linkname="><img src="../../../../images/share_save_171_16.png" width="171" height="16" class="bless" alt="Share/Bookmark"/></a><br/></p></div></main><nav class="navbar" id="navbar"><div class="center"><a href="../../../../" title="Shlomi Fish&#8217;s Homepage"><img src="../../../../images/evilphish-svg.min.svg" alt="EvilPHish by Illiad" class="highlight" style="border:0;margin-bottom:.5em"/></a></div><ul class="nav_links"><li><a href="../opinion-on-the-technion/" title="Previous Page (Alt+P)" accesskey="p"><img src="../../../../images/arrow-2-left.png" alt="Previous Page" class="bless"/></a></li><li><a href="../" title="Up in the Site (Alt+U)" accesskey="u"><img src="../../../../images/arrow-2-up.png" alt="Up in the Site" class="bless"/></a></li><li><a href="../../how-to-get-help-online/" title="Next Page (Alt+N)" accesskey="n"><img src="../../../../images/arrow-2-right.png" alt="Next Page" class="bless"/></a></li></ul><div id="nav_menu"><ul><li><a href="../../../../">Shlomi Fish&#8217;s Homepage</a></li><li class="open"><a href="../../../../me/">About Myself</a><br/><ul><li><a href="../../../../personal.html" title="A Short Biography of Myself">Bio</a><br/><ul><li><a href="../../../../me/intros/" title="Introductions of Me to Various Forums">Intros</a><br/><ul><li><a href="../../../../me/intros/writers/" title="My Intro to the MIT Writers Mailing List">MIT Writers</a></li></ul></li></ul></li><li><a href="../../../../me/contact-me/" title="How to Contact Me">Contact Me</a></li><li><a href="../../../../me/rindolf/" title="The history and etymology of &#8220;Rindolf&#8221;, Shlomi Fish&#8217;s Nickname">&#8220;Rindolf&#8221; - my nickname</a><br/><ul><li><a href="../../../../me/rindolfism/" title="Shlomi Fish&#8217;s Personal, dynamic, open / free / geeky / share / hacky philosophy">&#8220;Rindolfism&#8221; - my personal, dynamic, philosophy</a></li></ul></li><li><a href="../../../../me/resumes/">My R&#233;sum&#233;s</a><br/><ul><li><a href="../../../../me/resumes/Shlomi-Fish-Resume-as-Software-Dev.html">R&#233;sum&#233; as a Software Dev</a></li><li><a href="../../../../SFresume.html">English R&#233;sum&#233;</a></li><li><a href="../../../../SFresume_detailed.html">Detailed English R&#233;sum&#233;</a></li><li><a href="../../../../me/resumes/Shlomi-Fish-Resume-as-Writer-Entertainer.html">R&#233;sum&#233; as a Writer and Entertainer</a></li></ul></li><li><a href="../../../../me/business-card/">My Business Card</a></li><li><a href="../../../../me/personal-ad.html" title="My Personal Ad: what I&#8217;m looking for in a prospective girlfriend and what I can add to the relationship.">Personal Ad</a></li><li><a href="../../../../me/blogs/" title="Links to my online journals.">My Weblogs</a></li><li><a href="../../../../me/interviews/" title="Interviews that were conducted with me">Interviews</a><br/><ul><li><a href="../../../../me/interviews/reddit-AMA/">Reddit &#8220;Ask Me Anything&#8221;</a></li></ul></li><li><a href="../../../../me/relicensing-my-entire-portfolio-under-cc-by/" title="Offer to relicense my whole body of creative works under CC-by if I get enough money">Relicensing my Creative Works Portfolio</a></li></ul></li><li><a href="../../../../humour/" title="My Humorous Creations">Humour</a><br/><ul><li><a href="../../../../humour/stories/" title="Large-Scale Stories I Wrote">Stories</a><br/><ul><li><a href="../../../../humour/stories/usable/">Usable</a><br/><ul><li><a href="../../../../humour/TheEnemy/" title="The Enemy and How I Helped to Fight It">The Enemy</a></li><li><a href="../../../../humour/TOneW-the-Fountainhead/" title="The One with the Fountainhead">TOW The Fountainhead</a></li><li><a href="../../../../humour/human-hacking/" title="The Human Hacking Field Guide">Human Hacking Field Guide</a></li><li><a href="../../../../humour/Star-Trek/We-the-Living-Dead/">We, the Living Dead</a></li><li><a href="../../../../humour/humanity/" title="Parody of Humanity and Modern Life in Particular">Humanity - The Movie</a></li></ul></li></ul></li><li><a href="../../../../humour/aphorisms/">Aphorisms and Quotes</a><br/><ul><li><a href="../../../../humour.html" title="Collection of Funny or Insightful Quotes or Aphorisms I came up with">My Quotes Collection</a></li><li><a href="../../../../humour/fortunes/" title="Collection of Files for Input to the UNIX &#8216;fortune&#8217; Program">Fortune Cookies Collection</a></li><li><a href="../../../../humour/bits/facts/" title="&#8220;Facts&#8221; about Chuck Norris and other things">Factoids</a></li></ul></li><li><a href="../../../../humour/bits/" title="Small Scale Funny Works of Mine">Small Scale</a></li><li><a href="../../../../humour/by-others/" title="Humorous Works by Other People">By Others</a></li></ul></li><li class="open"><a href="../../../" title="Various Essays and Articles about Technology and Philosophy in General">Essays</a><br/><ul><li><a href="../../../philosophy/">General Philosophy</a></li><li class="open"><a href="../../" title="Computing-related Essays and Articles">Computing</a><br/><ul><li><a href="../../open-source/" title="Essays about Free and Open Source Software (FOSS)">Open Source</a></li><li><a href="../../software-management/" title="Essays about how to manage software workplaces, projects and teams">Software Management</a></li><li><a href="../../perl/" title="Essays about the Perl programming language">Perl</a></li><li><a href="../../web/" title="About the World-Wide-Web">The Web (WWW)</a></li><li><a href="../" title="About Computer and Technical Education">Education</a></li></ul></li><li><a href="../../../politics/" title="Essays about Politics and Philosophical Politics">Political Essays</a></li><li><a href="../../../Index/" title="Index to Essays and Articles I wrote.">Index to Essays</a></li></ul></li><li><a href="../../../../puzzles/" title="Puzzles, Riddles and Brain-teasers">Puzzles</a><br/><ul><li><a href="../../../../MathVentures/" title="Mathematical Riddles and their Solutions">Math-Ventures</a></li><li><a href="../../../../puzzles/logic/">Logic Puzzles</a></li></ul></li><li><a href="../../../../art/" title="Computer art I created while explaining how.">Art</a><br/><ul><li><a href="../../../../art/original-graphics/">Original Graphics</a></li><li><a href="../../../../art/by-others/">By others</a></li><li><a href="../../../../art/recommendations/">Recommendations</a><br/><ul><li><a href="../../../../art/recommendations/music/">Music</a><br/><ul><li><a href="../../../../art/recommendations/music/online-artists/" title="Some of my favourite online musicians">Online Artists</a></li></ul></li></ul></li></ul></li><li><a href="../../../../open-source/" title="Pages related to Software (mostly Open-Source)">Software</a><br/><ul><li><a href="../../../../open-source/projects/">Projects</a><br/><ul><li><a href="../../../../open-source/projects/freecell-solver/">Freecell Solver</a></li><li><a href="../../../../open-source/projects/pysol/" title="A suite of Solitaire games">PySol FC</a></li></ul></li><li><a href="../../../../open-source/resources/" title="Various Software Resources Pages">Resources Pages</a><br/><ul><li><a href="../../../../open-source/resources/sw-lists/">Curated Lists</a></li><li><a href="../../../../open-source/favourite/" title="Favourite Open-Source Software">Favourite OSS</a></li><li><a href="../../../../open-source/interviews/" title="Interviews with Open-Source People">Interviews</a></li><li><a href="../../../../open-source/resources/israel/" title="Israel-Related FOSS Resources">Israel-Related</a></li></ul></li><li><a href="../../../../open-source/contributions/" title="Contributions to Other Projects, that I did not Start">Contributions</a></li></ul></li><li><a href="../../../../lecture/" title="Presentations I Wrote (Mostly Technical)">Lectures</a><br/><ul><li><a href="../../../../lecture/Perl/Newbies/">Perl for Newbies</a></li><li><a href="../../../../lecture/LAMP/" title="Web Publishing using Linux, Apache, MySQL, and Perl/PHP/Python (or equivalents)">Web Publishing using LAMP</a></li><li><a href="../../../../lecture/CatB/">The Cathedral and the Bazaar</a></li><li><a href="../../../../lecture/cat/programming-languages/" title="Presentations about Programming Languages">Prog. Languages</a></li><li><a href="../../../../lecture/cat/various-tools/" title="Presentations about Various Tools">Various Tools</a></li><li><a href="../../../../lecture/W2L/" title="Presentations for the Israeli series for Linux Newcomers">Welcome to Linux</a></li><li><a href="../../../../lecture/cat/projects/" title="Presentations about my Open Source Projects">About My Projects</a></li><li><a href="../../../../lecture/cat/lightning-talks/" title="Short (5-15 minutes) Presentations">Lightning Talks</a></li></ul></li><li class="open"><a href="../../../../work/" title="Work-Related Pages">Work</a><br/><ul><li><a href="../../../../work/hire-me/" title="I&#8217;m a Geek for Hire">Hire Me!</a><br/><ul><li><a href="../../../../work/private-lessons/" title="I&#8217;m Giving Private Lessons for High School Subjects and Computing.">Private Lessons</a></li></ul></li></ul></li></ul><ul><li><a href="../../../../links.html" title="An incomplete list of links I find cool and/or useful.">Cool Links</a></li><li><a href="../../../../recommendations/" title="Recommendations of Books, Music Albums, Films, etc.">Recommendations</a></li></ul><ul><li class="open"><a href="../../../../site-map/" title="A site map showing all of the main pages.">Site Map</a><br/><ul><li class="open"><a href="../../../../site-map/hebrew/" title="&#1502;&#1508;&#1514; &#1492;&#1506;&#1502;&#1493;&#1491;&#1497;&#1501; &#1492;&#1506;&#1489;&#1512;&#1497;&#1497;&#1501; &#1489;&#1488;&#1514;&#1512;">&#1506;&#1502;&#1493;&#1491;&#1497;&#1501; &#1489;&#1506;&#1489;&#1512;&#1497;&#1514;</a></li></ul></li></ul><ul><li class="open"><a href="../../../../meta/" title="Information about this Site">Meta Info</a><br/><ul><li class="open"><a href="../../../../meta/FAQ/" title="Frequently Asked Questions and Answers List (FAQ)">FAQ</a></li><li class="open"><a href="../../../../meta/privacy-policy/">Privacy Policy</a></li><li class="open"><a href="../../../../meta/site-source/" title="The source code used to generate this site">Site&#8217;s Source</a></li><li class="open"><a href="../../../../meta/how-to-help/" title="How you can help promote this site">How to Help</a><br/><ul><li class="open"><a href="../../../../meta/donate/">Please Donate</a></li></ul></li><li class="open"><a href="../../../../meta/hosting/" title="About this site&#8217;s hosting provider.">Hosting</a></li><li class="open"><a href="../../../../meta/old-site-snapshots/" title="The site as it looked like many years ago.">Old Site Snapshots (Nostalgia)</a></li></ul></li></ul></div><div class="about_author"><div class="center"><img src="../../../../images/shlomif-cutethulhu-small.webp" alt="Photo of Shlomi Fish" title="Head shot of Shlomi Fish"/></div><p><a href="../../../../#about_site">Shlomi Fish</a> (&#1513;&#1500;&#1493;&#1502;&#1497; &#1508;&#1497;&#1513;), also known as <a href="../../../../me/rindolf/">&#8220;Rindolf&#8221;</a>, is an Israeli humorist, writer, and software geek.</p><p>He is passionate about open content, open source, and freedom and openness in general.</p><p class="sep">It is easy to reach Shlomi using a large number of <a href="../../../../me/contact-me/">online means</a>, including <a href="mailto:shlomif@shlomifish.org">E-mail</a>.</p></div><h2 id="site-google-search">Google Search</h2><form method="get" action="https://www.google.com/search"><div class="search"><input type="hidden" name="ie" value="UTF-8"/> <input type="hidden" name="oe" value="UTF-8"/> <input type="text" name="q" size="15" maxlength="255"/> <input type="hidden" name="domains" value="www.shlomifish.org"/><br/><input type="radio" name="sitesearch"/> WWW<br/><input type="radio" name="sitesearch" value="www.shlomifish.org" checked="checked"/> shlomifish.org<br/><input type="submit" name="btnG" value="Google Search"/></div></form><h2 id="site-ddg-search">Duck Duck Go Search</h2><div class="search"><!-- DuckDuckGo Search --><object data="https://duckduckgo.com/search.html?width=100&amp;site=shlomifish.org&amp;prefill=SearchDuckDuckGo" type="text/html" style="overflow:hidden;margin:0;padding:0;width:160px;height:40px"/></div><ul class="relevant_links"><li><a href="http://shlomifishswiki.branchable.com/">Shlomi Fish&#8217;s Wiki</a></li></ul><p><a href="https://www.mozilla.org/firefox/new/" class="bless"><img class="bless" alt="Get Firefox!" title="Get Firefox! A safer, faster, better web-browser." src="../../../../images/get-firefox.png"/></a></p><p><a href="http://perl-begin.org/" title="The Perl Beginners' Site" class="bless"><img src="../../../../images/perl-begin.png" alt="The Perl Beginners' Site" class="bless"/></a></p><p><a href="http://validator.w3.org/check/referer" title="Valid XHTML5!" class="bless"><img class="highlight bless" src="../../../../images/xh11-btn.png" alt="Valid XHTML5!"/></a></p><p><a href="http://jigsaw.w3.org/css-validator/" title="Valid CSS!" class="bless"><img class="highlight bless" src="../../../../images/css-btn.png" alt="Valid CSS!"/></a></p><h2 id="shlomif_on_the_web">Shlomi Fish elsewhere on the Web</h2><div class="elsew_on_web"><ul><li><p><a href="http://twitter.com/shlomif"><img src="../../../../images/twitter-bird-light-bgs-20.png" alt="Twitter Logo"/> Twitter</a></p></li><li><p><a href="https://plus.google.com/+ShlomiFish/posts"><img src="../../../../images/google-plus-icon-30x30.png" alt="Google+ Logo"/> Google+</a></p></li><li><p><a href="http://www.facebook.com/shlomi.fish"><img src="../../../../images/facebook-icon-30x30.png" alt="Facebook Logo"/> Facebook</a></p></li><li><p><a href="http://unarmed.shlomifish.org/"><i>Unarmed but still Dangerous</i> Blog</a></p></li><li><p><a href="http://www.reddit.com/user/shlomif"><img src="../../../../images/Reddit_30x30.png" alt="Reddit Logo"/> Reddit</a></p></li><li><p><a href="http://en.wikipedia.org/wiki/User:Shlomif"><img src="../../../../images/wikipedia-logo-20.png" alt="Wikipedia Logo"/> Wikipedia</a></p></li><li><p><a href="http://www.flickr.com/photos/shlomif/"><img src="../../../../images/flickr-32x32.png" alt="Flickr Logo"/> Flickr</a></p></li><li><p><a href="http://shlomif.deviantart.com/"><img src="../../../../images/deviantart-30x30.png" alt="deviantART Logo"/> deviantART</a></p></li><li><p><a href="http://www.youtube.com/user/ShlomiFish"><img src="../../../../images/youtube-30x30.png" alt="YouTube Logo"/> YouTube</a></p></li><li><p><a href="http://github.com/shlomif"><img src="../../../../images/github-24-black.png" alt="GitHub Logo"/> GitHub</a></p></li></ul></div></nav><div id="container-footer"/></div></div><footer id="footer"><hr/><ul class="bt_nav"><li><a href="https://www.patreon.com/shlomif"><img class="patreon" src="../../../../images/patreon.svg" alt="Patreon account" title="Support me using Patreon"/></a></li><li><a href="../../../../">Home</a></li><li><a href="../../../../me/">About</a></li><li><a href="../../../../me/contact-me/">Contact Us</a></li><li><a href="../../../../meta/privacy-policy/">Privacy Policy</a></li><li><a href="../../../../meta/anti-spam-policy/">Anti-Spam Policy</a></li><li><a href="../../../../meta/FAQ/" title="Frequently asked questions list">FAQ</a></li><li><a href="../../../../me/blogs/">RSS/Atom Feeds</a></li></ul><p>Written, designed, and maintained by Shlomi Fish, <a href="mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>.</p><div id="footer_donate"><p><b>Note:</b> Given that I am under pressure to be less generous, and spend my money on activities that bring me joy, and make me a little poorer financially, I'd appreciate <a href="https://www.shlomifish.org/meta/donate/">donations</a>.</p></div><p>If you like what you see here, or have any comments, suggestions, or corrections, feel free to E-mail me about it. I&#8217;d love to hear from you. If you have found what I did helpful or entertaining, please consider <a href="../../../../meta/how-to-help/">helping</a>.</p><p>Style and look based on the <a href="http://wordpress.org/extend/themes/smoked">Smoked WordPress Theme</a> by <a href="http://wordpress.org/extend/themes/profile/iconstantin">iconstantin</a>.</p><p><a href="../../../../meta/FAQ/#evilphish-emblem">Fish emblem</a> taken from the <a href="http://ars.userfriendly.org/cartoons/?id=20030803">&#8220;Anatomy of an EvilPHish&#8221;</a> cartoon of <a href="http://www.userfriendly.org/">UserFriendly.org</a>.</p><a href="../../../../"><img src="../../../../images/bk2hp-v2.min.svg" class="bk2hp" alt="Back to my Homepage"/></a></footer></body></html>