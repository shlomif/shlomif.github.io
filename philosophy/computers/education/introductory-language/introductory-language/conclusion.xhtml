<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Conclusion</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="types_of_teaching.xhtml" title="Some Types of Teaching"/><link rel="next" href="other_good_food_for_thought.xhtml" title="Other Good Food for Thought about Teaching"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">Conclusion</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="types_of_teaching.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="other_good_food_for_thought.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="conclusion" class="title">Conclusion</h2></div></div></div><p>I talked with a few people on the IRC about it and some of them told me something along the lines of “What makes you think that you know better than all the universities and colleges (and other schools) that are now teaching Java?”. Well, this is the majority must be right fallacy:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>Everybody thinks that the Earth is flat (or the Sun revolves around it) so it must be true</p></li><li class="listitem"><p>Everybody thinks that <a class="link" href="http://www.shlomifish.org/philosophy/politics/drug-legalisation/">drugs should be illegal</a> so it must be true.</p></li></ol></div><p>Etc. I can think of many other cases where a common consensus, even among experts turned out to be false. But I’ll still explain a bit.</p><p>Universities have tended to teach the “hottest” language on the market. They used to teach Assembler. They used to teach COBOL (an awful language by all means, and one which proved to be a dead-end in language design). They taught Fortran and PL/I. They taught Pascal. They taught C and C++. And now they teach Java. I believe none of these languages were suitable as an introductory programming language, but they were taught because they were used in the industry.</p><p>During the course of IT education, several languages need to be studied - at least one dynamic language such as Perl, Python or Ruby ; C; an assembly language; Lisp (Scheme, Common Lisp or perhaps now <a class="link" href="http://www.paulgraham.com/arc.html">Arc</a>); Haskell, O’Caml or SML; and probably some specialised languages when they are appropriate. But the first language need not be what is the most hyped language in the industry, or even what most the rest of the studies will be conducted in.</p><p>From my <a class="link" href="http://www.shlomifish.org/philosophy/computers/education/opinion-on-the-technion/">impression of the Technion</a>, the institute as a whole believes that students can effectively write all their code in C. In some courses, the choice of C++ and Java are given, but these languages are not effectively taught. Most students, during their studies, had not been exposed to such advanced paradigms as regular expressions, dynamic-typing, Perl 5-like nested data structures, run time evaluation, closures and dynamic functions, and others that are considered common knowledge among developers of dynamic languages, and any software development enthusiast who is worth his weight in salt.</p><p>So my opinion still remains: Perl, Python or Ruby are the best languages for introducing non-programmers to programming, while Perl is the best, and Python is probably still the worst of the three. However, note that any decent programming training will introduce his developers to more than one language, and a prospective programmer should not worry if he started out with a language that I consider sub-optimal. With good ambition and motivation and with the right attitude (“I know that I do not know”), one can become a better and better programmer regardless of his initial background.</p></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="types_of_teaching.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="other_good_food_for_thought.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">Some Types of Teaching </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> Other Good Food for Thought about Teaching</td></tr></table></div></footer></body></html>