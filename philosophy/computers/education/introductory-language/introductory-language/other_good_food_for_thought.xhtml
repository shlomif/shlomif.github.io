<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Other Good Food for Thought about Teaching</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="conclusion.xhtml" title="Conclusion"/><link rel="next" href="thanks.xhtml" title="Thanks"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">Other Good Food for Thought about Teaching</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="conclusion.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="thanks.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="other_good_food_for_thought" class="title">Other Good Food for Thought about Teaching</h2></div></div></div><div class="toc"><ul class="toc"><li><span class="section"><a href="other_good_food_for_thought.xhtml#live_learn">“Live as if you were to die tomorrow. Learn as if you were to live forever.”</a></span></li><li><span class="section"><a href="other_good_food_for_thought.xhtml#three_levels_of_learning">Three Levels of Learning</a></span></li><li><span class="section"><a href="other_good_food_for_thought.xhtml#learn_many_languages">Learn as Many Languages as Possible</a></span></li><li><span class="section"><a href="other_good_food_for_thought.xhtml#learning_to_read_and_enhance">Learning How to Read Code and Enhance Existing Code</a></span></li></ul></div><p>This section will bring other good for thought about teaching.</p><section class="section"><div class="titlepage"><div><div><h3 id="live_learn" class="title">“Live as if you were to die tomorrow. Learn as if you were to live forever.”</h3></div></div></div><p>This is a quote attributed to <a class="link" href="http://en.wikipedia.org/wiki/Mahatma_Gandhi">Gandhi</a>. The “Learn like you were going to live forever” part is not widely understood by many workers. Many programmers believe that their knowledge of a few programming languages is enough, and that it is not necessary that they learn completely different ones.</p><p>It is well known that learning a new and different programming language will make you a better programmer also in the original languages you know. Programmers who don’t learn new programming languages eventually stagnate. They are bounded by their limited knowledge, and cannot think outside their box. They deserve the stagnation they receive due to this bad attitude, and mental laziness.</p><p>If you want to grow as a programmer, make sure you keep studying new languages and technologies. Not only they may turn out to be useful, but they’ll also make you think in completely different ways.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="three_levels_of_learning" class="title">Three Levels of Learning</h3></div></div></div><p>Rabbi Hanina used to say “I learned a lot from my teachers, and from my friends more than my teachers, and from my pupils the most.” I believe this means that there are in fact three levels of learning:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p><span class="bold"><strong>Level 1 - Learning</strong></span> - this is a passive learning of the material, where one inputs the material.</p></li><li class="listitem"><p><span class="bold"><strong>Level 2 - Experiencing</strong></span> - in this level you work with the material you learned, and try to implement what you’ve learned and integrate it. This requires more understanding, because you have to work with the material.</p></li><li class="listitem"><p><span class="bold"><strong>Level 3 - Teaching</strong></span> - in this level you teach the material to someone else. This requires the most understanding because you need to organise it properly and convey it to someone else.</p></li></ol></div><p>Perhaps there’s a fourth level - <span class="bold"><strong>Science</strong></span> in which the knowledge is expanded. However, this implies that to truly understand the material, one needs to experiment with it (preferably in production) and better yet teach it to someone else.</p><p id="those_who_can_footnote">The old adage “He who can - does. He who cannot - teaches.” which was <a class="link" href="http://en.wikiquote.org/wiki/George_Bernard_Shaw">said by George Bernard Shaw</a> is amusing, but simply not true, as I’ve demonstrated here. Being a great teacher is much more difficult than being a great doer, and is much more enlightening. <a href="#ftn.those_who_can_footnote" class="footnote"><sup class="footnote">[those_who_can]</sup></a></p></section><section class="section"><div class="titlepage"><div><div><h3 id="learn_many_languages" class="title">Learn as Many Languages as Possible</h3></div></div></div><p>Learning one computer language is not enough. Knowledge of only one computer language or a few cripples the mind and causes the brain to run in circles. Different programming languages introduce different insights: various easier ways to do certain things, different restrictions , different syntax, different APIs, different ways of doing things, different high-level mechanisms (or lack of them). All of this gives different understandings of how to program in any language.</p><p>Many people believe that their limited knowledge is adequate. Java programmers are especially notorious for being opposed to the ideas of them having to learn different languages. The <a class="link" href="http://www.amazon.com/exec/obidos/ASIN/020161622X/ref=nosim/shlomifishhom-20">Pragmatic Programmer book</a> says a programmer should learn a new computer language at least every year, and I tend to agree with it. I compiled <a class="link" href="http://www.shlomifish.org/philosophy/philosophy/advice-for-the-young/#technologies_to_learn">a tentative list of the technologies I found the most enlightening</a>, and I recommend programmers to learn at least all of them.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="learning_to_read_and_enhance" class="title">Learning How to Read Code and Enhance Existing Code</h3></div></div></div><p>At present, universities and other spend most time teaching programmers how to write code. However, most of what programmers have to do for work or for pro-bono work (like open source projects) is to read code, and to enhance existing code.</p><p><a class="link" href="http://www.joelonsoftware.com/">Joel Spolsky (“Joel on Software”)</a> gave the following “cardinal rule of programming” in his famous <a class="link" href="http://www.joelonsoftware.com/articles/fog0000000069.html">“Things you must never do, part I” essay</a>:</p><div class="blockquote"><blockquote class="blockquote"><p>It’s harder to read code than to write it.</p></blockquote></div><p>My friends and I later <a class="link" href="http://tech.groups.yahoo.com/group/hackers-il/message/3576">discussed this topic in the Hackers-IL mailing list</a>. Even if code is given for reading in university, it is usually extremely well-written, highly organised, highly legible, code, rather than the real code that programmers are likely to encounter in the wild.</p><p>It’s a shame most of the code students write as part of their curriculum is only for themselves, and ends up being of little value to the world at large. Even if some code ends up as an open source project, it is usually too incomplete and lacks essential functionality or correctness to be of any use in the real world.</p><p>As Joel points out in the article, most programmers end up saying that the code they are working on is horrible and that they wish to completely rewrite it if they have the chance, instead of <a class="link" href="http://www.refactoring.com/">refactoring</a> it to make it better.</p><p>Furthermore, since reading code is harder than writing it, then it makes sense that programmers who are good at reading (or refactoring code or enhancing it) are much better programmers, than programmers who are only good at writing new code. I wish I had a dollar for every time I heard of someone trying to rewrite an existing functional and relatively bug-free codebase from scratch, just because this codebase was deemed of too little quality, and that afterwards this rewrite ended up at nothing. These cases practically dwarf the number of successful rewrites I recall.</p><p>To sum up, it will be a good idea to teach first-time programmers how to read real-world code, or the code written by their co-students, and how to enhance it by extending it, and cleaning it up.</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.those_who_can_footnote" class="footnote"><p><a href="#those_who_can_footnote" class="para"><sup class="para">[those_who_can] </sup></a>What is true, in my opinion. is that “Those who can - do. Those who can’t - complain.” However, often people who can and do, still complain. I recall this quote being attributed to <a class="link" href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds </a>, but it <a class="link" href="http://shlomif.livejournal.com/39215.html">predates him</a>.</p></div></div></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="conclusion.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="thanks.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">Conclusion </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> Thanks</td></tr></table></div></footer></body></html>