<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<title>What Makes Software High-Quality? (Revision 2) - The Analysis Itself</title>
<meta charset="utf-8"/>
<meta name="description" content=
"What Makes Software High-Quality? (Revision 2) - The Analysis Itself"/>
<link rel="stylesheet" href="../../../../../faq-indiv.css" media="screen"/>
<link rel="stylesheet" href="../../../../../screenplay.css" media="screen"
title="Normal"/>
<link rel="stylesheet" href="../../../../../print.css" media="print"/>
<link rel="shortcut icon" href="../../../../../favicon.ico" type=
"image/x-icon"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
</head>
<body class="fancy_sects faq_indiv_entry limit_imgs_width screenplay_indiv_entry">
<div class="header" id="header">
<a href="../../../../../"><img src="../../../../../images/evilphish-flipped.png"
alt="EvilPHish site logo"/></a>
<div class="leading_path"><a href="../../../../../">Shlomi Fish’s
Homepage</a> →
<a href="../" title="What Makes Software High-Quality? (Revision 2)">What Makes Software High-Quality? (Revision 2)</a>
 → <a href="freecell-solvers-quality.xhtml">Analysis of the Quality of the Various Freecell Solvers</a>
→ <b>The Analysis Itself</b>
</div>
</div>
<div id="faux">
<main class="main faq screenplay">
<section xmlns="http://www.w3.org/1999/xhtml" class="section"><header xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml" class="titlepage"><h4 id="freecell-solvers-quality--analysis" class="title">The Analysis Itself</h4><h:a class="back_to_faq" href="../#freecell-solvers-quality--analysis">Node Link</h:a></header><p id="quality-analysis--availability">As is not uncommon in many software niches, some Freecell solvers are <span class="bold"><strong>not commonly available</strong></span> for downloading or even for buying. For example, <a class="link" href="http://tech.groups.yahoo.com/group/fc-solve-discuss/message/158">Bill Raymond&#8217;s solver</a> (named &#8220;Cat in the Sack&#8221;) which he has been talking about extensively, has not been released yet, under any licensing terms. Similarly, Danny A. Jones has kept his solver (mentioned in <a class="link" href="../#introduction" title="Introduction">the introduction</a>) for himself, and has not released it to the wild in either source or binary forms.</p><p>As such, the utility of such solvers is heavily reduced. For once, they cannot be used as integrated solvers of Solitaire apps, because no one is going to wait for an email to the author to be sent, and the author to reply with the solution. Also, many researchers won&#8217;t trust solutions given by them without the ability to inspect the source code.</p><p><a class="link" href="http://fc-solve.shlomifish.org/links.html#other_solvers">Most other solvers</a> are <span class="bold"><strong>available for free download</strong></span>, and many are accompanied with the source, most probably under an open-source licence.</p><p id="quality-analysis--prog-lang"><a class="link" href="http://www.numin8r.us/programs/">Gary Campbell&#8217;s Solver</a> is written in 8086 Assembly, with some 32-bit extensions, and only runs on DOS and DOS-compatible platforms. The assembly is compiled using a self-hosting macro assembler written by Campbell. The Assembly source code of the solver or the assembler are not available. As such modifying the code of the executable may prove to be problematic.</p><p>It is tempting to think that x86 and DOS are a very low common denominator, but that is not always the case. Imagine that you are writing a Freecell game for an embedded device running a non-x86 architecture such as <a class="link" href="http://en.wikipedia.org/wiki/ARM_architecture">ARM</a> or <a class="link" href="http://en.wikipedia.org/wiki/PowerPC">PowerPC</a>. In that case, in order to run Campbell&#8217;s solver, you&#8217;ll need to embed an x86-and-DOS emulator (such as <a class="link" href="http://www.dosbox.com/">DOSBox</a>) inside the device, which will complicate things, consume a lot of memory, and slow things down. On the other, a C-based solver, such as Freecell Solver, or Tom Holroyd&#8217;s Patsolve, can be easily made to compile and run there with few if any modifications. So they would be preferable.</p><p id="portions-in-assembly">Similarly, when writing <span class="bold"><strong>portable programs</strong></span> for <a class="link" href="http://en.wikipedia.org/wiki/Unix">the various Unix flavours</a> and other POSIX-capable or C-capable operating-systems, then writing code in x86 Assembly exclusively will make it a non-starter. <a href="../#ftn.portions-in-assembly" class="footnote"><sup class="footnote">[Assembly]</sup></a></p><p id="quality-analysis--build-system">Some Freecell solvers also <a class="link" href="../#easy_to_compile_and_install" title="The Program is Easy to Compile, Deploy and Install">don&#8217;t build out of the box</a>. For example, typing <code class="literal">make</code> inside the patsolve distribution yields the following output:</p><pre class="programlisting">

shlomi:~/patsolve-3.0$ make
make clean
make[1]: Entering directory `/home/shlomi/patsolve-3.0'
rm -f patsolve *.o param.c param.h core win .depend
make[1]: Leaving directory `/home/shlomi/patsolve-3.0'
touch .depend
param.py param.dat
make: param.py: Command not found
make: *** [param.h] Error 127

        </pre><p>This is relatively easy to fix, but still frustrating. Freecell Solver on the other hand, has been fully converted to the GNU Autotools, and can be built as a static and shared library (a.k.a DLL). It also has some built-in proof-of-concept, but still usable, command line utilities that link against it.</p><p id="quality-analysis--usability">Freecell Solver has very good <span class="bold"><strong>usability</strong></span>: it mostly respects <a class="link" href="http://www.catb.org/~esr/writings/taoup/">the Unix conventions and best practices</a>, it can start solving from any arbitrary Solitaire board position given to it as input, and has kept command line interface usability in mind. Campbell&#8217;s solver on the other hand, as of this writing, does not operate on a standard input/standard output manner, is poorly documented, and is counter-intuitive for someone who is used to Unix conventions (and most DOS conventions). I&#8217;m not even sure it can accept any arbitrary board as input, but I may be wrong.</p><p id="quality-analysis--homepage">Regarding <span class="bold"><strong>the homepage</strong></span> of the solver: the <a class="link" href="http://fc-solve.shlomifish.org/">Freecell Solver homepage</a> has many pages, a navigation menu, a common look-and-feel and many links and information. On the other hand, Patsolve&#8217;s homepage is nothing but a link in <a class="link" href="http://members.tripod.com/professor_tom/archives/">Tom Holroyd&#8217;s software archive</a>, which can easily be missed. Gary Campbell&#8217;s <a class="link" href="http://www.numin8r.us/programs/">homepage for his solver</a> has a Baroque design and quite a lot of marketing-speak. And it&#8217;s only one page with no anchors or a navigation menu, and very few links. Most other solvers don&#8217;t fare better than that, and certainly worse than my own.</p><p id="fcs-pd"><span class="bold"><strong>Licensing</strong></span>, a necessary, but important, evil. The Freecell Solver&#8217;s C source is distributed under the Public Domain licence, which allows virtually any use, including linking, modifying and sublicensing under any different licence by a third party.<a href="../#ftn.fcs-pd" class="footnote"><sup class="footnote">[PD-LICENSE]</sup></a> On the other hand, Patsolve is distributed under the <a class="link" href="http://en.wikipedia.org/wiki/GNU_General_Public_License">GPL licence</a> which while usable is considerably more restrictive than Public Domain, or BSD-style licences. This is also the case for <a class="link" href="http://kevin.atkinson.dhs.org/freecell/">this Common Lisp solver</a> by Kevin Atkinson and Shari Holstege. Many other solvers, including Campbell&#8217;s are binary-only, &#8220;All Rights Reserved&#8221;, which makes them a complete no-starter for most open-source applications out there. Furthermore, many non-open-source applications will prefer to use a Public Domain solver, rather than paying royalties or risking &#8220;copyrights&#8221; and source availability problems.</p><p id="quality-analysis--documentation">Freecell Solver (FCS) is extensively documented, and even its <a class="link" href="http://freshmeat.net/articles/view/519/">online help is helpful and usable by itself</a>. The other solvers are much less documented, but arguably they also have much fewer options and features than Freecell Solver does.</p><p id="quality-analysis--features">Which brings us to the features - Freecell Solver has <a class="link" href="http://fc-solve.shlomifish.org/features.html">a long list of features</a>, and I&#8217;m not aware of any other solver with so many. Especially of note is that it can solve many other Solitaire variants, including <a class="link" href="http://en.wikipedia.org/wiki/Simple_Simon_(solitaire)">Simple Simon</a>, of which FCS is probably the only solver capable of solving.</p><p id="quality-analysis--speed">Most of the solvers out there are fast, but some are more than others. Normally, for solving an individual game on the command-line, almost any solver will do, and the only cases where such speed matters more is for Solitaire research, and for analysing large sets of different games. (see the <a class="link" href="http://www.solitairelaboratory.com/fcfaq.html">Freecell FAQ</a> for more information).</p><p id="quality-analysis--solution-length">In his original message, Mr. Campbell claimed that the <a class="link" href="http://www.rrhistorical.com/rrdata/Fcpro65/">Freecell Pro</a> solvers (Freecell Solver, Patsolve and the solver that originated from Don Woods) generated long and unusable solutions. That has not been my experience with Freecell Solver in some of its (practically infinite) configurations. Using the so-called &#8220;good-intentions&#8221; configuration I typically get solutions that are less than 200 moves. It is highly possible this is not the default in Freecell Pro. But like I said, there are many different parameters for quality than just speed and solution-length. Another fact worth of noting is that a beta-tester who tried out some of the Freecell Solver solutions in Freecell Pro, said that he found them to be very &#8220;creative&#8221; and interesting.</p><p id="quality-analysis--other-advantages">Freecell Solver has some other advantages: it is capable of being fully instantiated, as it stores everything in an &#8220;instance&#8221; C-struct, while using global variables only for constants (and not using static variables). This makes doing parallelised testing using mutli-threading much easier. It also has namespace-purity in the sense that all variables start with the <code class="literal">freecell_solver_</code> prefix. Moreover, FCS has a well-defined and stable API, which is not well-documented, but should be easy-to-use.</p><p>Part of the API is a parser for a list of command-line-like strings, which allow for configuring without making many standalone function calls.</p></section></main>
</div>
<footer>
<div class="foot_left">
<ul class="bt_nav">
<li><a href="../../../../../">Home</a></li>
<li><a href="../../../../../me/">About</a></li>
<li><a href="../../../../../me/contact-me/">Contact Us</a></li>
<li><a href="../../../../../meta/privacy-policy/">Privacy Policy</a></li>
<li><a href="../../../../../meta/anti-spam-policy/">Anti-Spam
Policy</a></li>
<li><a href="../../../../../meta/FAQ/" title=
"Frequently asked questions list">FAQ</a></li>
<li><a href="../../../../../me/blogs/">RSS/Atom Feeds</a></li>
</ul>
<p>Written, designed, and maintained by Shlomi Fish, <a href=
"mailto:shlomif@shlomifish.org">shlomif@shlomifish.org</a>.</p>
</div>
<a href="../../../../../"><img src="../../../../../images/bk2hp-v2.min.svg" class=
"bk2hp" alt="Back to my Homepage"/></a></footer>
</body>
</html>