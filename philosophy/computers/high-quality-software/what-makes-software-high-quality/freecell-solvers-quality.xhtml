<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>Analysis of the Quality of the Various Freecell Solvers</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="ways-to-achieve-quality.xhtml" title="Ways to Achieve Quality"/><link rel="next" href="about.xhtml" title="About This Document"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">Analysis of the Quality of the Various Freecell Solvers</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="ways-to-achieve-quality.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="about.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="freecell-solvers-quality" class="title">Analysis of the Quality of the Various Freecell Solvers</h2></div></div></div><div class="toc"><ul class="toc"><li><span class="section"><a href="freecell-solvers-quality.xhtml#freecell-solvers-quality--intro">Introduction</a></span></li><li><span class="section"><a href="freecell-solvers-quality.xhtml#freecell-solvers-quality--analysis">The Analysis Itself</a></span></li><li><span class="section"><a href="freecell-solvers-quality.xhtml#freecell-solvers-quality--conclusion">Conclusion</a></span></li></ul></div><section class="section"><div class="titlepage"><div><div><h3 id="freecell-solvers-quality--intro" class="title">Introduction</h3></div></div></div><p>As you recall, Gary Campbell's comment provided the motivation for my investigation into what makes a project high-quality and which quality-increasing-measures are not elements of quality by themselves. And since <a class="link" href="http://fc-solve.shlomifish.org/">Freecell Solver</a> has been my pet project, and as I'm still interested in techniques for solving Solitaire, I'd like to conclude this essay by analysing the various solvers according to the parameters I described. The natural caveat is that due to the fact I authored a solver of my own, then I may be a bit biased.</p><p>I was not so sure including this section is a good idea, but I feel the article is incomplete without it. Feel free to skip it, in case you are not that interested in it.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="freecell-solvers-quality--analysis" class="title">The Analysis Itself</h3></div></div></div><p id="quality-analysis--availability">As is not uncommon in many software niches, some Freecell solvers are <span class="bold"><strong>not commonly available</strong></span> for downloading or even for buying. For example, <a class="link" href="http://tech.groups.yahoo.com/group/fc-solve-discuss/message/158">Bill Raymond's solver</a> (named "Cat in the Sack") which he has been talking about extensively, has not been released yet, under any licensing terms. Similarly, Danny A. Jones has kept his solver (mentioned in <a class="link" href="index.xhtml#introduction" title="Introduction">the introduction</a>) for himself, and has not released it to the wild in either source or binary forms.</p><p>As such, the utility of such solvers is heavily reduced. For once, they cannot be used as integrated solvers of Solitaire apps, because no one is going to wait for an email to the author to be sent, and the author to reply with the solution. Also, many researchers won't trust solutions given by them without the ability to inspect the source code.</p><p><a class="link" href="http://fc-solve.shlomifish.org/links.html#other_solvers">Most other solvers</a> are <span class="bold"><strong>available for free download</strong></span>, and many are accompanied with the source, most probably under an open-source licence.</p><p id="quality-analysis--prog-lang"><a class="link" href="http://www.numin8r.us/programs/">Gary Campbell's Solver</a> is written in 8086 Assembly, with some 32-bit extensions, and only runs on DOS and DOS-compatible platforms. The assembly is compiled using a self-hosting macro assembler written by Campbell. The Assembly source code of the solver or the assembler are not available. As such modifying the code of the executable may prove to be problematic.</p><p>It is tempting to think that x86 and DOS are a very low common denominator, but that is not always the case. Imagine that you are writing a Freecell game for an embedded device running a non-x86 architecture such as <a class="link" href="http://en.wikipedia.org/wiki/ARM_architecture">ARM</a> or <a class="link" href="http://en.wikipedia.org/wiki/PowerPC">PowerPC</a>. In that case, in order to run Campbell's solver, you'll need to embed an x86-and-DOS emulator (such as <a class="link" href="http://www.dosbox.com/">DOSBox</a>) inside the device, which will complicate things, consume a lot of memory, and slow things down. On the other, a C-based solver, such as Freecell Solver, or Tom Holroyd's Patsolve, can be easily made to compile and run there with few if any modifications. So they would be preferable.</p><p id="portions-in-assembly">Similarly, when writing <span class="bold"><strong>portable programs</strong></span> for <a class="link" href="http://en.wikipedia.org/wiki/Unix">the various Unix flavours</a> and other POSIX-capable or C-capable operating-systems, then writing code in x86 Assembly exclusively will make it a non-starter. <a href="#ftn.portions-in-assembly" class="footnote"><sup class="footnote">[Assembly]</sup></a></p><p id="quality-analysis--build-system">Some Freecell solvers also <a class="link" href="parameters-of-quality.xhtml#easy_to_compile_and_install" title="The Software is Easy to Compile, Deploy and Install">don't build out of the box</a>. For example, typing <code class="literal">make</code> inside the patsolve distribution yields the following output:</p><pre class="programlisting">

shlomi:~/patsolve-3.0$ make
make clean
make[1]: Entering directory `/home/shlomi/patsolve-3.0'
rm -f patsolve *.o param.c param.h core win .depend
make[1]: Leaving directory `/home/shlomi/patsolve-3.0'
touch .depend
param.py param.dat
make: param.py: Command not found
make: *** [param.h] Error 127

        </pre><p>This is relatively easy to fix, but still frustrating. Freecell Solver on the other hand, has been fully converted to the GNU Autotools, and can be built as a static and shared library (a.k.a DLL), as well as several proof-of-concept, but still usable, command line utilities that link against it.</p><p id="quality-analysis--usability">Freecell Solver has very good <span class="bold"><strong>usability</strong></span>: it mostly respects <a class="link" href="http://www.catb.org/~esr/writings/taoup/">the Unix conventions and best practices</a>, it can start solving from any arbitrary Solitaire board position given to it as input, and has kept command line interface usability in mind. Campbell's solver on the other hand, as of this writing, does not operate on a standard input/standard output manner, is poorly documented, and is counter-intuitive for someone who is used to Unix conventions (and most DOS conventions). I'm not even sure it can accept any arbitrary board as input, but I may be wrong.</p><p id="quality-analysis--homepage">Regarding <span class="bold"><strong>the homepage</strong></span> of the solver: the <a class="link" href="http://fc-solve.shlomifish.org/">Freecell Solver homepage</a> has many pages, a navigation menu, a common look-and-feel and many links and information. On the other hand, Patsolve is nothing but a link in <a class="link" href="http://members.tripod.com/professor_tom/archives/">Tom Holroyd's software archive</a>, which can easily be missed. Gary Campbell's <a class="link" href="http://www.numin8r.us/programs/">homepage for his solver</a> has a Baroque design and quite a lot of marketing-speak. And it's only one page with no anchors or a navigation menu, and very few links. Most other solvers don't fare better than that, and certainly worse than my own.</p><p id="fcs-pd"><span class="bold"><strong>Licensing</strong></span>, a necessary, but important, evil. The Freecell Solver's C source is distributed under the Public Domain licence, which allows virtually any use, including linking, modifying and sublicensing under any different licence by a third party.<a href="#ftn.fcs-pd" class="footnote"><sup class="footnote">[PD-LICENSE]</sup></a> On the other hand, Patsolve is distributed under the <a class="link" href="http://en.wikipedia.org/wiki/GNU_General_Public_License">GPL licence</a> which while usable is considerably more restrictive than Public Domain, or BSD-style licences. This is also the case for <a class="link" href="http://kevin.atkinson.dhs.org/freecell/">this Common Lisp solver</a>. Many other solvers, including Campbell's are binary-only, "All Rights Reserved", which makes them a complete no-starter for most open-source applications out there. Furthermore, many non-open-source applications will prefer to use a Public Domain solver, rather than paying royalties or risking "copyrights" and source availability problems.</p><p id="quality-analysis--documentation">Freecell Solver (FCS) is extensively documented, and even its <a class="link" href="http://freshmeat.net/articles/view/519/">online help is helpful and usable by itself</a>. The other solvers are much less documented, but arguably they also have much fewer options and features than Freecell Solver does.</p><p id="quality-analysis--features">Which brings us to the features - Freecell Solver has <a class="link" href="http://fc-solve.shlomifish.org/features.html">a long list of features</a>, and I'm not aware of any solver with so many of them. Especially of note is that it can solve many other Solitaire variants, including <a class="link" href="http://en.wikipedia.org/wiki/Simple_Simon_(solitaire)">Simple Simon</a>, of which FCS is probably the only solver capable of solving.</p><p id="quality-analysis--speed">Most of the solvers out there are fast, but some are more than others. Normally, for solving an individual game on the command-line, almost any solver will do, and the only cases where such speed matters more is for Solitaire research, and for analysing large sets of different games. (see the <a class="link" href="http://www.solitairelaboratory.com/fcfaq.html">Freecell FAQ</a> for more information).</p></section><section class="section"><div class="titlepage"><div><div><h3 id="freecell-solvers-quality--conclusion" class="title">Conclusion</h3></div></div></div><p>All things considered, I still feel that Freecell Solver is probably the best quality Solitaire solver out there. While <a class="link" href="http://fc-solve.shlomifish.org/to-do.html">it still has a lot of room for improvement</a>, the rest of its competition have much bigger issues, or have not been made available (yet or ever).</p><p>Several factors contributed for its success: the fact that I announced <a class="link" href="http://freshmeat.net/">many releases on Freshmeat.net</a>, that I received a lot of input from my users and co-developers, that I was determined to constantly improve it and work on it, and that I worked on creating and maintaining a good web-site and documentation.</p><p>While most of the contributions of code I received were limited, the input from the users of the software proved to be crucial for its prosperity. Like I noted earlier, I lost interest in working on it (at least temporarily), but still maintain it, and feel that it is good enough as it is.</p><p>I hope this document, and similar resources it referenced will help you in working on your software, and improving its quality for the benefit of your users and you.</p><p>Happy Hacking!</p></section><div class="footnotes"><br/><hr class="footnote-hr"/><div id="ftn.portions-in-assembly" class="footnote"><p><a href="#portions-in-assembly" class="para"><sup class="para">[Assembly] </sup></a>In some cases, the developers of portable software maintain versions of parts of the code in Assembly of selected architectures, while keeping more portable versions written in C or C++. This is done to optimise some parts for common CPU architectures.</p></div><div id="ftn.fcs-pd" class="footnote"><p><a href="#fcs-pd" class="para"><sup class="para">[PD-LICENSE] </sup></a>As noted earlier, a Public Domain non-licence has some problems, which may make the software problematic for many corporations and in some jurisdictions. However, I don't have problem in exempting the licence of the Freecell Solver code (at least not the Public Domain code that I fully originated), from the Public Domain, including under the MIT X11 Licence, assuming this is necessary.</p><p>I'm also considering relicensing Freecell Solver and other older software of mine under the MIT X11 licence, or possibly having a dual-Public Domain and MIT X11 licensing terms (which seems somewhat silly, but may be a good idea.)</p></div></div></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="ways-to-achieve-quality.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="about.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">Ways to Achieve Quality </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> About This Document</td></tr></table></div></footer></body></html>