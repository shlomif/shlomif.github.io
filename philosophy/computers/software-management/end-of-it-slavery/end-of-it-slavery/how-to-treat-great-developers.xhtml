<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>How to treat Great Developers</title><link rel="stylesheet" type="text/css" href="docbook.css"/><link rel="stylesheet" type="text/css" href="style.css"/><meta name="generator" content="DocBook XSL Shlomif"/><link rel="prev" href="how-to-find-great-developers.xhtml" title="How to find Great Developers?"/><link rel="next" href="conclusion.xhtml" title="Conclusion"/></head><body><header><div class="center ads_top"/><div class="navheader"><table style="width:100%"><tr><th style="text-align:center" colspan="3">How to treat Great Developers</th></tr><tr><td style="width:20%;text-align:left"><a accesskey="p" href="how-to-find-great-developers.xhtml">Prev</a> </td><th style="width:60%;text-align:center"> </th><td style="width:20%;text-align:right"> <a accesskey="n" href="conclusion.xhtml">Next</a></td></tr></table><hr/></div></header><section class="section"><div class="titlepage"><div><div><h2 id="how-to-treat-great-developers" class="title">How to treat Great Developers</h2></div></div></div><div class="toc"><ul class="toc"><li><span class="section"><a href="how-to-treat-great-developers.xhtml#best-equipment-money-can-buy">The Best Equipment Money can Buy</a></span></li><li><span class="section"><a href="how-to-treat-great-developers.xhtml#leave-your-developers-alone">Leave Your Developers Alone</a></span></li><li><span class="section"><a href="how-to-treat-great-developers.xhtml#be_honest_to_your_developers">Be Honest with your Developers</a></span></li><li><span class="section"><a href="how-to-treat-great-developers.xhtml#let_them_grow">Let Them Grow</a></span></li><li><span class="section"><a href="how-to-treat-great-developers.xhtml#take-some-advice">Take Some Good Advice</a></span></li><li><span class="section"><a href="how-to-treat-great-developers.xhtml#respect-and-cherish">Respect and Cherish Your Developers</a></span></li></ul></div><p>So you want to hire a great hacker. That’s great! What should you do? Great hackers, are not too concerned with getting <a class="link" href="http://www.catb.org/~esr/writings/cathedral-bazaar/homesteading/ar01s19.html">an exceptional salary</a>. They probably won’t work for free, but they will often prefer a better job with a smaller pay than an abusive job with a higher pay. But what do they like?</p><p>Great Developers like to <span class="bold"><strong>work on stable, well-proven platforms</strong></span> that are preferably open-source. In today’s world it means either C or C++ using gcc and g++; Perl, Python, Ruby and to a lesser extent PHP; Java and possibly also .NET on Windows 2003 or the open-source and cross-platform <a class="link" href="http://www.mono-project.com/">Mono</a>. If your platform doesn’t work, has bugs that delving into the source won’t reveal (if the source can be read at all) - they’re not going to be happy.</p><p>At a workplace I worked for a few days, I was given a task to automate a buggy Hebrew windows application written using PowerBuilder, which was incredibly quirky. It took me three or four days to write less than a hundred lines of Perl code. I was never so unproductive. After answering the wrong question in an interrogation, I was fired, and was heavily relieved. Such applications should not be tested - they should be rewritten using a more modern and less quirky technology.</p><p>Another thing great developers hate is to <span class="bold"><strong>forced to be consumed by their work</strong></span>. In Israel, some workplaces require at least 9 hours of daily work. How can you work like that, and still work on open-source projects, have a girlfriend or a boyfriend, go to the meetings of social or technical clubs, hang with your friends in coffee shops, restaurants, or pubs, and other activities like that. All of these things are not <span class="bold"><strong>strictly part of work</strong></span>, but they are what <span class="bold"><strong>make great developers productive</strong></span>. That’s because coding happens in your mind, not in your editor or IDE, and because the more inspired a developer is, the more happier he is, the better code he writes, and the better ideas he has. A programmer who just works all week, without leisure time is heavily underproductive.</p><p>Here’s another thing: in Israel the law mandates at least 12 paid vacation days per year. At my previous workplace, I received 14 paid vacation days? Thank you, Workplace!!</p><p>But guess what? <a class="link" href="http://www.fogcreek.com/">Fog Creek software</a>, best known as the company co-owned by <a class="link" href="http://www.joelonsoftware.com/">Joel Spolsky from the “Joel on Software” site</a> gives people 6 weeks of paid vacation annually. And they’re doing very fine, and people there are super-happy and productive. So, why should I work for you if all I get are 14 stupid days? Get real!</p><section class="section"><div class="titlepage"><div><div><h3 id="best-equipment-money-can-buy" class="title">The Best Equipment Money can Buy</h3></div></div></div><p>The <a class="link" href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a> specifically says that you should give your developers the best tools and equipment money can buy - from hardware to software, to office conditions, to food, to location, to everything else. Many workplaces don’t understand that.</p><p>In a previous workplace of mine, I was given a recycled computer - it was still fast but its hard-disk was only 40 GB. It was a pain to get some Windows XP virtual machines running there. Another computer we developed on still had a 40 GB hard disk too. We ran out of space there because we had a huge checkout of the <a class="link" href="http://subversion.tigris.org/">Subversion version control system</a> there. And the only hard-disks that our lab had were whopping 80 GB ones, bought because they were the cheapest ones, which probably wouldn’t have been sufficient for too long, either.</p><p>The most amazing thing was that the computer’s sole CD drive, was just a CD drive - no CD writing, no DVD reading or writing - a CD drive. It gave me a lot of grief. I had to copy a few DVDs I burned at home on my supervisor’s computer, and copy them over the network, and could not install a Linux distribution from its installation DVD even if I wanted to.</p><p>Some people can still happily use old hardware or play with relatively buggy software. But good developers should not be concerned with this. They want a hardware with enough space, RAM, and processing power. They want a screen that they can easily move around (a flat-panel LCD screen). They want good food in the kitchen. They want talkative, interesting and benevolent people to talk with. They want a spacious office. They <a class="link" href="http://www.fysh.org/~katie/computing/no-net-access.txt">want Internet connectivity</a> so they can surf the web and search for answers, chat with their friends, ask people on the IRC for help, and contact some people who know more about the software they are using than they do.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="leave-your-developers-alone" class="title">Leave Your Developers Alone</h3></div></div></div><p>At a previous workplace of mine, my bosses <span class="bold"><strong>did not like the fact that I sometimes played</strong></span> card solitaire games or Sokoban. I’m not much of a gamer and don’t spend hours on end playing high-end games. But they didn’t like that people who passed by <span class="bold"><strong>saw me not working at that very moment</strong></span>.</p><p>I needed these games to bring my mind back into cycle. I was also labelled as a “strange bird”, because I often stood and looked at our building’s garden and lawn through the window. As <a class="link" href="http://www.paulgraham.com/opensource.html">Paul Graham notes</a> there’s a large difference between <span class="bold"><strong>“pretend work”</strong></span> and <span class="bold"><strong>“real work”</strong></span>. Playing games and looking through the window do not make you less productive. If you’re just writing code for the same codebase all the time, your mind will soon run in circles, and you won’t be productive.</p><p><a class="link" href="http://tech.groups.yahoo.com/group/hackers-il/message/4784">In a mission statement to an innovative software company</a>, I said that I expected developers to work for only 20% of the time? Why? They:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>Usually won’t work more anyhow.</p></li><li class="listitem"><p>Since so little is expected of them, they will feel willing to work more than that. (Assuming they are indeed great developers with a wonderful character).</p></li><li class="listitem"><p>The things they’ll do in the rest of the time will inspire them and allow them to be more productive.</p></li></ol></div><p>Another issue are <span class="bold"><strong>the working hours</strong></span>. Make sure your developers can normally come to the office when they want and go when they want. If you sometimes need more time or better attendance, then great developers will be happy to comply - temporarily. But <a class="link" href="http://www.igda.org/articles/erobinsonncrunch.php">crunch mode is a recipe for disaster</a> - your developers will be over-worked, under-productive, and unhappy. And if they’re smart, they will soon quit.</p><p>And here’s another anecdote: at a previous workplace, I was instructed to fulfil my hours quota at least precisely, so they can get enough benefits from the Israeli Chief Scientist. But what is more beneficial for them: a happy, productive developer who does very good work, or a few extra shekels? I can never understand this skewed logic.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="be_honest_to_your_developers" class="title">Be Honest with your Developers</h3></div></div></div><p>The first thing about being honest with your developers is <span class="bold"><strong>telling them exactly why they weren’t hired</strong></span> if this was indeed the case. Most companies I’ve been to, either rejected me after an otherwise seemingly successful interview, or even sent me an uninformative rejection letter before any interview. This will cause the exceptional developer to wonder what has he done wrong, or what’s wrong with him.</p><p>As an employer, you should have the <span class="bold"><strong>minimal decency to inform the star developers what they did wrong</strong></span> and how to further improve. Otherwise, you’re not being fair with them, and they also may tell all their friends how pointless it was to try to apply for you. (Or tell their friends how good a different company that’s also looking for great hackers treated them.)</p><p>Honesty is also <span class="bold"><strong>telling your developers when they did something right</strong></span>, like finding bugs, fixing bugs, having good ideas, implementing something on schedule, handling a situation properly, etc. and when they did not do something properly. Even the greatest developers make mistakes, but you should be honest enough to evaluate their total performance so far and not just their isolated mistake. A great developer who’s worked for you for a few months, made a mistake recently learned from it, and is determined not to repeat it, <span class="bold"><strong>is a better asset than a new developer</strong></span> who still has a lot to learn at the company.</p><p>Obviously, <span class="bold"><strong>honesty goes in both ways</strong></span>. Great developers should be honest enough to tell their future employers, present employers, and co-workers what they think about them, or if they believe themselves or the latter are doing something wrong or exceptionally well. Honesty is both liberating, and makes sure one avoids problems and problematic patterns.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="let_them_grow" class="title">Let Them Grow</h3></div></div></div><p>Here’s another insight: let your developers grow. If you know they have potential, then hire them regardless if they have the appropriate experience you’re looking for. <span class="bold"><strong>No-one is born</strong></span> a kernel developer, an experienced mod_perl developer, a Java developer with 5 years of experience, or a C/C++ systems programmer. But many people who are <span class="bold"><strong>fresh out of college or even high school</strong></span>, and who like to program for fun, are capable of becoming that by being given an appropriate chance.</p><p>On the IRC, I’ve been talking to someone who graduated in Electrical Engineering from a British university. Since he doesn’t want to work for the defence industry, he became a system administrator at a high school. Now he knows Perl and uses it extensively, but he doesn’t think he can get a more lucrative job as a Perl programmer (of which there’s a lot of demand for in England) because he doesn’t have a lot of mod_perl experience.</p><p>The reason people want experience is <a class="link" href="http://www.joelonsoftware.com/articles/LordPalmerston.html">not because the people with experience are more productive, but because they know how to handle problems they encounter better</a>. I don’t claim experience is not important. However, if you’re using a platform which is both reliable and predictable (<span class="quote">“<span class="quote">it just works</span>”</span>), give your programmers access to the Internet (with the Web, search engines, and IRC), to good searchable books, and to fellow developers who are more experienced than them in that platform, you can make sure they overcome such problems easily.</p><p>A different programmer, also from the UK, <a class="link" href="http://www.perl.org.il/pipermail/perl/2006-June/007956.html">testified that while he started working with Perl and liked it and was good, no one was willing to give him a chance to grow</a>. What is important about great hackers is not their knowledge or experience but their potential, attitude and autodidacticism. Given proper conditions they will accumulate a lot of knowledge, and surpass “medium-level” techs with a small amount of experience.</p><p>So when hiring, don’t ask them highly specialised questions. Otherwise, not only you won’t find too many “experienced developers”, but you will also reject many great developers, who will be excellent for what you do. Training a great hacker is cheap. But hiring an experienced mediocre programmer, is a bad idea.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="take-some-advice" class="title">Take Some Good Advice</h3></div></div></div><p>Here is some good advice I found about software management:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p><a class="link" href="http://www.catb.org/~esr/writings/cathedral-bazaar/">Eric S. Raymond’s <span class="emphasis"><em>The Cathedral and the Bazaar</em></span> series</a>. Also see his <a class="link" href="http://www.catb.org/~esr/faqs/hacker-howto.html">“How to Become a Hacker” document</a>. Concentrates on open-source hacking.</p></li><li class="listitem"><p><a class="link" href="http://www.joelonsoftware.com/"><span class="emphasis"><em>Joel on Software</em></span></a> - a collection of articles and essays and a weblog by Joel Spolsky. Concentrates on writing commercial, marketplace software.</p></li><li class="listitem"><p><a class="link" href="http://www.paulgraham.com/">Paul Graham</a> - many essays on different topics including Lisp, language design, dynamic languages, startups, and general philosophy.</p></li><li class="listitem"><p><a class="link" href="http://www.extremeprogramming.org/">Extreme Programming</a> - a software management methodology intended primarily for developing in-house software, but with some good, general ideas.</p></li></ol></div><p>After reading all of those you’ll become much more clueful about good software management than without it. Reading them taught me a lot, and even if I disagreed with some of the opinions they voiced, they were still good food for thought.</p></section><section class="section"><div class="titlepage"><div><div><h3 id="respect-and-cherish" class="title">Respect and Cherish Your Developers</h3></div></div></div><p>The final advice I can give you is to respect and cherish your developers. If you <span class="bold"><strong>lose one great developer</strong></span>, you’ll have a very hard time finding an adequate replacement for him, if you ever can. So <span class="bold"><strong>listen carefully to what they say</strong></span>, and instruct them to tell you everything that bothers them. Make sure they are working on exciting tasks most of the time, and that they are happy.</p><p>Don’t over-work them, give them the proper tools and equipment, treat them like they were kings (rather than slaves), and make sure they are happy working for you. While it does not guarantee that they won’t leave you, it will probably prevent most premature quitting or getting fired.</p><p>Make sure your developers are the people who ultimately dictate what is possible and what isn’t. At a previous workplace of mine, I was instructed to re-implement a PHP (and Flash 8) application in Perl. At first I thought it was some legacy code, but as it turned out it was done because the marketing department decided that our programs should run on either PHP, Perl or ASP. However, it is common knowledge that maintaining three different codebases in three different languages is close to impossible. (The only real solution is to have a compiler from one common language into the three languages, but I wasn’t instructed to do that.)</p><p>If the marketing department had understood what PHP, Perl and ASP were all about, then they would have known that writing it in PHP was enough. But there wasn’t a feedback from the developers back to the marketing department.</p><p>If your developer wants to work half-time - give it to him. If he wants to work from home, or have his own office instead of working from home - give it to him. Great developers are a scarce resource, and you can’t afford to lose them.</p></section></section><footer><div class="navfooter"><hr/><table style="width:100%"><tr><td style="width:40%;text-align:left"><a accesskey="p" href="how-to-find-great-developers.xhtml">Prev</a> </td><td style="width:20%;text-align:center"> </td><td style="width:40%;text-align:right"> <a accesskey="n" href="conclusion.xhtml">Next</a></td></tr><tr><td style="width:40%;text-align:left;vertical-align:top">How to find Great Developers? </td><td style="width:20%;text-align:center"><a accesskey="h" href="index.xhtml">Home</a></td><td style="width:40%;text-align:right;vertical-align:top"> Conclusion</td></tr></table></div></footer></body></html>